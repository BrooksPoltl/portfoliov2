{"expireTime":9007200842166084000,"key":"transformer-remark-markdown-ast-db3146977cb263d9035356f9e3102245-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54},"indent":[]}},{"type":"link","title":null,"url":"https://teachyourselfcs.com/","children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70},"indent":[]}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101},"indent":[]}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153},"indent":[1]}},{"type":"link","title":null,"url":"http://localhost:8000/teachyourselfcs/programming/00:getting-started/","children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158},"indent":[]}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":128,"offset":230},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":128,"offset":230},"end":{"line":2,"column":129,"offset":231},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":129,"offset":231},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"INTRO","position":{"start":{"line":4,"column":6,"offset":238},"end":{"line":4,"column":11,"offset":243},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":233},"end":{"line":4,"column":11,"offset":243},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I will be following the Summer 2010 ","position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":5,"column":37,"offset":280},"indent":[]}},{"type":"link","title":null,"url":"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html","children":[{"type":"text","value":"Calendar","position":{"start":{"line":5,"column":38,"offset":281},"end":{"line":5,"column":46,"offset":289},"indent":[]}}],"position":{"start":{"line":5,"column":37,"offset":280},"end":{"line":5,"column":101,"offset":344},"indent":[]}},{"type":"text","value":"\nso each week will consist of 4 lectures and 2 labs.","position":{"start":{"line":5,"column":101,"offset":344},"end":{"line":6,"column":52,"offset":396},"indent":[1]}}],"position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":6,"column":52,"offset":396},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"READINGS","position":{"start":{"line":8,"column":6,"offset":403},"end":{"line":8,"column":14,"offset":411},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":398},"end":{"line":8,"column":14,"offset":411},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"1.1","position":{"start":{"line":9,"column":7,"offset":418},"end":{"line":9,"column":10,"offset":421},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":412},"end":{"line":9,"column":10,"offset":421},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"1.2","position":{"start":{"line":10,"column":7,"offset":428},"end":{"line":10,"column":10,"offset":431},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":422},"end":{"line":10,"column":10,"offset":431},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"1.3","position":{"start":{"line":11,"column":7,"offset":438},"end":{"line":11,"column":10,"offset":441},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":432},"end":{"line":11,"column":10,"offset":441},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":13,"column":6,"offset":448},"end":{"line":13,"column":14,"offset":456},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":443},"end":{"line":13,"column":14,"offset":456},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L01","position":{"start":{"line":14,"column":7,"offset":463},"end":{"line":14,"column":10,"offset":466},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":457},"end":{"line":14,"column":10,"offset":466},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":16,"column":8,"offset":475},"end":{"line":16,"column":30,"offset":497},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":468},"end":{"line":16,"column":30,"offset":497},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":18,"column":1,"offset":499},"end":{"line":19,"column":1,"offset":643},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":19,"column":1,"offset":643},"end":{"line":19,"column":5,"offset":647},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":19,"column":5,"offset":647},"end":{"line":19,"column":16,"offset":658},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":19,"column":16,"offset":658},"end":{"line":19,"column":20,"offset":662},"indent":[]}},{"type":"text","value":" \nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like: \n","position":{"start":{"line":19,"column":20,"offset":662},"end":{"line":21,"column":1,"offset":806},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":21,"column":1,"offset":806},"end":{"line":21,"column":5,"offset":810},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":21,"column":5,"offset":810},"end":{"line":21,"column":16,"offset":821},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":21,"column":16,"offset":821},"end":{"line":21,"column":20,"offset":825},"indent":[]}},{"type":"text","value":"\nNow lets say we want to do something like:  ","position":{"start":{"line":21,"column":20,"offset":825},"end":{"line":22,"column":45,"offset":870},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":22,"column":45,"offset":870},"end":{"line":22,"column":49,"offset":874},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">2 + 2 +  3 - 4</code>","position":{"start":{"line":22,"column":49,"offset":874},"end":{"line":22,"column":65,"offset":890},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":22,"column":65,"offset":890},"end":{"line":22,"column":69,"offset":894},"indent":[]}},{"type":"text","value":"\nIn Scheme you can simply nest operators: \n","position":{"start":{"line":22,"column":69,"offset":894},"end":{"line":24,"column":1,"offset":937},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":24,"column":1,"offset":937},"end":{"line":24,"column":5,"offset":941},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":24,"column":5,"offset":941},"end":{"line":24,"column":22,"offset":958},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":24,"column":22,"offset":958},"end":{"line":24,"column":26,"offset":962},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":24,"column":26,"offset":962},"end":{"line":25,"column":1,"offset":963},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":25,"column":1,"offset":963},"end":{"line":25,"column":5,"offset":967},"indent":[]}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer. \n","position":{"start":{"line":25,"column":5,"offset":967},"end":{"line":27,"column":1,"offset":1085},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":27,"column":1,"offset":1085},"end":{"line":27,"column":5,"offset":1089},"indent":[]}},{"type":"text","value":"\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value. \n","position":{"start":{"line":27,"column":5,"offset":1089},"end":{"line":29,"column":1,"offset":1210},"indent":[1,1]}},{"type":"html","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":29,"column":1,"offset":1210},"end":{"line":29,"column":12,"offset":1221},"indent":[]}},{"type":"text","value":" is a expression and not a primitive value, so it calls ","position":{"start":{"line":29,"column":12,"offset":1221},"end":{"line":29,"column":68,"offset":1277},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":29,"column":68,"offset":1277},"end":{"line":29,"column":79,"offset":1288},"indent":[]}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":29,"column":79,"offset":1288},"end":{"line":29,"column":106,"offset":1315},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":29,"column":106,"offset":1315},"end":{"line":29,"column":109,"offset":1318},"indent":[]}},{"type":"text","value":" is now 7 and both arguments are primitive values, meaning it can calculate the ","position":{"start":{"line":29,"column":109,"offset":1318},"end":{"line":29,"column":189,"offset":1398},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":29,"column":189,"offset":1398},"end":{"line":29,"column":192,"offset":1401},"indent":[]}},{"type":"text","value":" to get 3.","position":{"start":{"line":29,"column":192,"offset":1401},"end":{"line":29,"column":202,"offset":1411},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":499},"end":{"line":29,"column":202,"offset":1411},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Define","position":{"start":{"line":31,"column":8,"offset":1420},"end":{"line":31,"column":14,"offset":1426},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1413},"end":{"line":31,"column":14,"offset":1426},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":32,"column":1,"offset":1427},"end":{"line":32,"column":9,"offset":1435},"indent":[]}},{"type":"text","value":" is an interesting keyword. It can be used to create functions: ","position":{"start":{"line":32,"column":9,"offset":1435},"end":{"line":32,"column":73,"offset":1499},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1427},"end":{"line":32,"column":73,"offset":1499},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":33,"column":1,"offset":1500},"end":{"line":36,"column":4,"offset":1539},"indent":[1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":37,"column":1,"offset":1540},"end":{"line":37,"column":5,"offset":1544},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The syntax is very different from other languages, but try to think of ","position":{"start":{"line":39,"column":1,"offset":1546},"end":{"line":39,"column":72,"offset":1617},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":39,"column":72,"offset":1617},"end":{"line":39,"column":80,"offset":1625},"indent":[]}},{"type":"text","value":" as a function itself. \n","position":{"start":{"line":39,"column":80,"offset":1625},"end":{"line":40,"column":1,"offset":1649},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":40,"column":1,"offset":1649},"end":{"line":40,"column":5,"offset":1653},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":40,"column":5,"offset":1653},"end":{"line":41,"column":1,"offset":1654},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":41,"column":1,"offset":1654},"end":{"line":41,"column":5,"offset":1658},"indent":[]}},{"type":"text","value":"\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case ","position":{"start":{"line":41,"column":5,"offset":1658},"end":{"line":42,"column":184,"offset":1842},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":42,"column":184,"offset":1842},"end":{"line":42,"column":187,"offset":1845},"indent":[]}},{"type":"text","value":". \n","position":{"start":{"line":42,"column":187,"offset":1845},"end":{"line":43,"column":1,"offset":1848},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":43,"column":1,"offset":1848},"end":{"line":43,"column":5,"offset":1852},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":43,"column":5,"offset":1852},"end":{"line":44,"column":1,"offset":1853},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":44,"column":1,"offset":1853},"end":{"line":44,"column":5,"offset":1857},"indent":[]}},{"type":"text","value":"\nThe second parameter that ","position":{"start":{"line":44,"column":5,"offset":1857},"end":{"line":45,"column":27,"offset":1884},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":45,"column":27,"offset":1884},"end":{"line":45,"column":35,"offset":1892},"indent":[]}},{"type":"text","value":" takes in is the body that the procedure will call ","position":{"start":{"line":45,"column":35,"offset":1892},"end":{"line":45,"column":86,"offset":1943},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(* x x)</code>","position":{"start":{"line":45,"column":86,"offset":1943},"end":{"line":45,"column":95,"offset":1952},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":45,"column":95,"offset":1952},"end":{"line":45,"column":97,"offset":1954},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1546},"end":{"line":45,"column":97,"offset":1954},"indent":[1,1,1,1,1,1]}},{"type":"html","value":"<br> ","position":{"start":{"line":47,"column":1,"offset":1956},"end":{"line":47,"column":6,"offset":1961},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Define can also be used to store constants:\n","position":{"start":{"line":49,"column":1,"offset":1963},"end":{"line":50,"column":1,"offset":2007},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":50,"column":1,"offset":2007},"end":{"line":50,"column":5,"offset":2011},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":50,"column":5,"offset":2011},"end":{"line":51,"column":1,"offset":2012},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">(define pi 3.14159)</code>","position":{"start":{"line":51,"column":1,"offset":2012},"end":{"line":51,"column":22,"offset":2033},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":51,"column":22,"offset":2033},"end":{"line":52,"column":1,"offset":2034},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":52,"column":1,"offset":2034},"end":{"line":52,"column":5,"offset":2038},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1963},"end":{"line":52,"column":5,"offset":2038},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.","position":{"start":{"line":54,"column":1,"offset":2040},"end":{"line":54,"column":152,"offset":2191},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2040},"end":{"line":54,"column":152,"offset":2191},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":56,"column":8,"offset":2200},"end":{"line":56,"column":20,"offset":2212},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2193},"end":{"line":56,"column":20,"offset":2212},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is the first example of a program we see in class:","position":{"start":{"line":58,"column":1,"offset":2214},"end":{"line":58,"column":56,"offset":2269},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2214},"end":{"line":58,"column":56,"offset":2269},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>","position":{"start":{"line":59,"column":1,"offset":2270},"end":{"line":64,"column":4,"offset":2361},"indent":[1,1,1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":65,"column":1,"offset":2362},"end":{"line":65,"column":5,"offset":2366},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As you’ve probably already guessed, ","position":{"start":{"line":67,"column":1,"offset":2368},"end":{"line":67,"column":37,"offset":2404},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":67,"column":37,"offset":2404},"end":{"line":67,"column":41,"offset":2408},"indent":[]}},{"type":"text","value":" is a function. \n","position":{"start":{"line":67,"column":41,"offset":2408},"end":{"line":68,"column":1,"offset":2425},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":68,"column":1,"offset":2425},"end":{"line":68,"column":5,"offset":2429},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":68,"column":5,"offset":2429},"end":{"line":69,"column":1,"offset":2430},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":69,"column":1,"offset":2430},"end":{"line":69,"column":5,"offset":2434},"indent":[]}},{"type":"text","value":"\nThe first parameter is the test case for example if we input fly ","position":{"start":{"line":69,"column":5,"offset":2434},"end":{"line":70,"column":66,"offset":2500},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">(equal? (last wd) &#39;y)</code>","position":{"start":{"line":70,"column":66,"offset":2500},"end":{"line":70,"column":89,"offset":2523},"indent":[]}},{"type":"text","value":" would be true, because fly ends in y. \n","position":{"start":{"line":70,"column":89,"offset":2523},"end":{"line":71,"column":1,"offset":2563},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":71,"column":1,"offset":2563},"end":{"line":71,"column":5,"offset":2567},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":71,"column":5,"offset":2567},"end":{"line":72,"column":1,"offset":2568},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":72,"column":1,"offset":2568},"end":{"line":72,"column":5,"offset":2572},"indent":[]}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":72,"column":5,"offset":2572},"end":{"line":73,"column":21,"offset":2593},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":73,"column":21,"offset":2593},"end":{"line":73,"column":25,"offset":2597},"indent":[]}},{"type":"text","value":" takes in is the expression if the test case is true.\n","position":{"start":{"line":73,"column":25,"offset":2597},"end":{"line":74,"column":1,"offset":2651},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":74,"column":1,"offset":2651},"end":{"line":74,"column":5,"offset":2655},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":74,"column":5,"offset":2655},"end":{"line":75,"column":1,"offset":2656},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":75,"column":1,"offset":2656},"end":{"line":75,"column":5,"offset":2660},"indent":[]}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":75,"column":5,"offset":2660},"end":{"line":76,"column":21,"offset":2681},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":76,"column":21,"offset":2681},"end":{"line":76,"column":25,"offset":2685},"indent":[]}},{"type":"text","value":" takes in is the expression if the test case is false.\n","position":{"start":{"line":76,"column":25,"offset":2685},"end":{"line":77,"column":1,"offset":2740},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":77,"column":1,"offset":2740},"end":{"line":77,"column":5,"offset":2744},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":77,"column":5,"offset":2744},"end":{"line":78,"column":1,"offset":2745},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":78,"column":1,"offset":2745},"end":{"line":78,"column":5,"offset":2749},"indent":[]}},{"type":"text","value":"\nAlso worth noting that names that return a boolean add a ","position":{"start":{"line":78,"column":5,"offset":2749},"end":{"line":79,"column":58,"offset":2807},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">?</code>","position":{"start":{"line":79,"column":58,"offset":2807},"end":{"line":79,"column":61,"offset":2810},"indent":[]}},{"type":"text","value":" to the end to show that the primitive returned is true or false. Like how equal is ","position":{"start":{"line":79,"column":61,"offset":2810},"end":{"line":79,"column":145,"offset":2894},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">equal?</code>","position":{"start":{"line":79,"column":145,"offset":2894},"end":{"line":79,"column":153,"offset":2902},"indent":[]}},{"type":"text","value":" in the code block above.","position":{"start":{"line":79,"column":153,"offset":2902},"end":{"line":79,"column":178,"offset":2927},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":2368},"end":{"line":79,"column":178,"offset":2927},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L02","position":{"start":{"line":81,"column":7,"offset":2935},"end":{"line":81,"column":10,"offset":2938},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2929},"end":{"line":81,"column":10,"offset":2938},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Recursion","position":{"start":{"line":83,"column":8,"offset":2947},"end":{"line":83,"column":17,"offset":2956},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2940},"end":{"line":83,"column":17,"offset":2956},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":84,"column":1,"offset":2957},"end":{"line":95,"column":4,"offset":3156},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":96,"column":1,"offset":3157},"end":{"line":96,"column":5,"offset":3161},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n","position":{"start":{"line":98,"column":1,"offset":3163},"end":{"line":99,"column":1,"offset":3379},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":99,"column":1,"offset":3379},"end":{"line":99,"column":5,"offset":3383},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":99,"column":5,"offset":3383},"end":{"line":100,"column":1,"offset":3384},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":100,"column":1,"offset":3384},"end":{"line":100,"column":5,"offset":3388},"indent":[]}},{"type":"text","value":"\nNotice in the above example from lecture the function calls pigl until ","position":{"start":{"line":100,"column":5,"offset":3388},"end":{"line":101,"column":72,"offset":3460},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":101,"column":72,"offset":3460},"end":{"line":101,"column":81,"offset":3469},"indent":[]}},{"type":"text","value":" is equal to true.\n","position":{"start":{"line":101,"column":81,"offset":3469},"end":{"line":102,"column":1,"offset":3488},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":102,"column":1,"offset":3488},"end":{"line":102,"column":5,"offset":3492},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":102,"column":5,"offset":3492},"end":{"line":103,"column":1,"offset":3493},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":103,"column":1,"offset":3493},"end":{"line":103,"column":5,"offset":3497},"indent":[]}},{"type":"text","value":"\nLets say ","position":{"start":{"line":103,"column":5,"offset":3497},"end":{"line":104,"column":10,"offset":3507},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":104,"column":10,"offset":3507},"end":{"line":104,"column":16,"offset":3513},"indent":[]}},{"type":"text","value":" gets called with ","position":{"start":{"line":104,"column":16,"offset":3513},"end":{"line":104,"column":34,"offset":3531},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">scheme</code>","position":{"start":{"line":104,"column":34,"offset":3531},"end":{"line":104,"column":42,"offset":3539},"indent":[]}},{"type":"text","value":".\nThe conditional checks ","position":{"start":{"line":104,"column":42,"offset":3539},"end":{"line":105,"column":24,"offset":3564},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":105,"column":24,"offset":3564},"end":{"line":105,"column":33,"offset":3573},"indent":[]}},{"type":"text","value":" which checks the first letter in the word to see if it is a vowel. Since ","position":{"start":{"line":105,"column":33,"offset":3573},"end":{"line":105,"column":107,"offset":3647},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":105,"column":107,"offset":3647},"end":{"line":105,"column":116,"offset":3656},"indent":[]}},{"type":"text","value":" is false because ","position":{"start":{"line":105,"column":116,"offset":3656},"end":{"line":105,"column":134,"offset":3674},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":105,"column":134,"offset":3674},"end":{"line":105,"column":137,"offset":3677},"indent":[]}},{"type":"text","value":" isn’t a vowel it calls ","position":{"start":{"line":105,"column":137,"offset":3677},"end":{"line":105,"column":161,"offset":3701},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":105,"column":161,"offset":3701},"end":{"line":105,"column":167,"offset":3707},"indent":[]}},{"type":"text","value":" again with the argument ","position":{"start":{"line":105,"column":167,"offset":3707},"end":{"line":105,"column":192,"offset":3732},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">chemes</code>","position":{"start":{"line":105,"column":192,"offset":3732},"end":{"line":105,"column":200,"offset":3740},"indent":[]}},{"type":"text","value":". This is because ","position":{"start":{"line":105,"column":200,"offset":3740},"end":{"line":105,"column":218,"offset":3758},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">word</code>","position":{"start":{"line":105,"column":218,"offset":3758},"end":{"line":105,"column":224,"offset":3764},"indent":[]}},{"type":"text","value":" takes the arguments ","position":{"start":{"line":105,"column":224,"offset":3764},"end":{"line":105,"column":245,"offset":3785},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cheme</code>","position":{"start":{"line":105,"column":245,"offset":3785},"end":{"line":105,"column":252,"offset":3792},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":105,"column":252,"offset":3792},"end":{"line":105,"column":257,"offset":3797},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":105,"column":257,"offset":3797},"end":{"line":105,"column":260,"offset":3800},"indent":[]}},{"type":"text","value":" and adds them together. ","position":{"start":{"line":105,"column":260,"offset":3800},"end":{"line":105,"column":285,"offset":3825},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":105,"column":285,"offset":3825},"end":{"line":105,"column":291,"offset":3831},"indent":[]}},{"type":"text","value":" gets called repeatedly until \nit is called with a vowel as the first letter. When the first letter is a vowel the expression ","position":{"start":{"line":105,"column":291,"offset":3831},"end":{"line":106,"column":96,"offset":3957},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">(word wd &#39;ay)</code>","position":{"start":{"line":106,"column":96,"offset":3957},"end":{"line":106,"column":111,"offset":3972},"indent":[]}},{"type":"text","value":" is ran and the result is a primitive which means the procedure stops. ","position":{"start":{"line":106,"column":111,"offset":3972},"end":{"line":106,"column":182,"offset":4043},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":3163},"end":{"line":106,"column":182,"offset":4043},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":108,"column":8,"offset":4052},"end":{"line":108,"column":19,"offset":4063},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":4045},"end":{"line":108,"column":19,"offset":4063},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Big Picture: ","position":{"start":{"line":109,"column":1,"offset":4064},"end":{"line":109,"column":14,"offset":4077},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":4064},"end":{"line":109,"column":14,"offset":4077},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>","position":{"start":{"line":110,"column":1,"offset":4078},"end":{"line":125,"column":4,"offset":4493},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that can be referenced as a whole.","position":{"start":{"line":126,"column":1,"offset":4494},"end":{"line":126,"column":141,"offset":4634},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4494},"end":{"line":126,"column":141,"offset":4634},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L03","position":{"start":{"line":127,"column":7,"offset":4641},"end":{"line":127,"column":10,"offset":4644},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":4635},"end":{"line":127,"column":10,"offset":4644},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L04","position":{"start":{"line":128,"column":7,"offset":4651},"end":{"line":128,"column":10,"offset":4654},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":4645},"end":{"line":128,"column":10,"offset":4654},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"LABS","position":{"start":{"line":130,"column":6,"offset":4661},"end":{"line":130,"column":10,"offset":4665},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":4656},"end":{"line":130,"column":10,"offset":4665},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"Lab 1","position":{"start":{"line":131,"column":7,"offset":4672},"end":{"line":131,"column":12,"offset":4677},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":4666},"end":{"line":131,"column":13,"offset":4678},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"Lab 2","position":{"start":{"line":132,"column":7,"offset":4685},"end":{"line":132,"column":12,"offset":4690},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":4679},"end":{"line":132,"column":13,"offset":4691},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":132,"column":13,"offset":4691}}}}