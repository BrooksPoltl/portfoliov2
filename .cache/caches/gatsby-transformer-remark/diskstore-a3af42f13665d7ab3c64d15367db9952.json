{"expireTime":9007200843253983000,"key":"transformer-remark-markdown-html-ast-9caf80d8fa6e943ff0bea3e44bf4187a-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":2,"column":6,"offset":6},"end":{"line":2,"column":14,"offset":14}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":14,"offset":14}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L14","position":{"start":{"line":3,"column":7,"offset":21},"end":{"line":3,"column":10,"offset":24}}}],"position":{"start":{"line":3,"column":1,"offset":15},"end":{"line":3,"column":10,"offset":24}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"2 types of expressions:","position":{"start":{"line":4,"column":1,"offset":25},"end":{"line":4,"column":24,"offset":48}}}],"position":{"start":{"line":4,"column":1,"offset":25},"end":{"line":4,"column":24,"offset":48}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                 expr\n    _______________|___________________    \n    |                                 |\n    atomic                           list\n    ___|__________                     |\n    |            |            _______________________       \nself-eval    variables        procedures special-forms</code></pre></div>","position":{"start":{"line":5,"column":1,"offset":49},"end":{"line":13,"column":4,"offset":361}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    (define (eval exp)\n    (cond ((self-evaluating? exp) exp)\n    ((symbol? exp) (look-up-global-value exp))\n    ((special-form? exp) (do-special-form exp))\n    (else (apply (eval (car exp))\n    (map eval (cdr exp)) ))))</code></pre></div>","position":{"start":{"line":15,"column":1,"offset":363},"end":{"line":22,"column":4,"offset":591}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Above is the eval function for an interpreter in Scheme. Notice it attempts to determine the type of expression then has a function to handle them. If it is a list it recursively calls eval to break the list into primitives.\n","position":{"start":{"line":23,"column":1,"offset":592},"end":{"line":24,"column":1,"offset":817}}},{"type":"raw","value":"<br>","position":{"start":{"line":24,"column":1,"offset":817},"end":{"line":24,"column":5,"offset":821}}},{"type":"text","value":"\n","position":{"start":{"line":24,"column":5,"offset":821},"end":{"line":25,"column":1,"offset":822}}},{"type":"raw","value":"<br>","position":{"start":{"line":25,"column":1,"offset":822},"end":{"line":25,"column":5,"offset":826}}}],"position":{"start":{"line":23,"column":1,"offset":592},"end":{"line":25,"column":5,"offset":826}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    (define (apply proc args)\n        (if (primitive? proc)\n            (do-magic proc args)\n            (eval (substitute (body proc) (formals proc) args))))</code></pre></div>","position":{"start":{"line":26,"column":1,"offset":827},"end":{"line":31,"column":4,"offset":993}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"apply takes a procedure and a list of arguments. In the else of ","position":{"start":{"line":32,"column":1,"offset":994},"end":{"line":32,"column":65,"offset":1058}}},{"type":"raw","value":"<code class=\"language-text\">eval</code>","position":{"start":{"line":32,"column":65,"offset":1058},"end":{"line":32,"column":71,"offset":1064}}},{"type":"text","value":" apply gets the first argument which will always the procedure call, and then it maps the arguments.\n","position":{"start":{"line":32,"column":71,"offset":1064},"end":{"line":33,"column":1,"offset":1165}}},{"type":"raw","value":"<br>","position":{"start":{"line":33,"column":1,"offset":1165},"end":{"line":33,"column":5,"offset":1169}}},{"type":"text","value":"\n","position":{"start":{"line":33,"column":5,"offset":1169},"end":{"line":34,"column":1,"offset":1170}}},{"type":"raw","value":"<br>","position":{"start":{"line":34,"column":1,"offset":1170},"end":{"line":34,"column":5,"offset":1174}}}],"position":{"start":{"line":32,"column":1,"offset":994},"end":{"line":34,"column":5,"offset":1174}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the procedure is a primitive it gets handled at the machine language level.","position":{"start":{"line":36,"column":1,"offset":1176},"end":{"line":36,"column":79,"offset":1254}}}],"position":{"start":{"line":36,"column":1,"offset":1176},"end":{"line":36,"column":79,"offset":1254}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":38,"column":1,"offset":1256},"end":{"line":39,"column":5,"offset":1265}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the procedure is created by a lambda,\nit has formal parameters and a body.\n","position":{"start":{"line":41,"column":1,"offset":1267},"end":{"line":43,"column":1,"offset":1345}}},{"type":"raw","value":"<br>","position":{"start":{"line":43,"column":1,"offset":1345},"end":{"line":43,"column":5,"offset":1349}}},{"type":"text","value":"\n","position":{"start":{"line":43,"column":5,"offset":1349},"end":{"line":44,"column":1,"offset":1350}}},{"type":"raw","value":"<br>","position":{"start":{"line":44,"column":1,"offset":1350},"end":{"line":44,"column":5,"offset":1354}}},{"type":"text","value":"\nScheme uses environmental model of evaluation, but we are building a substitution model interpreter right now.\nSubstitution works for functional programming, but not all paradigms.\n","position":{"start":{"line":44,"column":5,"offset":1354},"end":{"line":47,"column":1,"offset":1537}}},{"type":"raw","value":"<br>","position":{"start":{"line":47,"column":1,"offset":1537},"end":{"line":47,"column":5,"offset":1541}}},{"type":"text","value":"\n","position":{"start":{"line":47,"column":5,"offset":1541},"end":{"line":48,"column":1,"offset":1542}}},{"type":"raw","value":"<br>","position":{"start":{"line":48,"column":1,"offset":1542},"end":{"line":48,"column":5,"offset":1546}}}],"position":{"start":{"line":41,"column":1,"offset":1267},"end":{"line":48,"column":5,"offset":1546}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L15","position":{"start":{"line":50,"column":7,"offset":1554},"end":{"line":50,"column":10,"offset":1557}}}],"position":{"start":{"line":50,"column":1,"offset":1548},"end":{"line":50,"column":10,"offset":1557}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L16","position":{"start":{"line":53,"column":7,"offset":1566},"end":{"line":53,"column":10,"offset":1569}}}],"position":{"start":{"line":53,"column":1,"offset":1560},"end":{"line":53,"column":10,"offset":1569}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L17","position":{"start":{"line":54,"column":7,"offset":1576},"end":{"line":54,"column":10,"offset":1579}}}],"position":{"start":{"line":54,"column":1,"offset":1570},"end":{"line":54,"column":10,"offset":1579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L38","position":{"start":{"line":55,"column":7,"offset":1586},"end":{"line":55,"column":10,"offset":1589}}}],"position":{"start":{"line":55,"column":1,"offset":1580},"end":{"line":55,"column":10,"offset":1589}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L39","position":{"start":{"line":56,"column":7,"offset":1596},"end":{"line":56,"column":10,"offset":1599}}}],"position":{"start":{"line":56,"column":1,"offset":1590},"end":{"line":56,"column":10,"offset":1599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LAB","position":{"start":{"line":58,"column":6,"offset":1606},"end":{"line":58,"column":9,"offset":1609}}}],"position":{"start":{"line":58,"column":1,"offset":1601},"end":{"line":58,"column":9,"offset":1609}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"lab 3","position":{"start":{"line":59,"column":7,"offset":1616},"end":{"line":59,"column":12,"offset":1621}}}],"position":{"start":{"line":59,"column":1,"offset":1610},"end":{"line":59,"column":12,"offset":1621}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"READINGS","position":{"start":{"line":61,"column":6,"offset":1628},"end":{"line":61,"column":14,"offset":1636}}}],"position":{"start":{"line":61,"column":1,"offset":1623},"end":{"line":61,"column":14,"offset":1636}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"2.4","position":{"start":{"line":62,"column":7,"offset":1643},"end":{"line":62,"column":10,"offset":1646}}}],"position":{"start":{"line":62,"column":1,"offset":1637},"end":{"line":62,"column":10,"offset":1646}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"2.5","position":{"start":{"line":63,"column":7,"offset":1653},"end":{"line":63,"column":10,"offset":1656}}}],"position":{"start":{"line":63,"column":1,"offset":1647},"end":{"line":63,"column":10,"offset":1656}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":63,"column":10,"offset":1656}}}}