{"expireTime":9007200843225969000,"key":"transformer-remark-markdown-html-fb190526cc510f9dbd9f2278b50e7b24-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h4>LECTURES</h4>\n<h5>L14</h5>\n<p>2 types of expressions:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                 expr\n    _______________|___________________    \n    |                                 |\n    atomic                           list\n    ___|__________                     |\n    |            |            _______________________       \nself-eval    variables        procedures special-forms</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    (define (eval exp)\n    (cond ((self-evaluating? exp) exp)\n    ((symbol? exp) (look-up-global-value exp))\n    ((special-form? exp) (do-special-form exp))\n    (else (apply (eval (car exp))\n    (map eval (cdr exp)) ))))</code></pre></div>\n<p>Above is the eval function for an interpreter in Scheme. Notice it attempts to determine the type of expression then has a function to handle them. If it is a list it recursively calls eval to break the list into primitives.\n<br>\n<br></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    (define (apply proc args)\n        (if (primitive? proc)\n            (do-magic proc args)\n            (eval (substitute (body proc) (formals proc) args))))</code></pre></div>\n<p>apply takes a procedure and a list of arguments. In the else of <code class=\"language-text\">eval</code> apply gets the first argument which will always the function.</p>\n<h5>L15</h5>\n<h5>L16</h5>\n<h5>L17</h5>\n<h5>L38</h5>\n<h5>L39</h5>\n<h4>LAB</h4>\n<h5>lab 3</h5>\n<h4>READINGS</h4>\n<h5>2.4</h5>\n<h5>2.5</h5>"}