{"expireTime":9007200842166040000,"key":"transformer-remark-markdown-html-4fac421ae7193f5e0276505c441ac28d-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>This article is a part of a series where I go through <a href=\"https://teachyourselfcs.com/\">teachyourselfcs</a>.\nIf you would like to start at the beginning start <a href=\"http://localhost:8000/teachyourselfcs/programming/00:getting-started/\">here</a>.</p>\n<h4>INTRO</h4>\n<p>I will be following the Summer 2010 <a href=\"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html\">Calendar</a>\nso each week will consist of 4 lectures and 2 labs.</p>\n<h4>READINGS</h4>\n<h5>1.1</h5>\n<h5>1.2</h5>\n<h5>1.3</h5>\n<h4>LECTURES</h4>\n<h5>L01</h5>\n<h6>Mathmatical Operations</h6>\n<p>Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n<br><code class=\"language-text\">2 + 2 + 3</code><br>\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n<br><code class=\"language-text\">(+ 2 2 3)</code><br>\nNow lets say we want to do something like:  <br><code class=\"language-text\">2 + 2 +  3 - 4</code><br>\nIn Scheme you can simply nest operators:\n<br><code class=\"language-text\">(- (+ 2 2 3) 4)</code><br>\n<br>\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer.\n<br>\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value.\n<code class=\"language-text\">(+ 2 2 3)</code> is a expression and not a primitive value, so it calls <code class=\"language-text\">(+ 2 2 3)</code>. The left argument of the <code class=\"language-text\">-</code> is now 7 and both arguments are primitive values, meaning it can calculate the <code class=\"language-text\">-</code> to get 3.</p>\n<h6>Define</h6>\n<p><code class=\"language-text\">define</code> is an interesting keyword. It can be used to create functions: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>\n<br>\n<p>The syntax is very different from other languages, but try to think of <code class=\"language-text\">define</code> as a function itself.\n<br>\n<br>\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case <code class=\"language-text\">x</code>.\n<br>\n<br>\nThe second parameter that <code class=\"language-text\">define</code> takes in is the body that the procedure will call <code class=\"language-text\">(* x x)</code>. </p>\n<br> \n<p>Define can also be used to store constants:\n<br>\n<code class=\"language-text\">(define pi 3.14159)</code>\n<br></p>\n<p>This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.</p>\n<h6>Conditionals</h6>\n<p>Here is the first example of a program we see in class:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>\n<br>\n<p>As you’ve probably already guessed, <code class=\"language-text\">if</code> is a function.\n<br>\n<br>\nThe first parameter is the test case for example if we input fly <code class=\"language-text\">(equal? (last wd) &#39;y)</code> would be true, because fly ends in y.\n<br>\n<br>\nThe third parameter <code class=\"language-text\">if</code> takes in is the expression if the test case is true.\n<br>\n<br>\nThe third parameter <code class=\"language-text\">if</code> takes in is the expression if the test case is false.\n<br>\n<br>\nAlso worth noting that names that return a boolean add a <code class=\"language-text\">?</code> to the end to show that the primitive returned is true or false. Like how equal is <code class=\"language-text\">equal?</code> in the code block above.</p>\n<h5>L02</h5>\n<h6>Recursion</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>\n<br>\n<p>Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n<br>\n<br>\nNotice in the above example from lecture the function calls pigl until <code class=\"language-text\">pl-done</code> is equal to true.\n<br>\n<br>\nLets say <code class=\"language-text\">pigl</code> gets called with <code class=\"language-text\">scheme</code>.\nThe conditional checks <code class=\"language-text\">pl-done</code> which checks the first letter in the word to see if it is a vowel. Since <code class=\"language-text\">pl-done</code> is false because <code class=\"language-text\">s</code> isn’t a vowel it calls <code class=\"language-text\">pigl</code> again with the argument <code class=\"language-text\">chemes</code>. This is because <code class=\"language-text\">word</code> takes the arguments <code class=\"language-text\">cheme</code> and <code class=\"language-text\">s</code> and adds them together. <code class=\"language-text\">pigl</code> gets called repeatedly until\nit is called with a vowel as the first letter. When the first letter is a vowel the expression <code class=\"language-text\">(word wd &#39;ay)</code> is ran and the result is a primitive which means the procedure stops. </p>\n<h6>Abstraction</h6>\n<p>Big Picture: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>\n<p>Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that is able to interact with other things.</p>\n<h5>L03</h5>\n<h5>L04</h5>\n<h4>LABS</h4>\n<h5>Lab 1</h5>\n<h5>Lab 2</h5>"}