{"expireTime":9007200842837800000,"key":"transformer-remark-markdown-html-ast-5f946238956615d41869661f31f046c7-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54}}},{"type":"element","tagName":"a","properties":{"href":"https://teachyourselfcs.com/"},"children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70}}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101}}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153}}},{"type":"element","tagName":"a","properties":{"href":"http://localhost:8000/teachyourselfcs/programming/00:getting-started/"},"children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158}}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":128,"offset":230}}},{"type":"text","value":".","position":{"start":{"line":2,"column":128,"offset":230},"end":{"line":2,"column":129,"offset":231}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":129,"offset":231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"INTRO","position":{"start":{"line":4,"column":6,"offset":238},"end":{"line":4,"column":11,"offset":243}}}],"position":{"start":{"line":4,"column":1,"offset":233},"end":{"line":4,"column":11,"offset":243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I will be following the Summer 2010 ","position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":5,"column":37,"offset":280}}},{"type":"element","tagName":"a","properties":{"href":"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html"},"children":[{"type":"text","value":"Calendar","position":{"start":{"line":5,"column":38,"offset":281},"end":{"line":5,"column":46,"offset":289}}}],"position":{"start":{"line":5,"column":37,"offset":280},"end":{"line":5,"column":101,"offset":344}}},{"type":"text","value":"\nso each week will consist of 4 lectures and 2 labs.","position":{"start":{"line":5,"column":101,"offset":344},"end":{"line":6,"column":52,"offset":396}}}],"position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":6,"column":52,"offset":396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":8,"column":6,"offset":403},"end":{"line":8,"column":14,"offset":411}}}],"position":{"start":{"line":8,"column":1,"offset":398},"end":{"line":8,"column":14,"offset":411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L01","position":{"start":{"line":9,"column":7,"offset":418},"end":{"line":9,"column":10,"offset":421}}}],"position":{"start":{"line":9,"column":1,"offset":412},"end":{"line":9,"column":10,"offset":421}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":11,"column":8,"offset":430},"end":{"line":11,"column":30,"offset":452}}}],"position":{"start":{"line":11,"column":1,"offset":423},"end":{"line":11,"column":30,"offset":452}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":13,"column":1,"offset":454},"end":{"line":14,"column":1,"offset":598}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":1,"offset":598},"end":{"line":14,"column":5,"offset":602}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":14,"column":5,"offset":602},"end":{"line":14,"column":16,"offset":613}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":16,"offset":613},"end":{"line":14,"column":20,"offset":617}}},{"type":"text","value":"\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n","position":{"start":{"line":14,"column":20,"offset":617},"end":{"line":16,"column":1,"offset":761}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":1,"offset":761},"end":{"line":16,"column":5,"offset":765}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":16,"column":5,"offset":765},"end":{"line":16,"column":16,"offset":776}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":16,"offset":776},"end":{"line":16,"column":20,"offset":780}}},{"type":"text","value":"\nNow lets say we want to do something like:  ","position":{"start":{"line":16,"column":20,"offset":780},"end":{"line":17,"column":45,"offset":825}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":45,"offset":825},"end":{"line":17,"column":49,"offset":829}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 +  3 - 4</code>","position":{"start":{"line":17,"column":49,"offset":829},"end":{"line":17,"column":65,"offset":845}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":65,"offset":845},"end":{"line":17,"column":69,"offset":849}}},{"type":"text","value":"\nIn Scheme you can simply nest operators:\n","position":{"start":{"line":17,"column":69,"offset":849},"end":{"line":19,"column":1,"offset":892}}},{"type":"raw","value":"<br>","position":{"start":{"line":19,"column":1,"offset":892},"end":{"line":19,"column":5,"offset":896}}},{"type":"raw","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":19,"column":5,"offset":896},"end":{"line":19,"column":22,"offset":913}}},{"type":"raw","value":"<br>","position":{"start":{"line":19,"column":22,"offset":913},"end":{"line":19,"column":26,"offset":917}}},{"type":"text","value":"\n","position":{"start":{"line":19,"column":26,"offset":917},"end":{"line":20,"column":1,"offset":918}}},{"type":"raw","value":"<br>","position":{"start":{"line":20,"column":1,"offset":918},"end":{"line":20,"column":5,"offset":922}}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer.\n","position":{"start":{"line":20,"column":5,"offset":922},"end":{"line":22,"column":1,"offset":1040}}},{"type":"raw","value":"<br>","position":{"start":{"line":22,"column":1,"offset":1040},"end":{"line":22,"column":5,"offset":1044}}},{"type":"text","value":"\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value.\n","position":{"start":{"line":22,"column":5,"offset":1044},"end":{"line":24,"column":1,"offset":1165}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":24,"column":1,"offset":1165},"end":{"line":24,"column":12,"offset":1176}}},{"type":"text","value":" is a expression and not a primitive value, so it calls ","position":{"start":{"line":24,"column":12,"offset":1176},"end":{"line":24,"column":68,"offset":1232}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":24,"column":68,"offset":1232},"end":{"line":24,"column":79,"offset":1243}}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":24,"column":79,"offset":1243},"end":{"line":24,"column":106,"offset":1270}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":24,"column":106,"offset":1270},"end":{"line":24,"column":109,"offset":1273}}},{"type":"text","value":" is now 7 and both arguments are primitive values, meaning it can calculate the ","position":{"start":{"line":24,"column":109,"offset":1273},"end":{"line":24,"column":189,"offset":1353}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":24,"column":189,"offset":1353},"end":{"line":24,"column":192,"offset":1356}}},{"type":"text","value":" to get 3.","position":{"start":{"line":24,"column":192,"offset":1356},"end":{"line":24,"column":202,"offset":1366}}}],"position":{"start":{"line":13,"column":1,"offset":454},"end":{"line":24,"column":202,"offset":1366}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Define","position":{"start":{"line":26,"column":8,"offset":1375},"end":{"line":26,"column":14,"offset":1381}}}],"position":{"start":{"line":26,"column":1,"offset":1368},"end":{"line":26,"column":14,"offset":1381}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":27,"column":1,"offset":1382},"end":{"line":27,"column":9,"offset":1390}}},{"type":"text","value":" is an interesting keyword. It can be used to create functions: ","position":{"start":{"line":27,"column":9,"offset":1390},"end":{"line":27,"column":73,"offset":1454}}}],"position":{"start":{"line":27,"column":1,"offset":1382},"end":{"line":27,"column":73,"offset":1454}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":28,"column":1,"offset":1455},"end":{"line":31,"column":4,"offset":1494}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":32,"column":1,"offset":1495},"end":{"line":32,"column":5,"offset":1499}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The syntax is very different from other languages, but try to think of ","position":{"start":{"line":34,"column":1,"offset":1501},"end":{"line":34,"column":72,"offset":1572}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":34,"column":72,"offset":1572},"end":{"line":34,"column":80,"offset":1580}}},{"type":"text","value":" as a function itself.\n","position":{"start":{"line":34,"column":80,"offset":1580},"end":{"line":35,"column":1,"offset":1604}}},{"type":"raw","value":"<br>","position":{"start":{"line":35,"column":1,"offset":1604},"end":{"line":35,"column":5,"offset":1608}}},{"type":"text","value":"\n","position":{"start":{"line":35,"column":5,"offset":1608},"end":{"line":36,"column":1,"offset":1609}}},{"type":"raw","value":"<br>","position":{"start":{"line":36,"column":1,"offset":1609},"end":{"line":36,"column":5,"offset":1613}}},{"type":"text","value":"\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case ","position":{"start":{"line":36,"column":5,"offset":1613},"end":{"line":37,"column":184,"offset":1797}}},{"type":"raw","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":37,"column":184,"offset":1797},"end":{"line":37,"column":187,"offset":1800}}},{"type":"text","value":".\n","position":{"start":{"line":37,"column":187,"offset":1800},"end":{"line":38,"column":1,"offset":1803}}},{"type":"raw","value":"<br>","position":{"start":{"line":38,"column":1,"offset":1803},"end":{"line":38,"column":5,"offset":1807}}},{"type":"text","value":"\n","position":{"start":{"line":38,"column":5,"offset":1807},"end":{"line":39,"column":1,"offset":1808}}},{"type":"raw","value":"<br>","position":{"start":{"line":39,"column":1,"offset":1808},"end":{"line":39,"column":5,"offset":1812}}},{"type":"text","value":"\nThe second parameter that ","position":{"start":{"line":39,"column":5,"offset":1812},"end":{"line":40,"column":27,"offset":1839}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":40,"column":27,"offset":1839},"end":{"line":40,"column":35,"offset":1847}}},{"type":"text","value":" takes in is the body that the procedure will call ","position":{"start":{"line":40,"column":35,"offset":1847},"end":{"line":40,"column":86,"offset":1898}}},{"type":"raw","value":"<code class=\"language-text\">(* x x)</code>","position":{"start":{"line":40,"column":86,"offset":1898},"end":{"line":40,"column":95,"offset":1907}}},{"type":"text","value":". ","position":{"start":{"line":40,"column":95,"offset":1907},"end":{"line":40,"column":97,"offset":1909}}}],"position":{"start":{"line":34,"column":1,"offset":1501},"end":{"line":40,"column":97,"offset":1909}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br> ","position":{"start":{"line":42,"column":1,"offset":1911},"end":{"line":42,"column":6,"offset":1916}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define can also be used to store constants:\n","position":{"start":{"line":44,"column":1,"offset":1918},"end":{"line":45,"column":1,"offset":1962}}},{"type":"raw","value":"<br>","position":{"start":{"line":45,"column":1,"offset":1962},"end":{"line":45,"column":5,"offset":1966}}},{"type":"text","value":"\n","position":{"start":{"line":45,"column":5,"offset":1966},"end":{"line":46,"column":1,"offset":1967}}},{"type":"raw","value":"<code class=\"language-text\">(define pi 3.14159)</code>","position":{"start":{"line":46,"column":1,"offset":1967},"end":{"line":46,"column":22,"offset":1988}}},{"type":"text","value":"\n","position":{"start":{"line":46,"column":22,"offset":1988},"end":{"line":47,"column":1,"offset":1989}}},{"type":"raw","value":"<br>","position":{"start":{"line":47,"column":1,"offset":1989},"end":{"line":47,"column":5,"offset":1993}}}],"position":{"start":{"line":44,"column":1,"offset":1918},"end":{"line":47,"column":5,"offset":1993}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.","position":{"start":{"line":49,"column":1,"offset":1995},"end":{"line":49,"column":152,"offset":2146}}}],"position":{"start":{"line":49,"column":1,"offset":1995},"end":{"line":49,"column":152,"offset":2146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":51,"column":8,"offset":2155},"end":{"line":51,"column":20,"offset":2167}}}],"position":{"start":{"line":51,"column":1,"offset":2148},"end":{"line":51,"column":20,"offset":2167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the first example of a program we see in class:","position":{"start":{"line":53,"column":1,"offset":2169},"end":{"line":53,"column":56,"offset":2224}}}],"position":{"start":{"line":53,"column":1,"offset":2169},"end":{"line":53,"column":56,"offset":2224}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>","position":{"start":{"line":54,"column":1,"offset":2225},"end":{"line":59,"column":4,"offset":2316}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":60,"column":1,"offset":2317},"end":{"line":60,"column":5,"offset":2321}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you’ve probably already guessed, ","position":{"start":{"line":62,"column":1,"offset":2323},"end":{"line":62,"column":37,"offset":2359}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":62,"column":37,"offset":2359},"end":{"line":62,"column":41,"offset":2363}}},{"type":"text","value":" is a function.\n","position":{"start":{"line":62,"column":41,"offset":2363},"end":{"line":63,"column":1,"offset":2380}}},{"type":"raw","value":"<br>","position":{"start":{"line":63,"column":1,"offset":2380},"end":{"line":63,"column":5,"offset":2384}}},{"type":"text","value":"\n","position":{"start":{"line":63,"column":5,"offset":2384},"end":{"line":64,"column":1,"offset":2385}}},{"type":"raw","value":"<br>","position":{"start":{"line":64,"column":1,"offset":2385},"end":{"line":64,"column":5,"offset":2389}}},{"type":"text","value":"\nThe first parameter is the test case for example if we input fly ","position":{"start":{"line":64,"column":5,"offset":2389},"end":{"line":65,"column":66,"offset":2455}}},{"type":"raw","value":"<code class=\"language-text\">(equal? (last wd) &#39;y)</code>","position":{"start":{"line":65,"column":66,"offset":2455},"end":{"line":65,"column":89,"offset":2478}}},{"type":"text","value":" would be true, because fly ends in y.\n","position":{"start":{"line":65,"column":89,"offset":2478},"end":{"line":66,"column":1,"offset":2518}}},{"type":"raw","value":"<br>","position":{"start":{"line":66,"column":1,"offset":2518},"end":{"line":66,"column":5,"offset":2522}}},{"type":"text","value":"\n","position":{"start":{"line":66,"column":5,"offset":2522},"end":{"line":67,"column":1,"offset":2523}}},{"type":"raw","value":"<br>","position":{"start":{"line":67,"column":1,"offset":2523},"end":{"line":67,"column":5,"offset":2527}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":67,"column":5,"offset":2527},"end":{"line":68,"column":21,"offset":2548}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":68,"column":21,"offset":2548},"end":{"line":68,"column":25,"offset":2552}}},{"type":"text","value":" takes in is the expression if the test case is true.\n","position":{"start":{"line":68,"column":25,"offset":2552},"end":{"line":69,"column":1,"offset":2606}}},{"type":"raw","value":"<br>","position":{"start":{"line":69,"column":1,"offset":2606},"end":{"line":69,"column":5,"offset":2610}}},{"type":"text","value":"\n","position":{"start":{"line":69,"column":5,"offset":2610},"end":{"line":70,"column":1,"offset":2611}}},{"type":"raw","value":"<br>","position":{"start":{"line":70,"column":1,"offset":2611},"end":{"line":70,"column":5,"offset":2615}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":70,"column":5,"offset":2615},"end":{"line":71,"column":21,"offset":2636}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":71,"column":21,"offset":2636},"end":{"line":71,"column":25,"offset":2640}}},{"type":"text","value":" takes in is the expression if the test case is false.\n","position":{"start":{"line":71,"column":25,"offset":2640},"end":{"line":72,"column":1,"offset":2695}}},{"type":"raw","value":"<br>","position":{"start":{"line":72,"column":1,"offset":2695},"end":{"line":72,"column":5,"offset":2699}}},{"type":"text","value":"\n","position":{"start":{"line":72,"column":5,"offset":2699},"end":{"line":73,"column":1,"offset":2700}}},{"type":"raw","value":"<br>","position":{"start":{"line":73,"column":1,"offset":2700},"end":{"line":73,"column":5,"offset":2704}}},{"type":"text","value":"\nAlso worth noting that names that return a boolean add a ","position":{"start":{"line":73,"column":5,"offset":2704},"end":{"line":74,"column":58,"offset":2762}}},{"type":"raw","value":"<code class=\"language-text\">?</code>","position":{"start":{"line":74,"column":58,"offset":2762},"end":{"line":74,"column":61,"offset":2765}}},{"type":"text","value":" to the end to show that the primitive returned is true or false. Like how equal is ","position":{"start":{"line":74,"column":61,"offset":2765},"end":{"line":74,"column":145,"offset":2849}}},{"type":"raw","value":"<code class=\"language-text\">equal?</code>","position":{"start":{"line":74,"column":145,"offset":2849},"end":{"line":74,"column":153,"offset":2857}}},{"type":"text","value":" in the code block above.","position":{"start":{"line":74,"column":153,"offset":2857},"end":{"line":74,"column":178,"offset":2882}}}],"position":{"start":{"line":62,"column":1,"offset":2323},"end":{"line":74,"column":178,"offset":2882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L02","position":{"start":{"line":76,"column":7,"offset":2890},"end":{"line":76,"column":10,"offset":2893}}}],"position":{"start":{"line":76,"column":1,"offset":2884},"end":{"line":76,"column":10,"offset":2893}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Recursion","position":{"start":{"line":78,"column":8,"offset":2902},"end":{"line":78,"column":17,"offset":2911}}}],"position":{"start":{"line":78,"column":1,"offset":2895},"end":{"line":78,"column":17,"offset":2911}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":79,"column":1,"offset":2912},"end":{"line":90,"column":4,"offset":3111}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":91,"column":1,"offset":3112},"end":{"line":91,"column":5,"offset":3116}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n","position":{"start":{"line":93,"column":1,"offset":3118},"end":{"line":94,"column":1,"offset":3334}}},{"type":"raw","value":"<br>","position":{"start":{"line":94,"column":1,"offset":3334},"end":{"line":94,"column":5,"offset":3338}}},{"type":"text","value":"\n","position":{"start":{"line":94,"column":5,"offset":3338},"end":{"line":95,"column":1,"offset":3339}}},{"type":"raw","value":"<br>","position":{"start":{"line":95,"column":1,"offset":3339},"end":{"line":95,"column":5,"offset":3343}}},{"type":"text","value":"\nNotice in the above example from lecture the function calls pigl until ","position":{"start":{"line":95,"column":5,"offset":3343},"end":{"line":96,"column":72,"offset":3415}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":96,"column":72,"offset":3415},"end":{"line":96,"column":81,"offset":3424}}},{"type":"text","value":" is equal to true.\n","position":{"start":{"line":96,"column":81,"offset":3424},"end":{"line":97,"column":1,"offset":3443}}},{"type":"raw","value":"<br>","position":{"start":{"line":97,"column":1,"offset":3443},"end":{"line":97,"column":5,"offset":3447}}},{"type":"text","value":"\n","position":{"start":{"line":97,"column":5,"offset":3447},"end":{"line":98,"column":1,"offset":3448}}},{"type":"raw","value":"<br>","position":{"start":{"line":98,"column":1,"offset":3448},"end":{"line":98,"column":5,"offset":3452}}},{"type":"text","value":"\nLets say ","position":{"start":{"line":98,"column":5,"offset":3452},"end":{"line":99,"column":10,"offset":3462}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":99,"column":10,"offset":3462},"end":{"line":99,"column":16,"offset":3468}}},{"type":"text","value":" gets called with ","position":{"start":{"line":99,"column":16,"offset":3468},"end":{"line":99,"column":34,"offset":3486}}},{"type":"raw","value":"<code class=\"language-text\">scheme</code>","position":{"start":{"line":99,"column":34,"offset":3486},"end":{"line":99,"column":42,"offset":3494}}},{"type":"text","value":".\nThe conditional checks ","position":{"start":{"line":99,"column":42,"offset":3494},"end":{"line":100,"column":24,"offset":3519}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":100,"column":24,"offset":3519},"end":{"line":100,"column":33,"offset":3528}}},{"type":"text","value":" which checks the first letter in the word to see if it is a vowel. Since ","position":{"start":{"line":100,"column":33,"offset":3528},"end":{"line":100,"column":107,"offset":3602}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":100,"column":107,"offset":3602},"end":{"line":100,"column":116,"offset":3611}}},{"type":"text","value":" is false because ","position":{"start":{"line":100,"column":116,"offset":3611},"end":{"line":100,"column":134,"offset":3629}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":100,"column":134,"offset":3629},"end":{"line":100,"column":137,"offset":3632}}},{"type":"text","value":" isn’t a vowel it calls ","position":{"start":{"line":100,"column":137,"offset":3632},"end":{"line":100,"column":161,"offset":3656}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":100,"column":161,"offset":3656},"end":{"line":100,"column":167,"offset":3662}}},{"type":"text","value":" again with the argument ","position":{"start":{"line":100,"column":167,"offset":3662},"end":{"line":100,"column":192,"offset":3687}}},{"type":"raw","value":"<code class=\"language-text\">chemes</code>","position":{"start":{"line":100,"column":192,"offset":3687},"end":{"line":100,"column":200,"offset":3695}}},{"type":"text","value":". This is because ","position":{"start":{"line":100,"column":200,"offset":3695},"end":{"line":100,"column":218,"offset":3713}}},{"type":"raw","value":"<code class=\"language-text\">word</code>","position":{"start":{"line":100,"column":218,"offset":3713},"end":{"line":100,"column":224,"offset":3719}}},{"type":"text","value":" takes the arguments ","position":{"start":{"line":100,"column":224,"offset":3719},"end":{"line":100,"column":245,"offset":3740}}},{"type":"raw","value":"<code class=\"language-text\">cheme</code>","position":{"start":{"line":100,"column":245,"offset":3740},"end":{"line":100,"column":252,"offset":3747}}},{"type":"text","value":" and ","position":{"start":{"line":100,"column":252,"offset":3747},"end":{"line":100,"column":257,"offset":3752}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":100,"column":257,"offset":3752},"end":{"line":100,"column":260,"offset":3755}}},{"type":"text","value":" and adds them together. ","position":{"start":{"line":100,"column":260,"offset":3755},"end":{"line":100,"column":285,"offset":3780}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":100,"column":285,"offset":3780},"end":{"line":100,"column":291,"offset":3786}}},{"type":"text","value":" gets called repeatedly until\nit is called with a vowel as the first letter. When the first letter is a vowel the expression ","position":{"start":{"line":100,"column":291,"offset":3786},"end":{"line":101,"column":96,"offset":3912}}},{"type":"raw","value":"<code class=\"language-text\">(word wd &#39;ay)</code>","position":{"start":{"line":101,"column":96,"offset":3912},"end":{"line":101,"column":111,"offset":3927}}},{"type":"text","value":" is ran and the result is a primitive which means the procedure stops. ","position":{"start":{"line":101,"column":111,"offset":3927},"end":{"line":101,"column":182,"offset":3998}}}],"position":{"start":{"line":93,"column":1,"offset":3118},"end":{"line":101,"column":182,"offset":3998}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":103,"column":8,"offset":4007},"end":{"line":103,"column":19,"offset":4018}}}],"position":{"start":{"line":103,"column":1,"offset":4000},"end":{"line":103,"column":19,"offset":4018}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Big Picture: ","position":{"start":{"line":104,"column":1,"offset":4019},"end":{"line":104,"column":14,"offset":4032}}}],"position":{"start":{"line":104,"column":1,"offset":4019},"end":{"line":104,"column":14,"offset":4032}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>","position":{"start":{"line":105,"column":1,"offset":4033},"end":{"line":120,"column":4,"offset":4448}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":121,"column":1,"offset":4449},"end":{"line":121,"column":5,"offset":4453}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that can be referenced as a whole.","position":{"start":{"line":123,"column":1,"offset":4455},"end":{"line":123,"column":141,"offset":4595}}}],"position":{"start":{"line":123,"column":1,"offset":4455},"end":{"line":123,"column":141,"offset":4595}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Functional Programming","position":{"start":{"line":125,"column":8,"offset":4604},"end":{"line":125,"column":30,"offset":4626}}}],"position":{"start":{"line":125,"column":1,"offset":4597},"end":{"line":125,"column":30,"offset":4626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the introduction of multi-core processers, parallelism has helped functional programming make a comeback. If everything is a function you won’t run into race conditions created by dependencies.","position":{"start":{"line":126,"column":1,"offset":4627},"end":{"line":126,"column":199,"offset":4825}}}],"position":{"start":{"line":126,"column":1,"offset":4627},"end":{"line":126,"column":199,"offset":4825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Function vs. Procedure","position":{"start":{"line":128,"column":8,"offset":4834},"end":{"line":128,"column":30,"offset":4856}}}],"position":{"start":{"line":128,"column":1,"offset":4827},"end":{"line":128,"column":30,"offset":4856}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Two functions are the same if they give the same output with given inputs.\n","position":{"start":{"line":130,"column":1,"offset":4858},"end":{"line":131,"column":1,"offset":4933}}},{"type":"raw","value":"<br>","position":{"start":{"line":131,"column":1,"offset":4933},"end":{"line":131,"column":5,"offset":4937}}},{"type":"text","value":"\n","position":{"start":{"line":131,"column":5,"offset":4937},"end":{"line":132,"column":1,"offset":4938}}},{"type":"raw","value":"<br>","position":{"start":{"line":132,"column":1,"offset":4938},"end":{"line":132,"column":5,"offset":4942}}},{"type":"text","value":"\nA procedure is a sequence of steps for computing a function.\n","position":{"start":{"line":132,"column":5,"offset":4942},"end":{"line":134,"column":1,"offset":5004}}},{"type":"raw","value":"<br>","position":{"start":{"line":134,"column":1,"offset":5004},"end":{"line":134,"column":5,"offset":5008}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":134,"column":5,"offset":5008},"end":{"line":135,"column":1,"offset":5011}}},{"type":"text","value":"\n"},{"type":"text","value":"Therefore ","position":{"start":{"line":135,"column":1,"offset":5011},"end":{"line":135,"column":11,"offset":5021}}},{"type":"raw","value":"<code class=\"language-text\">2x + 6</code>","position":{"start":{"line":135,"column":11,"offset":5021},"end":{"line":135,"column":19,"offset":5029}}},{"type":"text","value":" and ","position":{"start":{"line":135,"column":19,"offset":5029},"end":{"line":135,"column":24,"offset":5034}}},{"type":"raw","value":"<code class=\"language-text\">2(x + 3)</code>","position":{"start":{"line":135,"column":24,"offset":5034},"end":{"line":135,"column":34,"offset":5044}}},{"type":"text","value":" are the same function but different procedures.\n","position":{"start":{"line":135,"column":34,"offset":5044},"end":{"line":136,"column":1,"offset":5093}}},{"type":"raw","value":"<br>","position":{"start":{"line":136,"column":1,"offset":5093},"end":{"line":136,"column":5,"offset":5097}}}],"position":{"start":{"line":130,"column":1,"offset":4858},"end":{"line":136,"column":5,"offset":5097}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Cond","position":{"start":{"line":138,"column":8,"offset":5106},"end":{"line":138,"column":12,"offset":5110}}}],"position":{"start":{"line":138,"column":1,"offset":5099},"end":{"line":138,"column":12,"offset":5110}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (buzz n) \n    (cond ((equal? (remainder n 7) 0) &#39;buzz)\n    ((member? 7 n) &#39;buzz)\n    (else n)))</code></pre></div>","position":{"start":{"line":139,"column":1,"offset":5111},"end":{"line":144,"column":4,"offset":5222}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":145,"column":1,"offset":5223},"end":{"line":146,"column":5,"offset":5232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":148,"column":1,"offset":5234},"end":{"line":148,"column":7,"offset":5240}}},{"type":"text","value":" allows for multiple test cases, and will return\nthe first clause that is true.\n","position":{"start":{"line":148,"column":7,"offset":5240},"end":{"line":150,"column":1,"offset":5322}}},{"type":"raw","value":"<br>","position":{"start":{"line":150,"column":1,"offset":5322},"end":{"line":150,"column":5,"offset":5326}}},{"type":"text","value":"\n","position":{"start":{"line":150,"column":5,"offset":5326},"end":{"line":151,"column":1,"offset":5327}}},{"type":"raw","value":"<br>","position":{"start":{"line":151,"column":1,"offset":5327},"end":{"line":151,"column":5,"offset":5331}}},{"type":"text","value":"\nLets try ","position":{"start":{"line":151,"column":5,"offset":5331},"end":{"line":152,"column":10,"offset":5341}}},{"type":"raw","value":"<code class=\"language-text\">14</code>","position":{"start":{"line":152,"column":10,"offset":5341},"end":{"line":152,"column":14,"offset":5345}}},{"type":"text","value":". Since ","position":{"start":{"line":152,"column":14,"offset":5345},"end":{"line":152,"column":22,"offset":5353}}},{"type":"raw","value":"<code class=\"language-text\">14 / 7</code>","position":{"start":{"line":152,"column":22,"offset":5353},"end":{"line":152,"column":30,"offset":5361}}},{"type":"text","value":" has a remainder of ","position":{"start":{"line":152,"column":30,"offset":5361},"end":{"line":152,"column":50,"offset":5381}}},{"type":"raw","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":152,"column":50,"offset":5381},"end":{"line":152,"column":53,"offset":5384}}},{"type":"text","value":" the first clause is met and returns ","position":{"start":{"line":152,"column":53,"offset":5384},"end":{"line":152,"column":90,"offset":5421}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":152,"column":90,"offset":5421},"end":{"line":152,"column":96,"offset":5427}}},{"type":"text","value":".\n","position":{"start":{"line":152,"column":96,"offset":5427},"end":{"line":153,"column":1,"offset":5430}}},{"type":"raw","value":"<br>","position":{"start":{"line":153,"column":1,"offset":5430},"end":{"line":153,"column":5,"offset":5434}}},{"type":"text","value":"\n","position":{"start":{"line":153,"column":5,"offset":5434},"end":{"line":154,"column":1,"offset":5435}}},{"type":"raw","value":"<br>","position":{"start":{"line":154,"column":1,"offset":5435},"end":{"line":154,"column":5,"offset":5439}}},{"type":"text","value":"\nNow Lets try ","position":{"start":{"line":154,"column":5,"offset":5439},"end":{"line":155,"column":14,"offset":5453}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":155,"column":14,"offset":5453},"end":{"line":155,"column":18,"offset":5457}}},{"type":"text","value":". The first clause is not met, and therefore goes onto the next clause. ","position":{"start":{"line":155,"column":18,"offset":5457},"end":{"line":155,"column":90,"offset":5529}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":155,"column":90,"offset":5529},"end":{"line":155,"column":94,"offset":5533}}},{"type":"text","value":" does have a 7 inside of it so ","position":{"start":{"line":155,"column":94,"offset":5533},"end":{"line":155,"column":125,"offset":5564}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":155,"column":125,"offset":5564},"end":{"line":155,"column":131,"offset":5570}}},{"type":"text","value":" is returned.\n","position":{"start":{"line":155,"column":131,"offset":5570},"end":{"line":156,"column":1,"offset":5585}}},{"type":"raw","value":"<br>","position":{"start":{"line":156,"column":1,"offset":5585},"end":{"line":156,"column":5,"offset":5589}}},{"type":"text","value":"\n","position":{"start":{"line":156,"column":5,"offset":5589},"end":{"line":157,"column":1,"offset":5590}}},{"type":"raw","value":"<br>","position":{"start":{"line":157,"column":1,"offset":5590},"end":{"line":157,"column":5,"offset":5594}}},{"type":"text","value":"\nNow lets try ","position":{"start":{"line":157,"column":5,"offset":5594},"end":{"line":158,"column":14,"offset":5608}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":158,"column":14,"offset":5608},"end":{"line":158,"column":18,"offset":5612}}},{"type":"text","value":". The remainder is ","position":{"start":{"line":158,"column":18,"offset":5612},"end":{"line":158,"column":37,"offset":5631}}},{"type":"raw","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":158,"column":37,"offset":5631},"end":{"line":158,"column":40,"offset":5634}}},{"type":"text","value":" so the first clause is not met, and ","position":{"start":{"line":158,"column":40,"offset":5634},"end":{"line":158,"column":77,"offset":5671}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":158,"column":77,"offset":5671},"end":{"line":158,"column":81,"offset":5675}}},{"type":"text","value":"  does not have a ","position":{"start":{"line":158,"column":81,"offset":5675},"end":{"line":158,"column":99,"offset":5693}}},{"type":"raw","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":158,"column":99,"offset":5693},"end":{"line":158,"column":102,"offset":5696}}},{"type":"text","value":" inside of it so the catch all ","position":{"start":{"line":158,"column":102,"offset":5696},"end":{"line":158,"column":133,"offset":5727}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":158,"column":133,"offset":5727},"end":{"line":158,"column":139,"offset":5733}}},{"type":"text","value":" keyword returns the number ","position":{"start":{"line":158,"column":139,"offset":5733},"end":{"line":158,"column":167,"offset":5761}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":158,"column":167,"offset":5761},"end":{"line":158,"column":171,"offset":5765}}},{"type":"text","value":".\n","position":{"start":{"line":158,"column":171,"offset":5765},"end":{"line":159,"column":1,"offset":5767}}},{"type":"raw","value":"<br>","position":{"start":{"line":159,"column":1,"offset":5767},"end":{"line":159,"column":5,"offset":5771}}},{"type":"text","value":"\n","position":{"start":{"line":159,"column":5,"offset":5771},"end":{"line":160,"column":1,"offset":5772}}},{"type":"raw","value":"<br>","position":{"start":{"line":160,"column":1,"offset":5772},"end":{"line":160,"column":5,"offset":5776}}},{"type":"text","value":"\nImportant to note:\n","position":{"start":{"line":160,"column":5,"offset":5776},"end":{"line":162,"column":1,"offset":5796}}},{"type":"raw","value":"<br>","position":{"start":{"line":162,"column":1,"offset":5796},"end":{"line":162,"column":5,"offset":5800}}},{"type":"text","value":"\nIf a ","position":{"start":{"line":162,"column":5,"offset":5800},"end":{"line":163,"column":6,"offset":5806}}},{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":163,"column":6,"offset":5806},"end":{"line":163,"column":12,"offset":5812}}},{"type":"text","value":" does not have an ","position":{"start":{"line":163,"column":12,"offset":5812},"end":{"line":163,"column":30,"offset":5830}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":163,"column":30,"offset":5830},"end":{"line":163,"column":36,"offset":5836}}},{"type":"text","value":" statement it will return ","position":{"start":{"line":163,"column":36,"offset":5836},"end":{"line":163,"column":62,"offset":5862}}},{"type":"raw","value":"<code class=\"language-text\">unspecified</code>","position":{"start":{"line":163,"column":62,"offset":5862},"end":{"line":163,"column":75,"offset":5875}}},{"type":"text","value":", which can be different depending on interpreted, so always have an else statement.","position":{"start":{"line":163,"column":75,"offset":5875},"end":{"line":163,"column":159,"offset":5959}}}],"position":{"start":{"line":148,"column":1,"offset":5234},"end":{"line":163,"column":159,"offset":5959}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Applicative Order vs Normal Order","position":{"start":{"line":165,"column":8,"offset":5968},"end":{"line":165,"column":41,"offset":6001}}}],"position":{"start":{"line":165,"column":1,"offset":5961},"end":{"line":165,"column":41,"offset":6001}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (f a b) (+ (g a) b))\n(def (g x) (* 3 x))\n\n(f (+ 2 3) (- 15 6))</code></pre></div>","position":{"start":{"line":166,"column":1,"offset":6002},"end":{"line":171,"column":4,"offset":6077}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Applicative Order:\n","position":{"start":{"line":172,"column":1,"offset":6078},"end":{"line":173,"column":1,"offset":6097}}},{"type":"raw","value":"<br>","position":{"start":{"line":173,"column":1,"offset":6097},"end":{"line":173,"column":5,"offset":6101}}},{"type":"text","value":"\nevaluates the sub expressions until they are primitive values, then passes the primitive results back up to the parent function.\n","position":{"start":{"line":173,"column":5,"offset":6101},"end":{"line":175,"column":5,"offset":6239}}},{"type":"raw","value":"<br>","position":{"start":{"line":175,"column":5,"offset":6239},"end":{"line":175,"column":9,"offset":6243}}},{"type":"text","value":"\n","position":{"start":{"line":175,"column":9,"offset":6243},"end":{"line":176,"column":5,"offset":6248}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":176,"column":5,"offset":6248},"end":{"line":176,"column":27,"offset":6270}}},{"type":"text","value":"\n","position":{"start":{"line":176,"column":27,"offset":6270},"end":{"line":177,"column":5,"offset":6275}}},{"type":"raw","value":"<br>","position":{"start":{"line":177,"column":5,"offset":6275},"end":{"line":177,"column":9,"offset":6279}}},{"type":"text","value":"\n","position":{"start":{"line":177,"column":9,"offset":6279},"end":{"line":178,"column":5,"offset":6284}}},{"type":"raw","value":"<code class=\"language-text\">2 + 3</code>","position":{"start":{"line":178,"column":5,"offset":6284},"end":{"line":178,"column":12,"offset":6291}}},{"type":"text","value":" and ","position":{"start":{"line":178,"column":12,"offset":6291},"end":{"line":178,"column":17,"offset":6296}}},{"type":"raw","value":"<code class=\"language-text\">15 - 6</code>","position":{"start":{"line":178,"column":17,"offset":6296},"end":{"line":178,"column":25,"offset":6304}}},{"type":"text","value":" will be evaluated before the outside ","position":{"start":{"line":178,"column":25,"offset":6304},"end":{"line":178,"column":63,"offset":6342}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":178,"column":63,"offset":6342},"end":{"line":178,"column":66,"offset":6345}}},{"type":"text","value":" is evaluated. Then ","position":{"start":{"line":178,"column":66,"offset":6345},"end":{"line":178,"column":86,"offset":6365}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":178,"column":86,"offset":6365},"end":{"line":178,"column":89,"offset":6368}}},{"type":"text","value":" will be called with ","position":{"start":{"line":178,"column":89,"offset":6368},"end":{"line":178,"column":110,"offset":6389}}},{"type":"raw","value":"<code class=\"language-text\">(f 5 9)</code>","position":{"start":{"line":178,"column":110,"offset":6389},"end":{"line":178,"column":119,"offset":6398}}},{"type":"text","value":".\n","position":{"start":{"line":178,"column":119,"offset":6398},"end":{"line":179,"column":1,"offset":6400}}},{"type":"raw","value":"<br>","position":{"start":{"line":179,"column":1,"offset":6400},"end":{"line":179,"column":5,"offset":6404}}},{"type":"text","value":"\nNormal Order:\n","position":{"start":{"line":179,"column":5,"offset":6404},"end":{"line":181,"column":1,"offset":6420}}},{"type":"raw","value":"<br>","position":{"start":{"line":181,"column":1,"offset":6420},"end":{"line":181,"column":5,"offset":6424}}},{"type":"text","value":"\nevaluates the outsides first, but instead of passing primitive values it passes the expressions.\n","position":{"start":{"line":181,"column":5,"offset":6424},"end":{"line":183,"column":5,"offset":6531}}},{"type":"raw","value":"<br>","position":{"start":{"line":183,"column":5,"offset":6531},"end":{"line":183,"column":9,"offset":6535}}},{"type":"text","value":"\n","position":{"start":{"line":183,"column":9,"offset":6535},"end":{"line":184,"column":1,"offset":6536}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":184,"column":1,"offset":6536},"end":{"line":184,"column":23,"offset":6558}}},{"type":"text","value":" turns into ","position":{"start":{"line":184,"column":23,"offset":6558},"end":{"line":184,"column":35,"offset":6570}}},{"type":"raw","value":"<code class=\"language-text\">(+ (g (+ 2 3)) (- 15 6))</code>","position":{"start":{"line":184,"column":35,"offset":6570},"end":{"line":184,"column":61,"offset":6596}}},{"type":"text","value":"\n","position":{"start":{"line":184,"column":61,"offset":6596},"end":{"line":185,"column":1,"offset":6597}}},{"type":"raw","value":"<br>","position":{"start":{"line":185,"column":1,"offset":6597},"end":{"line":185,"column":5,"offset":6601}}},{"type":"text","value":"\nNow ","position":{"start":{"line":185,"column":5,"offset":6601},"end":{"line":186,"column":5,"offset":6606}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":186,"column":5,"offset":6606},"end":{"line":186,"column":8,"offset":6609}}},{"type":"text","value":" is done and the next expression can be evaluated.","position":{"start":{"line":186,"column":8,"offset":6609},"end":{"line":186,"column":58,"offset":6659}}}],"position":{"start":{"line":172,"column":1,"offset":6078},"end":{"line":186,"column":58,"offset":6659}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Possible Problem:\n","position":{"start":{"line":188,"column":1,"offset":6661},"end":{"line":189,"column":1,"offset":6679}}},{"type":"raw","value":"<br>","position":{"start":{"line":189,"column":1,"offset":6679},"end":{"line":189,"column":5,"offset":6683}}}],"position":{"start":{"line":188,"column":1,"offset":6661},"end":{"line":189,"column":5,"offset":6683}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (zero z) (- x x))</code></pre></div>","position":{"start":{"line":190,"column":1,"offset":6684},"end":{"line":192,"column":4,"offset":6714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"applicative ","position":{"start":{"line":193,"column":1,"offset":6715},"end":{"line":193,"column":13,"offset":6727}}}],"position":{"start":{"line":193,"column":1,"offset":6715},"end":{"line":193,"column":13,"offset":6727}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(random 10) ==&gt; 8\n(zero 8) ---&gt;\n(- 8 8) ==&gt; 0\n0</code></pre></div>","position":{"start":{"line":194,"column":1,"offset":6728},"end":{"line":200,"column":4,"offset":6807}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"normal ","position":{"start":{"line":201,"column":1,"offset":6808},"end":{"line":201,"column":8,"offset":6815}}}],"position":{"start":{"line":201,"column":1,"offset":6808},"end":{"line":201,"column":8,"offset":6815}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(+ (random 10) (random 10)) ==&gt; \n    (random 10) ==&gt; 8\n    (random 10) ==&gt; 1\n(- 8 1) ==&gt; 7\n7</code></pre></div>","position":{"start":{"line":202,"column":1,"offset":6816},"end":{"line":209,"column":4,"offset":6940}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":210,"column":1,"offset":6941},"end":{"line":211,"column":5,"offset":6950}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the ","position":{"start":{"line":213,"column":1,"offset":6952},"end":{"line":213,"column":11,"offset":6962}}},{"type":"raw","value":"<code class=\"language-text\">(random 10)</code>","position":{"start":{"line":213,"column":11,"offset":6962},"end":{"line":213,"column":24,"offset":6975}}},{"type":"text","value":" is split into 2 different function alls in normal order you get different results.","position":{"start":{"line":213,"column":24,"offset":6975},"end":{"line":213,"column":107,"offset":7058}}}],"position":{"start":{"line":213,"column":1,"offset":6952},"end":{"line":213,"column":107,"offset":7058}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L03","position":{"start":{"line":215,"column":7,"offset":7066},"end":{"line":215,"column":10,"offset":7069}}}],"position":{"start":{"line":215,"column":1,"offset":7060},"end":{"line":215,"column":10,"offset":7069}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Data vs Procedures","position":{"start":{"line":216,"column":8,"offset":7077},"end":{"line":216,"column":26,"offset":7095}}}],"position":{"start":{"line":216,"column":1,"offset":7070},"end":{"line":216,"column":26,"offset":7095}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Data is like a noun. Procedures are like verbs.\n","position":{"start":{"line":217,"column":1,"offset":7096},"end":{"line":218,"column":1,"offset":7144}}},{"type":"raw","value":"<br>","position":{"start":{"line":218,"column":1,"offset":7144},"end":{"line":218,"column":5,"offset":7148}}},{"type":"text","value":"\n","position":{"start":{"line":218,"column":5,"offset":7148},"end":{"line":219,"column":1,"offset":7149}}},{"type":"raw","value":"<br>","position":{"start":{"line":219,"column":1,"offset":7149},"end":{"line":219,"column":5,"offset":7153}}},{"type":"text","value":"\nCapitalization does not matter in scheme.\nAble to take in functions as arguments.\n","position":{"start":{"line":219,"column":5,"offset":7153},"end":{"line":222,"column":1,"offset":7236}}},{"type":"raw","value":"<code class=\"language-text\">se</code>","position":{"start":{"line":222,"column":1,"offset":7236},"end":{"line":222,"column":5,"offset":7240}}},{"type":"text","value":" is the function for creating sentences. ","position":{"start":{"line":222,"column":5,"offset":7240},"end":{"line":222,"column":46,"offset":7281}}}],"position":{"start":{"line":217,"column":1,"offset":7096},"end":{"line":222,"column":46,"offset":7281}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Lambda","position":{"start":{"line":224,"column":8,"offset":7290},"end":{"line":224,"column":14,"offset":7296}}}],"position":{"start":{"line":224,"column":1,"offset":7283},"end":{"line":224,"column":14,"offset":7296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The thing that makes a function.\nA thing that creates and can call a function without having to be named.\n","position":{"start":{"line":226,"column":1,"offset":7298},"end":{"line":228,"column":1,"offset":7404}}},{"type":"raw","value":"<br>","position":{"start":{"line":228,"column":1,"offset":7404},"end":{"line":228,"column":5,"offset":7408}}},{"type":"text","value":"\n","position":{"start":{"line":228,"column":5,"offset":7408},"end":{"line":229,"column":1,"offset":7409}}},{"type":"raw","value":"<br>","position":{"start":{"line":229,"column":1,"offset":7409},"end":{"line":229,"column":5,"offset":7413}}},{"type":"text","value":"\nPRED: short for predicate, predicate is a function whose range is a boolean (true or false).\nEvery procedure has a lambda hidden inside of it.","position":{"start":{"line":229,"column":5,"offset":7413},"end":{"line":231,"column":50,"offset":7556}}}],"position":{"start":{"line":226,"column":1,"offset":7298},"end":{"line":231,"column":50,"offset":7556}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L04","position":{"start":{"line":233,"column":7,"offset":7564},"end":{"line":233,"column":10,"offset":7567}}}],"position":{"start":{"line":233,"column":1,"offset":7558},"end":{"line":233,"column":10,"offset":7567}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using lambdas for control using procedures as data.\nKeep decides whether to keep data or not.","position":{"start":{"line":235,"column":1,"offset":7569},"end":{"line":236,"column":42,"offset":7662}}}],"position":{"start":{"line":235,"column":1,"offset":7569},"end":{"line":236,"column":42,"offset":7662}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"first class datatype","position":{"start":{"line":238,"column":7,"offset":7670},"end":{"line":238,"column":27,"offset":7690}}}],"position":{"start":{"line":238,"column":1,"offset":7664},"end":{"line":238,"column":27,"offset":7690}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Rule of Thumb:\n","position":{"start":{"line":240,"column":1,"offset":7692},"end":{"line":241,"column":1,"offset":7708}}},{"type":"raw","value":"<br>","position":{"start":{"line":241,"column":1,"offset":7708},"end":{"line":241,"column":5,"offset":7712}}},{"type":"text","value":"\nThey can be stored as a variable.\n","position":{"start":{"line":241,"column":5,"offset":7712},"end":{"line":243,"column":1,"offset":7747}}},{"type":"raw","value":"<br>","position":{"start":{"line":243,"column":1,"offset":7747},"end":{"line":243,"column":5,"offset":7751}}},{"type":"text","value":"\nThey can be stored inside a data type like a list.\n","position":{"start":{"line":243,"column":5,"offset":7751},"end":{"line":245,"column":1,"offset":7803}}},{"type":"raw","value":"<br>","position":{"start":{"line":245,"column":1,"offset":7803},"end":{"line":245,"column":5,"offset":7807}}},{"type":"text","value":"\nYou can return function  to make other functions.\n","position":{"start":{"line":245,"column":5,"offset":7807},"end":{"line":247,"column":1,"offset":7858}}},{"type":"raw","value":"<br>","position":{"start":{"line":247,"column":1,"offset":7858},"end":{"line":247,"column":5,"offset":7862}}},{"type":"text","value":"\n","position":{"start":{"line":247,"column":5,"offset":7862},"end":{"line":248,"column":1,"offset":7863}}},{"type":"raw","value":"<code class=\"language-text\">(let bindings body)</code>","position":{"start":{"line":248,"column":1,"offset":7863},"end":{"line":248,"column":22,"offset":7884}}},{"type":"text","value":"\nBinding is a name: value expression.","position":{"start":{"line":248,"column":22,"offset":7884},"end":{"line":249,"column":37,"offset":7921}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":249,"column":37,"offset":7921},"end":{"line":250,"column":1,"offset":7924}}},{"type":"text","value":"\n"},{"type":"text","value":"Bindings can’t reference eachother during declaration because of applicative order.\n","position":{"start":{"line":250,"column":1,"offset":7924},"end":{"line":251,"column":1,"offset":8008}}},{"type":"raw","value":"<br>","position":{"start":{"line":251,"column":1,"offset":8008},"end":{"line":251,"column":5,"offset":8012}}},{"type":"text","value":"\n","position":{"start":{"line":251,"column":5,"offset":8012},"end":{"line":252,"column":1,"offset":8013}}},{"type":"raw","value":"<code class=\"language-text\">let*</code>","position":{"start":{"line":252,"column":1,"offset":8013},"end":{"line":252,"column":7,"offset":8019}}},{"type":"text","value":" allows you to reference other bindings during declaration by nesting the ","position":{"start":{"line":252,"column":7,"offset":8019},"end":{"line":252,"column":81,"offset":8093}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":252,"column":81,"offset":8093},"end":{"line":252,"column":86,"offset":8098}}},{"type":"text","value":"s.\n","position":{"start":{"line":252,"column":86,"offset":8098},"end":{"line":253,"column":1,"offset":8101}}},{"type":"raw","value":"<br>","position":{"start":{"line":253,"column":1,"offset":8101},"end":{"line":253,"column":5,"offset":8105}}},{"type":"text","value":"\nWant to keep as many variables local as possible.","position":{"start":{"line":253,"column":5,"offset":8105},"end":{"line":254,"column":50,"offset":8155}}}],"position":{"start":{"line":240,"column":1,"offset":7692},"end":{"line":254,"column":50,"offset":8155}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LABS","position":{"start":{"line":256,"column":6,"offset":8162},"end":{"line":256,"column":10,"offset":8166}}}],"position":{"start":{"line":256,"column":1,"offset":8157},"end":{"line":256,"column":10,"offset":8166}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1A","position":{"start":{"line":257,"column":7,"offset":8173},"end":{"line":257,"column":13,"offset":8179}}}],"position":{"start":{"line":257,"column":1,"offset":8167},"end":{"line":257,"column":13,"offset":8179}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first problem for the lab was to modify the ","position":{"start":{"line":258,"column":1,"offset":8180},"end":{"line":258,"column":49,"offset":8228}}},{"type":"raw","value":"<code class=\"language-text\">plural</code>","position":{"start":{"line":258,"column":49,"offset":8228},"end":{"line":258,"column":57,"offset":8236}}},{"type":"text","value":" program to handle a word ending in y, but has a vowel in front of it (boy).","position":{"start":{"line":258,"column":57,"offset":8236},"end":{"line":258,"column":133,"offset":8312}}}],"position":{"start":{"line":258,"column":1,"offset":8180},"end":{"line":258,"column":133,"offset":8312}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t\t(if (vowel? (last (bl wd)))\n\t\t(word wd &#39;s)\n\t\t(word (bl wd) &#39;ies))\n\t(word wd &#39;s)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":259,"column":1,"offset":8313},"end":{"line":269,"column":4,"offset":8508}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":270,"column":1,"offset":8509},"end":{"line":270,"column":5,"offset":8513}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I handled this by adding a conditional that checks for the second to last letter.\n","position":{"start":{"line":273,"column":1,"offset":8516},"end":{"line":274,"column":1,"offset":8598}}},{"type":"raw","value":"<br>","position":{"start":{"line":274,"column":1,"offset":8598},"end":{"line":274,"column":5,"offset":8602}}},{"type":"text","value":"\n","position":{"start":{"line":274,"column":5,"offset":8602},"end":{"line":275,"column":1,"offset":8603}}},{"type":"raw","value":"<br>","position":{"start":{"line":275,"column":1,"offset":8603},"end":{"line":275,"column":5,"offset":8607}}},{"type":"text","value":"\nThe second assgnment was:","position":{"start":{"line":275,"column":5,"offset":8607},"end":{"line":276,"column":26,"offset":8633}}}],"position":{"start":{"line":273,"column":1,"offset":8516},"end":{"line":276,"column":26,"offset":8633}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Define a procedure that takes three numbers as arguments and returns the sum of\nthe squares of the two larger numbers.</code></pre></div>","position":{"start":{"line":277,"column":1,"offset":8634},"end":{"line":280,"column":4,"offset":8760}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My Solution: ","position":{"start":{"line":282,"column":1,"offset":8762},"end":{"line":282,"column":14,"offset":8775}}}],"position":{"start":{"line":282,"column":1,"offset":8762},"end":{"line":282,"column":14,"offset":8775}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (twoLargerSums a b c)\n    (if (&gt;= a b)\n        (if (&gt;= b c)\n            (+ (square a) (square b))\n            (+ (square a) (square c)))\n        (if (&gt;= a c)\n            (+ (square a) (square b))\n            (+ (square b) (square c))))\n)\n\n(define (square x)\n(* x x))</code></pre></div>","position":{"start":{"line":284,"column":1,"offset":8777},"end":{"line":297,"column":4,"offset":9059}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":299,"column":1,"offset":9061},"end":{"line":300,"column":5,"offset":9070}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1B","position":{"start":{"line":302,"column":7,"offset":9078},"end":{"line":302,"column":13,"offset":9084}}}],"position":{"start":{"line":302,"column":1,"offset":9072},"end":{"line":302,"column":13,"offset":9084}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Solution for #3 on lab:\n","position":{"start":{"line":303,"column":1,"offset":9085},"end":{"line":304,"column":1,"offset":9110}}},{"type":"raw","value":"<br>","position":{"start":{"line":304,"column":1,"offset":9110},"end":{"line":304,"column":5,"offset":9114}}}],"position":{"start":{"line":303,"column":1,"offset":9085},"end":{"line":304,"column":5,"offset":9114}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (substitute sent old new)\n    (if (equal? sent &#39;())\n        &#39;()\n        (se (replace (first sent) old new) (substitute (bf sent) old new))))\n\n(define (replace wd old new)\n    (if (equal? wd old)\n        new\n        wd)\n)</code></pre></div>","position":{"start":{"line":306,"column":1,"offset":9116},"end":{"line":317,"column":4,"offset":9352}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":318,"column":1,"offset":9353},"end":{"line":319,"column":5,"offset":9362}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note to self, don’t copy and paste function calls to check if your code is right because there might be special characters in there :P.\n","position":{"start":{"line":321,"column":1,"offset":9364},"end":{"line":322,"column":1,"offset":9500}}},{"type":"raw","value":"<br>","position":{"start":{"line":322,"column":1,"offset":9500},"end":{"line":322,"column":5,"offset":9504}}},{"type":"text","value":"\n","position":{"start":{"line":322,"column":5,"offset":9504},"end":{"line":323,"column":1,"offset":9505}}},{"type":"raw","value":"<br>","position":{"start":{"line":323,"column":1,"offset":9505},"end":{"line":323,"column":5,"offset":9509}}},{"type":"text","value":"\nThe replace function here takes in the current word and checks to see if the word should be replaced, then it returns what the word should be.\nSubstitute is a recursive function that iterates the sentence and returns the sentence with the replacements. ","position":{"start":{"line":323,"column":5,"offset":9509},"end":{"line":325,"column":111,"offset":9763}}}],"position":{"start":{"line":321,"column":1,"offset":9364},"end":{"line":325,"column":111,"offset":9763}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"READINGS","position":{"start":{"line":327,"column":6,"offset":9770},"end":{"line":327,"column":14,"offset":9778}}}],"position":{"start":{"line":327,"column":1,"offset":9765},"end":{"line":327,"column":14,"offset":9778}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.1 The Elements of Programming","position":{"start":{"line":328,"column":7,"offset":9785},"end":{"line":328,"column":38,"offset":9816}}}],"position":{"start":{"line":328,"column":1,"offset":9779},"end":{"line":328,"column":38,"offset":9816}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The section starts off saying that there are 3 mechanisms that languages utilize to simplify complex ideas:\n","position":{"start":{"line":329,"column":1,"offset":9817},"end":{"line":330,"column":1,"offset":9925}}},{"type":"raw","value":"<br>","position":{"start":{"line":330,"column":1,"offset":9925},"end":{"line":330,"column":5,"offset":9929}}},{"type":"text","value":"\nprimitive expressions: simplest entities within a language.\n","position":{"start":{"line":330,"column":5,"offset":9929},"end":{"line":332,"column":1,"offset":9990}}},{"type":"raw","value":"<br>","position":{"start":{"line":332,"column":1,"offset":9990},"end":{"line":332,"column":5,"offset":9994}}},{"type":"text","value":"\n","position":{"start":{"line":332,"column":5,"offset":9994},"end":{"line":333,"column":1,"offset":9995}}},{"type":"raw","value":"<br>","position":{"start":{"line":333,"column":1,"offset":9995},"end":{"line":333,"column":5,"offset":9999}}},{"type":"text","value":"\nmeans of combination: The ability to combine simple entities.\n","position":{"start":{"line":333,"column":5,"offset":9999},"end":{"line":335,"column":1,"offset":10063}}},{"type":"raw","value":"<br>","position":{"start":{"line":335,"column":1,"offset":10063},"end":{"line":335,"column":5,"offset":10067}}},{"type":"text","value":"\n","position":{"start":{"line":335,"column":5,"offset":10067},"end":{"line":336,"column":1,"offset":10068}}},{"type":"raw","value":"<br>","position":{"start":{"line":336,"column":1,"offset":10068},"end":{"line":336,"column":5,"offset":10072}}},{"type":"text","value":"\nmeans of abstraction: The ability to name and manipulate combined elements.\n","position":{"start":{"line":336,"column":5,"offset":10072},"end":{"line":338,"column":1,"offset":10149}}},{"type":"raw","value":"<br>","position":{"start":{"line":338,"column":1,"offset":10149},"end":{"line":338,"column":5,"offset":10153}}},{"type":"text","value":"\n","position":{"start":{"line":338,"column":5,"offset":10153},"end":{"line":339,"column":1,"offset":10154}}},{"type":"raw","value":"<br>","position":{"start":{"line":339,"column":1,"offset":10154},"end":{"line":339,"column":5,"offset":10158}}},{"type":"text","value":"\nBreaking down a compound expression:\n","position":{"start":{"line":339,"column":5,"offset":10158},"end":{"line":341,"column":1,"offset":10196}}},{"type":"raw","value":"<br>","position":{"start":{"line":341,"column":1,"offset":10196},"end":{"line":341,"column":5,"offset":10200}}},{"type":"text","value":"\ncombination: ","position":{"start":{"line":341,"column":5,"offset":10200},"end":{"line":342,"column":14,"offset":10214}}},{"type":"raw","value":"<code class=\"language-text\">(+ 137 349)</code>","position":{"start":{"line":342,"column":14,"offset":10214},"end":{"line":342,"column":27,"offset":10227}}},{"type":"text","value":"\n","position":{"start":{"line":342,"column":27,"offset":10227},"end":{"line":343,"column":1,"offset":10228}}},{"type":"raw","value":"<br>","position":{"start":{"line":343,"column":1,"offset":10228},"end":{"line":343,"column":5,"offset":10232}}},{"type":"text","value":"\noperator: ","position":{"start":{"line":343,"column":5,"offset":10232},"end":{"line":344,"column":11,"offset":10243}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":344,"column":11,"offset":10243},"end":{"line":344,"column":14,"offset":10246}}},{"type":"text","value":"\n","position":{"start":{"line":344,"column":14,"offset":10246},"end":{"line":345,"column":1,"offset":10247}}},{"type":"raw","value":"<br>","position":{"start":{"line":345,"column":1,"offset":10247},"end":{"line":345,"column":5,"offset":10251}}},{"type":"text","value":"\noperands: ","position":{"start":{"line":345,"column":5,"offset":10251},"end":{"line":346,"column":11,"offset":10262}}},{"type":"raw","value":"<code class=\"language-text\">137</code>","position":{"start":{"line":346,"column":11,"offset":10262},"end":{"line":346,"column":16,"offset":10267}}},{"type":"text","value":" ","position":{"start":{"line":346,"column":16,"offset":10267},"end":{"line":346,"column":17,"offset":10268}}},{"type":"raw","value":"<code class=\"language-text\">349</code>","position":{"start":{"line":346,"column":17,"offset":10268},"end":{"line":346,"column":22,"offset":10273}}},{"type":"text","value":"\n","position":{"start":{"line":346,"column":22,"offset":10273},"end":{"line":347,"column":1,"offset":10274}}},{"type":"raw","value":"<br>","position":{"start":{"line":347,"column":1,"offset":10274},"end":{"line":347,"column":5,"offset":10278}}},{"type":"text","value":"\n","position":{"start":{"line":347,"column":5,"offset":10278},"end":{"line":348,"column":1,"offset":10279}}},{"type":"raw","value":"<br>","position":{"start":{"line":348,"column":1,"offset":10279},"end":{"line":348,"column":5,"offset":10283}}},{"type":"text","value":"\nThe interpreter runs in a “read-eval-print” loop. That is why it is not necessary to print stuff out like in other languages.\n","position":{"start":{"line":348,"column":5,"offset":10283},"end":{"line":350,"column":1,"offset":10410}}},{"type":"raw","value":"<br>","position":{"start":{"line":350,"column":1,"offset":10410},"end":{"line":350,"column":5,"offset":10414}}},{"type":"text","value":"\n","position":{"start":{"line":350,"column":5,"offset":10414},"end":{"line":351,"column":1,"offset":10415}}},{"type":"raw","value":"<br>","position":{"start":{"line":351,"column":1,"offset":10415},"end":{"line":351,"column":5,"offset":10419}}},{"type":"text","value":"\nEnvironment: The name-object pairs the interpreter keeps in memory.\n","position":{"start":{"line":351,"column":5,"offset":10419},"end":{"line":353,"column":1,"offset":10488}}},{"type":"raw","value":"<br>","position":{"start":{"line":353,"column":1,"offset":10488},"end":{"line":353,"column":5,"offset":10492}}},{"type":"text","value":"\n","position":{"start":{"line":353,"column":5,"offset":10492},"end":{"line":354,"column":1,"offset":10493}}},{"type":"raw","value":"<br>","position":{"start":{"line":354,"column":1,"offset":10493},"end":{"line":354,"column":5,"offset":10497}}}],"position":{"start":{"line":329,"column":1,"offset":9817},"end":{"line":354,"column":5,"offset":10497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedures can be used to build on top of other Compound Procedures:\n","position":{"start":{"line":356,"column":1,"offset":10499},"end":{"line":357,"column":1,"offset":10577}}},{"type":"raw","value":"<br>","position":{"start":{"line":357,"column":1,"offset":10577},"end":{"line":357,"column":5,"offset":10581}}}],"position":{"start":{"line":356,"column":1,"offset":10499},"end":{"line":357,"column":5,"offset":10581}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (sum-of-squares x y)\n(+ (square x) (square y))</code></pre></div>","position":{"start":{"line":358,"column":1,"offset":10582},"end":{"line":361,"column":4,"offset":10644}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":362,"column":1,"offset":10645},"end":{"line":362,"column":5,"offset":10649}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedure: procedure that you make out of other procedures.","position":{"start":{"line":364,"column":1,"offset":10651},"end":{"line":364,"column":69,"offset":10719}}}],"position":{"start":{"line":364,"column":1,"offset":10651},"end":{"line":364,"column":69,"offset":10719}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Primitive Procedure: procedure built into the language ex: ","position":{"start":{"line":366,"column":1,"offset":10721},"end":{"line":366,"column":60,"offset":10780}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":366,"column":60,"offset":10780},"end":{"line":366,"column":63,"offset":10783}}},{"type":"text","value":"\n","position":{"start":{"line":366,"column":63,"offset":10783},"end":{"line":367,"column":1,"offset":10784}}},{"type":"raw","value":"<br>","position":{"start":{"line":367,"column":1,"offset":10784},"end":{"line":367,"column":5,"offset":10788}}},{"type":"text","value":"\n","position":{"start":{"line":367,"column":5,"offset":10788},"end":{"line":368,"column":1,"offset":10789}}},{"type":"raw","value":"<br>","position":{"start":{"line":368,"column":1,"offset":10789},"end":{"line":368,"column":5,"offset":10793}}},{"type":"text","value":"\nBoth are used exactly the same.\n","position":{"start":{"line":368,"column":5,"offset":10793},"end":{"line":370,"column":1,"offset":10826}}},{"type":"raw","value":"<br>","position":{"start":{"line":370,"column":1,"offset":10826},"end":{"line":370,"column":5,"offset":10830}}},{"type":"text","value":"\n","position":{"start":{"line":370,"column":5,"offset":10830},"end":{"line":371,"column":1,"offset":10831}}},{"type":"raw","value":"<br>","position":{"start":{"line":371,"column":1,"offset":10831},"end":{"line":371,"column":5,"offset":10835}}},{"type":"text","value":"\nWhen writing programs it is important to write modular code that doesn’t care how the other things are computed, only what is computed. This is known as a Black-Box abstraction.\n","position":{"start":{"line":371,"column":5,"offset":10835},"end":{"line":373,"column":1,"offset":11014}}},{"type":"raw","value":"<br>","position":{"start":{"line":373,"column":1,"offset":11014},"end":{"line":373,"column":5,"offset":11018}}}],"position":{"start":{"line":366,"column":1,"offset":10721},"end":{"line":373,"column":5,"offset":11018}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lisp allows for block structure so you can nest a define in another define, and only the parent will have access to the nested define.\n","position":{"start":{"line":375,"column":1,"offset":11020},"end":{"line":376,"column":1,"offset":11155}}},{"type":"raw","value":"<br>","position":{"start":{"line":376,"column":1,"offset":11155},"end":{"line":376,"column":5,"offset":11159}}},{"type":"text","value":"\nLisp also allows the sub define functions to have access to parameters in the parents scope. This is called lexical scoping.\n","position":{"start":{"line":376,"column":5,"offset":11159},"end":{"line":378,"column":1,"offset":11285}}},{"type":"raw","value":"<br>","position":{"start":{"line":378,"column":1,"offset":11285},"end":{"line":378,"column":5,"offset":11289}}}],"position":{"start":{"line":375,"column":1,"offset":11020},"end":{"line":378,"column":5,"offset":11289}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.2","position":{"start":{"line":380,"column":7,"offset":11297},"end":{"line":380,"column":10,"offset":11300}}}],"position":{"start":{"line":380,"column":1,"offset":11291},"end":{"line":380,"column":10,"offset":11300}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.3 Formulating Abstractions with Higher Order Procedures","position":{"start":{"line":384,"column":7,"offset":11310},"end":{"line":384,"column":64,"offset":11367}}}],"position":{"start":{"line":384,"column":1,"offset":11304},"end":{"line":384,"column":64,"offset":11367}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sigma Notation: The sum of numbers between A and B.\nThis can be abstracted to create a procedure that handles all needs for doing a procedure to calculate a sum.\n","position":{"start":{"line":386,"column":1,"offset":11369},"end":{"line":388,"column":1,"offset":11531}}},{"type":"raw","value":"<br>","position":{"start":{"line":388,"column":1,"offset":11531},"end":{"line":388,"column":5,"offset":11535}}},{"type":"text","value":"\n","position":{"start":{"line":388,"column":5,"offset":11535},"end":{"line":389,"column":1,"offset":11536}}},{"type":"raw","value":"<br>","position":{"start":{"line":389,"column":1,"offset":11536},"end":{"line":389,"column":5,"offset":11540}}},{"type":"text","value":"\nArguments for a Summation function:\n","position":{"start":{"line":389,"column":5,"offset":11540},"end":{"line":391,"column":1,"offset":11577}}},{"type":"raw","value":"<br>","position":{"start":{"line":391,"column":1,"offset":11577},"end":{"line":391,"column":5,"offset":11581}}},{"type":"text","value":"\n","position":{"start":{"line":391,"column":5,"offset":11581},"end":{"line":392,"column":1,"offset":11582}}},{"type":"raw","value":"<br>","position":{"start":{"line":392,"column":1,"offset":11582},"end":{"line":392,"column":5,"offset":11586}}},{"type":"text","value":"\nTerm: Procedure for the sum.\n","position":{"start":{"line":392,"column":5,"offset":11586},"end":{"line":394,"column":1,"offset":11616}}},{"type":"raw","value":"<br>","position":{"start":{"line":394,"column":1,"offset":11616},"end":{"line":394,"column":5,"offset":11620}}},{"type":"text","value":"\na: start point\n","position":{"start":{"line":394,"column":5,"offset":11620},"end":{"line":396,"column":1,"offset":11636}}},{"type":"raw","value":"<br>","position":{"start":{"line":396,"column":1,"offset":11636},"end":{"line":396,"column":5,"offset":11640}}},{"type":"text","value":"\nb: end point\n","position":{"start":{"line":396,"column":5,"offset":11640},"end":{"line":398,"column":1,"offset":11654}}},{"type":"raw","value":"<br>","position":{"start":{"line":398,"column":1,"offset":11654},"end":{"line":398,"column":5,"offset":11658}}},{"type":"text","value":"\nnext: The increment function ex: + 1 + 2 + 3\n","position":{"start":{"line":398,"column":5,"offset":11658},"end":{"line":400,"column":1,"offset":11704}}},{"type":"raw","value":"<br>","position":{"start":{"line":400,"column":1,"offset":11704},"end":{"line":400,"column":5,"offset":11708}}},{"type":"text","value":"\n","position":{"start":{"line":400,"column":5,"offset":11708},"end":{"line":401,"column":1,"offset":11709}}},{"type":"raw","value":"<br>","position":{"start":{"line":401,"column":1,"offset":11709},"end":{"line":401,"column":5,"offset":11713}}}],"position":{"start":{"line":386,"column":1,"offset":11369},"end":{"line":401,"column":5,"offset":11713}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can use binary search like logic to find points within a function. By splitting the length repeatedly then checking accuracy you can continually get closer to the point you are looking for in the function. The calculated runtime for these functions are:\n","position":{"start":{"line":403,"column":1,"offset":11715},"end":{"line":404,"column":1,"offset":11973}}},{"type":"raw","value":"<br>","position":{"start":{"line":404,"column":1,"offset":11973},"end":{"line":404,"column":5,"offset":11977}}},{"type":"text","value":"\n","position":{"start":{"line":404,"column":5,"offset":11977},"end":{"line":405,"column":1,"offset":11978}}},{"type":"raw","value":"<br>","position":{"start":{"line":405,"column":1,"offset":11978},"end":{"line":405,"column":5,"offset":11982}}}],"position":{"start":{"line":403,"column":1,"offset":11715},"end":{"line":405,"column":5,"offset":11982}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">L = length of the functions start to end points\nT = tolerance, the distance from the given point that will return a result\nruntime:\nlog(L/T)</code></pre></div>","position":{"start":{"line":406,"column":1,"offset":11983},"end":{"line":411,"column":4,"offset":12131}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Think of L/T as the possibilties between the two points.","position":{"start":{"line":412,"column":1,"offset":12132},"end":{"line":412,"column":57,"offset":12188}}}],"position":{"start":{"line":412,"column":1,"offset":12132},"end":{"line":412,"column":57,"offset":12188}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":414,"column":1,"offset":12190}}}}