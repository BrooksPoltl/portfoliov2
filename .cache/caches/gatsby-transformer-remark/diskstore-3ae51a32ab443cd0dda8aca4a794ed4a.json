{"expireTime":9007200844217041000,"key":"transformer-remark-markdown-ast-de4919955449ff5f745fed92b53b4270-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54},"indent":[]}},{"type":"link","title":null,"url":"https://teachyourselfcs.com/","children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70},"indent":[]}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101},"indent":[]}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153},"indent":[1]}},{"type":"link","title":null,"url":"https://bpp.dev/articles/teachyourselfcs/programming/00:getting-started/","children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158},"indent":[]}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":131,"offset":233},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":131,"offset":233},"end":{"line":2,"column":132,"offset":234},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":132,"offset":234},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":3,"column":6,"offset":240},"end":{"line":3,"column":14,"offset":248},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":235},"end":{"line":3,"column":14,"offset":248},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L14","position":{"start":{"line":4,"column":7,"offset":255},"end":{"line":4,"column":10,"offset":258},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":249},"end":{"line":4,"column":10,"offset":258},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"2 types of expressions:","position":{"start":{"line":5,"column":1,"offset":259},"end":{"line":5,"column":24,"offset":282},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":259},"end":{"line":5,"column":24,"offset":282},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                 expr\n    _______________|___________________    \n    |                                 |\n    atomic                           list\n    ___|__________                     |\n    |            |            _______________________       \nself-eval    variables        procedures special-forms</code></pre></div>","position":{"start":{"line":6,"column":1,"offset":283},"end":{"line":14,"column":4,"offset":595},"indent":[1,1,1,1,1,1,1,1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    (define (eval exp)\n    (cond ((self-evaluating? exp) exp)\n    ((symbol? exp) (look-up-global-value exp))\n    ((special-form? exp) (do-special-form exp))\n    (else (apply (eval (car exp))\n    (map eval (cdr exp)) ))))</code></pre></div>","position":{"start":{"line":16,"column":1,"offset":597},"end":{"line":23,"column":4,"offset":825},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Above is the eval function for an interpreter in Scheme. Notice it attempts to determine the type of expression then has a function to handle them. If it is a list it recursively calls eval to break the list into primitives.\n","position":{"start":{"line":24,"column":1,"offset":826},"end":{"line":25,"column":1,"offset":1051},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":25,"column":1,"offset":1051},"end":{"line":25,"column":5,"offset":1055},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":25,"column":5,"offset":1055},"end":{"line":26,"column":1,"offset":1056},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":26,"column":1,"offset":1056},"end":{"line":26,"column":5,"offset":1060},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":826},"end":{"line":26,"column":5,"offset":1060},"indent":[1,1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    (define (apply proc args)\n        (if (primitive? proc)\n            (do-magic proc args)\n            (eval (substitute (body proc) (formals proc) args))))</code></pre></div>","position":{"start":{"line":27,"column":1,"offset":1061},"end":{"line":32,"column":4,"offset":1227},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"apply takes a procedure and a list of arguments. In the else of ","position":{"start":{"line":33,"column":1,"offset":1228},"end":{"line":33,"column":65,"offset":1292},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">eval</code>","position":{"start":{"line":33,"column":65,"offset":1292},"end":{"line":33,"column":71,"offset":1298},"indent":[]}},{"type":"text","value":" apply gets the first argument which will always the procedure call, and then it maps the arguments.\n","position":{"start":{"line":33,"column":71,"offset":1298},"end":{"line":34,"column":1,"offset":1399},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":34,"column":1,"offset":1399},"end":{"line":34,"column":5,"offset":1403},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":34,"column":5,"offset":1403},"end":{"line":35,"column":1,"offset":1404},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":35,"column":1,"offset":1404},"end":{"line":35,"column":5,"offset":1408},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1228},"end":{"line":35,"column":5,"offset":1408},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If the procedure is a primitive it gets handled at the machine language level.","position":{"start":{"line":37,"column":1,"offset":1410},"end":{"line":37,"column":79,"offset":1488},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1410},"end":{"line":37,"column":79,"offset":1488},"indent":[]}},{"type":"html","value":"<br>\n<br>","position":{"start":{"line":39,"column":1,"offset":1490},"end":{"line":40,"column":5,"offset":1499},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"If the procedure is created by a lambda,\nit has formal parameters and a body.\n","position":{"start":{"line":42,"column":1,"offset":1501},"end":{"line":44,"column":1,"offset":1579},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":44,"column":1,"offset":1579},"end":{"line":44,"column":5,"offset":1583},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":44,"column":5,"offset":1583},"end":{"line":45,"column":1,"offset":1584},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":45,"column":1,"offset":1584},"end":{"line":45,"column":5,"offset":1588},"indent":[]}},{"type":"text","value":"\nScheme uses environmental model of evaluation, but we are building a substitution model interpreter right now. \nSubstitution works for functional programming, but not all paradigms.\n","position":{"start":{"line":45,"column":5,"offset":1588},"end":{"line":48,"column":1,"offset":1771},"indent":[1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":48,"column":1,"offset":1771},"end":{"line":48,"column":5,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":48,"column":5,"offset":1775},"end":{"line":49,"column":1,"offset":1776},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":49,"column":1,"offset":1776},"end":{"line":49,"column":5,"offset":1780},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1501},"end":{"line":49,"column":5,"offset":1780},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L15","position":{"start":{"line":51,"column":7,"offset":1788},"end":{"line":51,"column":10,"offset":1791},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1782},"end":{"line":51,"column":10,"offset":1791},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Why use a scheme interpreter to build a new one? \n","position":{"start":{"line":52,"column":1,"offset":1792},"end":{"line":53,"column":1,"offset":1842},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":53,"column":1,"offset":1842},"end":{"line":53,"column":5,"offset":1846},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":53,"column":5,"offset":1846},"end":{"line":54,"column":1,"offset":1847},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":54,"column":1,"offset":1847},"end":{"line":54,"column":5,"offset":1851},"indent":[]}},{"type":"text","value":"\nHelps understand model of evaluation\n","position":{"start":{"line":54,"column":5,"offset":1851},"end":{"line":56,"column":1,"offset":1889},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":56,"column":1,"offset":1889},"end":{"line":56,"column":5,"offset":1893},"indent":[]}},{"type":"text","value":"\nExperiment with modifications to scheme\n","position":{"start":{"line":56,"column":5,"offset":1893},"end":{"line":58,"column":1,"offset":1934},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":58,"column":1,"offset":1934},"end":{"line":58,"column":5,"offset":1938},"indent":[]}},{"type":"text","value":"\nMost of the original interpreter is written in scheme.\n","position":{"start":{"line":58,"column":5,"offset":1938},"end":{"line":60,"column":1,"offset":1994},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":60,"column":1,"offset":1994},"end":{"line":60,"column":5,"offset":1998},"indent":[]}},{"type":"text","value":"\nConveys a big concept in cs which is universality.\n","position":{"start":{"line":60,"column":5,"offset":1998},"end":{"line":62,"column":1,"offset":2050},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":62,"column":1,"offset":2050},"end":{"line":62,"column":5,"offset":2054},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":62,"column":5,"offset":2054},"end":{"line":63,"column":1,"offset":2055},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":63,"column":1,"offset":2055},"end":{"line":63,"column":5,"offset":2059},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1792},"end":{"line":63,"column":5,"offset":2059},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"universality is the concept of one machine that can run a large breadth of functions.\n","position":{"start":{"line":65,"column":1,"offset":2061},"end":{"line":66,"column":1,"offset":2147},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":66,"column":1,"offset":2147},"end":{"line":66,"column":5,"offset":2151},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":66,"column":5,"offset":2151},"end":{"line":67,"column":1,"offset":2152},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":67,"column":1,"offset":2152},"end":{"line":67,"column":5,"offset":2156},"indent":[]}},{"type":"text","value":"\nApplicative: argument values\n","position":{"start":{"line":67,"column":5,"offset":2156},"end":{"line":69,"column":1,"offset":2186},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":69,"column":1,"offset":2186},"end":{"line":69,"column":5,"offset":2190},"indent":[]}},{"type":"text","value":"\nNormal: argument expressions\n","position":{"start":{"line":69,"column":5,"offset":2190},"end":{"line":71,"column":1,"offset":2220},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":71,"column":1,"offset":2220},"end":{"line":71,"column":5,"offset":2224},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2061},"end":{"line":71,"column":5,"offset":2224},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Read: takes the input and turns it into box pointer diagrams. \n","position":{"start":{"line":73,"column":1,"offset":2226},"end":{"line":74,"column":1,"offset":2289},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":74,"column":1,"offset":2289},"end":{"line":74,"column":5,"offset":2293},"indent":[]}},{"type":"text","value":"\nQuote: takes cadr of the next expression.\n","position":{"start":{"line":74,"column":5,"offset":2293},"end":{"line":76,"column":1,"offset":2336},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":76,"column":1,"offset":2336},"end":{"line":76,"column":5,"offset":2340},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":2226},"end":{"line":76,"column":5,"offset":2340},"indent":[1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L16","position":{"start":{"line":79,"column":7,"offset":2349},"end":{"line":79,"column":10,"offset":2352},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2343},"end":{"line":79,"column":10,"offset":2352},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"concepts:\n","position":{"start":{"line":81,"column":1,"offset":2354},"end":{"line":82,"column":1,"offset":2364},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":82,"column":1,"offset":2364},"end":{"line":82,"column":5,"offset":2368},"indent":[]}},{"type":"text","value":"\ntype tagging\n","position":{"start":{"line":82,"column":5,"offset":2368},"end":{"line":84,"column":1,"offset":2382},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":84,"column":1,"offset":2382},"end":{"line":84,"column":5,"offset":2386},"indent":[]}},{"type":"text","value":"\ndata directed programming\n","position":{"start":{"line":84,"column":5,"offset":2386},"end":{"line":86,"column":1,"offset":2413},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":86,"column":1,"offset":2413},"end":{"line":86,"column":5,"offset":2417},"indent":[]}},{"type":"text","value":"\nmessage passing\n","position":{"start":{"line":86,"column":5,"offset":2417},"end":{"line":88,"column":1,"offset":2434},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":88,"column":1,"offset":2434},"end":{"line":88,"column":5,"offset":2438},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2354},"end":{"line":88,"column":5,"offset":2438},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"type tagging: car is the symbol, cdr is the arguments.\n","position":{"start":{"line":90,"column":1,"offset":2440},"end":{"line":91,"column":1,"offset":2495},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":91,"column":1,"offset":2495},"end":{"line":91,"column":5,"offset":2499},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":2440},"end":{"line":91,"column":5,"offset":2499},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"data directed programming: write one operation that does everything.\n","position":{"start":{"line":93,"column":1,"offset":2501},"end":{"line":94,"column":1,"offset":2570},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":94,"column":1,"offset":2570},"end":{"line":94,"column":5,"offset":2574},"indent":[]}},{"type":"text","value":"\nNot functional programming if you call the same expression and get different results.\n","position":{"start":{"line":94,"column":5,"offset":2574},"end":{"line":96,"column":1,"offset":2661},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":96,"column":1,"offset":2661},"end":{"line":96,"column":5,"offset":2665},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2501},"end":{"line":96,"column":5,"offset":2665},"indent":[1,1,1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(get &#39;brian &#39;address)\n; #f\n(put &#39;brian &#39;address &#39;(781 Soda))\n; ok\n(get &#39;brian &#39;address)\n; (781 soda)</code></pre></div>","position":{"start":{"line":97,"column":1,"offset":2666},"end":{"line":104,"column":4,"offset":2774},"indent":[1,1,1,1,1,1,1]}},{"type":"html","value":"<br>\n<br>","position":{"start":{"line":106,"column":1,"offset":2776},"end":{"line":107,"column":5,"offset":2785},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"This is not functional because same expression returns different results.\nYou can still use these in a functional way by assigning at the beginning and never reassigning.\n","position":{"start":{"line":109,"column":1,"offset":2787},"end":{"line":111,"column":1,"offset":2958},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":111,"column":1,"offset":2958},"end":{"line":111,"column":5,"offset":2962},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":2787},"end":{"line":111,"column":5,"offset":2962},"indent":[1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L17","position":{"start":{"line":115,"column":7,"offset":2972},"end":{"line":115,"column":10,"offset":2975},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":2966},"end":{"line":115,"column":10,"offset":2975},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Horizontal slices through the table: messaging. The name of the interface knows all the function.","position":{"start":{"line":117,"column":1,"offset":2977},"end":{"line":117,"column":98,"offset":3074},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":2977},"end":{"line":117,"column":98,"offset":3074},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":119,"column":1,"offset":3076},"end":{"line":119,"column":5,"offset":3080},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Horizontal slicing good for making prototypes.","position":{"start":{"line":121,"column":1,"offset":3082},"end":{"line":121,"column":47,"offset":3128},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3082},"end":{"line":121,"column":47,"offset":3128},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":123,"column":1,"offset":3130},"end":{"line":123,"column":5,"offset":3134},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"4 kinds of numbers:\n","position":{"start":{"line":125,"column":1,"offset":3136},"end":{"line":126,"column":1,"offset":3156},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":126,"column":1,"offset":3156},"end":{"line":126,"column":5,"offset":3160},"indent":[]}},{"type":"text","value":"\ninteger\n","position":{"start":{"line":126,"column":5,"offset":3160},"end":{"line":128,"column":1,"offset":3169},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":128,"column":1,"offset":3169},"end":{"line":128,"column":5,"offset":3173},"indent":[]}},{"type":"text","value":"\nrational\n","position":{"start":{"line":128,"column":5,"offset":3173},"end":{"line":130,"column":1,"offset":3183},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":130,"column":1,"offset":3183},"end":{"line":130,"column":5,"offset":3187},"indent":[]}},{"type":"text","value":"\nreal\n","position":{"start":{"line":130,"column":5,"offset":3187},"end":{"line":132,"column":1,"offset":3193},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":132,"column":1,"offset":3193},"end":{"line":132,"column":5,"offset":3197},"indent":[]}},{"type":"text","value":"\ncomplex\n","position":{"start":{"line":132,"column":5,"offset":3197},"end":{"line":134,"column":1,"offset":3206},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":134,"column":1,"offset":3206},"end":{"line":134,"column":5,"offset":3210},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":134,"column":5,"offset":3210},"end":{"line":135,"column":1,"offset":3211},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":135,"column":1,"offset":3211},"end":{"line":135,"column":5,"offset":3215},"indent":[]}},{"type":"text","value":"\nregular people: 1 operand = unary, 2 operands = binary\n","position":{"start":{"line":135,"column":5,"offset":3215},"end":{"line":137,"column":1,"offset":3271},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":137,"column":1,"offset":3271},"end":{"line":137,"column":5,"offset":3275},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":137,"column":5,"offset":3275},"end":{"line":138,"column":1,"offset":3276},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":138,"column":1,"offset":3276},"end":{"line":138,"column":5,"offset":3280},"indent":[]}},{"type":"text","value":"\nprogrammers: 1 operand = monadic, 2 operands = dyadic\n","position":{"start":{"line":138,"column":5,"offset":3280},"end":{"line":140,"column":1,"offset":3335},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":140,"column":1,"offset":3335},"end":{"line":140,"column":5,"offset":3339},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":140,"column":5,"offset":3339},"end":{"line":141,"column":1,"offset":3340},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":141,"column":1,"offset":3340},"end":{"line":141,"column":5,"offset":3344},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":3136},"end":{"line":141,"column":5,"offset":3344},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"LAB","position":{"start":{"line":143,"column":6,"offset":3351},"end":{"line":143,"column":9,"offset":3354},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":3346},"end":{"line":143,"column":9,"offset":3354},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"lab 3","position":{"start":{"line":144,"column":7,"offset":3361},"end":{"line":144,"column":12,"offset":3366},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":3355},"end":{"line":144,"column":12,"offset":3366},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (count-change amount)\n(cc amount &#39;(50 25 10 5 1)))\n\n(define (cc amount kinds-of-coins)\n    (cond ((= amount 0) 1)\n    ((or (&lt; amount 0) (equal? kinds-of-coins &#39;())) 0)\n    (else (+ (cc amount\n                (cdr kinds-of-coins))\n    (cc (- amount \n    (first-denomination kinds-of-coins))\n    kinds-of-coins)))))\n\n(define (first-denomination kinds-of-coins)\n(car kinds-of-coins))</code></pre></div>","position":{"start":{"line":145,"column":1,"offset":3367},"end":{"line":160,"column":4,"offset":3763},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This modifies the procedure on page 40-41 for count-change.\n","position":{"start":{"line":161,"column":1,"offset":3764},"end":{"line":162,"column":1,"offset":3824},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":162,"column":1,"offset":3824},"end":{"line":162,"column":5,"offset":3828},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":162,"column":5,"offset":3828},"end":{"line":163,"column":1,"offset":3829},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":163,"column":1,"offset":3829},"end":{"line":163,"column":5,"offset":3833},"indent":[]}},{"type":"text","value":"\nThis replaces the amount of coins with a sentence of coin amounts. I modified it to check for an empty array instead of 0, then when all possibilities of a denomination are checked I switch it to the remaining denominations using ","position":{"start":{"line":163,"column":5,"offset":3833},"end":{"line":164,"column":231,"offset":4064},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">cdr</code>","position":{"start":{"line":164,"column":231,"offset":4064},"end":{"line":164,"column":236,"offset":4069},"indent":[]}},{"type":"text","value":". Then all I have to do to find the ","position":{"start":{"line":164,"column":236,"offset":4069},"end":{"line":164,"column":272,"offset":4105},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">first-denomination</code>","position":{"start":{"line":164,"column":272,"offset":4105},"end":{"line":164,"column":292,"offset":4125},"indent":[]}},{"type":"text","value":" is return ","position":{"start":{"line":164,"column":292,"offset":4125},"end":{"line":164,"column":303,"offset":4136},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">car</code>","position":{"start":{"line":164,"column":303,"offset":4136},"end":{"line":164,"column":308,"offset":4141},"indent":[]}},{"type":"text","value":" of the list.","position":{"start":{"line":164,"column":308,"offset":4141},"end":{"line":164,"column":321,"offset":4154},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":3764},"end":{"line":164,"column":321,"offset":4154},"indent":[1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"READINGS","position":{"start":{"line":167,"column":6,"offset":4162},"end":{"line":167,"column":14,"offset":4170},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":4157},"end":{"line":167,"column":14,"offset":4170},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"2.4 Multiple Representations for Abstract Data","position":{"start":{"line":168,"column":7,"offset":4177},"end":{"line":168,"column":53,"offset":4223},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":4171},"end":{"line":168,"column":53,"offset":4223},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"generic procedures: procedures that operate that may be represented in more than 1 way.\n","position":{"start":{"line":170,"column":1,"offset":4225},"end":{"line":171,"column":1,"offset":4313},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":171,"column":1,"offset":4313},"end":{"line":171,"column":5,"offset":4317},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":171,"column":5,"offset":4317},"end":{"line":172,"column":1,"offset":4318},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":172,"column":1,"offset":4318},"end":{"line":172,"column":5,"offset":4322},"indent":[]}},{"type":"text","value":"\ntype tags allow for specificity. Telling the generic procedure how to operate for that specific type.\n","position":{"start":{"line":172,"column":5,"offset":4322},"end":{"line":174,"column":1,"offset":4425},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":174,"column":1,"offset":4425},"end":{"line":174,"column":5,"offset":4429},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":174,"column":5,"offset":4429},"end":{"line":175,"column":1,"offset":4430},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":175,"column":1,"offset":4430},"end":{"line":175,"column":5,"offset":4434},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":4225},"end":{"line":175,"column":5,"offset":4434},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"put: installs the item in the table\n","position":{"start":{"line":177,"column":1,"offset":4436},"end":{"line":178,"column":1,"offset":4472},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":178,"column":1,"offset":4472},"end":{"line":178,"column":5,"offset":4476},"indent":[]}},{"type":"text","value":"\nget: looks up the entry and returns item\n","position":{"start":{"line":178,"column":5,"offset":4476},"end":{"line":180,"column":1,"offset":4518},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":180,"column":1,"offset":4518},"end":{"line":180,"column":5,"offset":4522},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":180,"column":5,"offset":4522},"end":{"line":181,"column":1,"offset":4523},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":181,"column":1,"offset":4523},"end":{"line":181,"column":5,"offset":4527},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4436},"end":{"line":181,"column":5,"offset":4527},"indent":[1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"2.5 Systems with Generic Operations","position":{"start":{"line":185,"column":7,"offset":4537},"end":{"line":185,"column":42,"offset":4572},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":4531},"end":{"line":185,"column":42,"offset":4572},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Coercion: Objects of one type may be viewed as being of another type.\n","position":{"start":{"line":187,"column":1,"offset":4574},"end":{"line":188,"column":1,"offset":4644},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":188,"column":1,"offset":4644},"end":{"line":188,"column":5,"offset":4648},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":188,"column":5,"offset":4648},"end":{"line":189,"column":1,"offset":4649},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":189,"column":1,"offset":4649},"end":{"line":189,"column":5,"offset":4653},"indent":[]}},{"type":"text","value":"\nScheme checks to see if one type can be changed to another, if not it checks to see if the other can. If neither can change to the other it throws an error.","position":{"start":{"line":189,"column":5,"offset":4653},"end":{"line":190,"column":157,"offset":4810},"indent":[1]}}],"position":{"start":{"line":187,"column":1,"offset":4574},"end":{"line":190,"column":157,"offset":4810},"indent":[1,1,1]}},{"type":"html","value":"<br>\n<br>","position":{"start":{"line":192,"column":1,"offset":4812},"end":{"line":193,"column":5,"offset":4821},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Types can have hierarchies. For example integers are a subtype of rational numbers. And rational numbers are a supertype of integers. Numbers have a simple hierarchy known as a tower. With integers on the bottom and complex numbers on the top.","position":{"start":{"line":195,"column":1,"offset":4823},"end":{"line":195,"column":244,"offset":5066},"indent":[]}}],"position":{"start":{"line":195,"column":1,"offset":4823},"end":{"line":195,"column":244,"offset":5066},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":198,"column":1,"offset":5069}}}}