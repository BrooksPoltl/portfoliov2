{"expireTime":9007200842256358000,"key":"transformer-remark-markdown-ast-5e2ca9e3aee761419168494fa44975c0-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54},"indent":[]}},{"type":"link","title":null,"url":"https://teachyourselfcs.com/","children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70},"indent":[]}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101},"indent":[]}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153},"indent":[1]}},{"type":"link","title":null,"url":"http://localhost:8000/teachyourselfcs/programming/00:getting-started/","children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158},"indent":[]}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":128,"offset":230},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":128,"offset":230},"end":{"line":2,"column":129,"offset":231},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":129,"offset":231},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"INTRO","position":{"start":{"line":4,"column":6,"offset":238},"end":{"line":4,"column":11,"offset":243},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":233},"end":{"line":4,"column":11,"offset":243},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I will be following the Summer 2010 ","position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":5,"column":37,"offset":280},"indent":[]}},{"type":"link","title":null,"url":"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html","children":[{"type":"text","value":"Calendar","position":{"start":{"line":5,"column":38,"offset":281},"end":{"line":5,"column":46,"offset":289},"indent":[]}}],"position":{"start":{"line":5,"column":37,"offset":280},"end":{"line":5,"column":101,"offset":344},"indent":[]}},{"type":"text","value":"\nso each week will consist of 4 lectures and 2 labs.","position":{"start":{"line":5,"column":101,"offset":344},"end":{"line":6,"column":52,"offset":396},"indent":[1]}}],"position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":6,"column":52,"offset":396},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"READINGS","position":{"start":{"line":8,"column":6,"offset":403},"end":{"line":8,"column":14,"offset":411},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":398},"end":{"line":8,"column":14,"offset":411},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"1.1 The Elements of Programming","position":{"start":{"line":9,"column":7,"offset":418},"end":{"line":9,"column":38,"offset":449},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":412},"end":{"line":9,"column":38,"offset":449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The section starts off saying that there are 3 mechanisms that languages utilize to simplify complex ideas:\n","position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":11,"column":1,"offset":558},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":11,"column":1,"offset":558},"end":{"line":11,"column":5,"offset":562},"indent":[]}},{"type":"text","value":"\nprimitive expressions: simplest entities within a language.\n","position":{"start":{"line":11,"column":5,"offset":562},"end":{"line":13,"column":1,"offset":623},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":13,"column":1,"offset":623},"end":{"line":13,"column":5,"offset":627},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":5,"offset":627},"end":{"line":14,"column":1,"offset":628},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":14,"column":1,"offset":628},"end":{"line":14,"column":5,"offset":632},"indent":[]}},{"type":"text","value":"\nmeans of combination: The ability to combine simple entities. \n","position":{"start":{"line":14,"column":5,"offset":632},"end":{"line":16,"column":1,"offset":696},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":16,"column":1,"offset":696},"end":{"line":16,"column":5,"offset":700},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":16,"column":5,"offset":700},"end":{"line":17,"column":1,"offset":701},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":17,"column":1,"offset":701},"end":{"line":17,"column":5,"offset":705},"indent":[]}},{"type":"text","value":"\nmeans of abstraction: The ability to name and manipulate combined elements.\n","position":{"start":{"line":17,"column":5,"offset":705},"end":{"line":19,"column":1,"offset":782},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":19,"column":1,"offset":782},"end":{"line":19,"column":5,"offset":786},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":19,"column":5,"offset":786},"end":{"line":20,"column":1,"offset":787},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":20,"column":1,"offset":787},"end":{"line":20,"column":5,"offset":791},"indent":[]}},{"type":"text","value":"\nBreaking down a compound expression:\n","position":{"start":{"line":20,"column":5,"offset":791},"end":{"line":22,"column":1,"offset":829},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":22,"column":1,"offset":829},"end":{"line":22,"column":5,"offset":833},"indent":[]}},{"type":"text","value":"\ncombination: ","position":{"start":{"line":22,"column":5,"offset":833},"end":{"line":23,"column":14,"offset":847},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">(+ 137 349)</code>","position":{"start":{"line":23,"column":14,"offset":847},"end":{"line":23,"column":27,"offset":860},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":23,"column":27,"offset":860},"end":{"line":24,"column":1,"offset":861},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":24,"column":1,"offset":861},"end":{"line":24,"column":5,"offset":865},"indent":[]}},{"type":"text","value":"\noperator: ","position":{"start":{"line":24,"column":5,"offset":865},"end":{"line":25,"column":11,"offset":876},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":25,"column":11,"offset":876},"end":{"line":25,"column":14,"offset":879},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":25,"column":14,"offset":879},"end":{"line":26,"column":1,"offset":880},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":26,"column":1,"offset":880},"end":{"line":26,"column":5,"offset":884},"indent":[]}},{"type":"text","value":"\noperands: ","position":{"start":{"line":26,"column":5,"offset":884},"end":{"line":27,"column":11,"offset":895},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">137</code>","position":{"start":{"line":27,"column":11,"offset":895},"end":{"line":27,"column":16,"offset":900},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":27,"column":16,"offset":900},"end":{"line":27,"column":17,"offset":901},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">349</code>","position":{"start":{"line":27,"column":17,"offset":901},"end":{"line":27,"column":22,"offset":906},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":27,"column":22,"offset":906},"end":{"line":28,"column":1,"offset":907},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":28,"column":1,"offset":907},"end":{"line":28,"column":5,"offset":911},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":28,"column":5,"offset":911},"end":{"line":29,"column":1,"offset":912},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":29,"column":1,"offset":912},"end":{"line":29,"column":5,"offset":916},"indent":[]}},{"type":"text","value":"\nThe interpreter runs in a “read-eval-print” loop. That is why it is not necessary to print stuff out like in other languages.\n","position":{"start":{"line":29,"column":5,"offset":916},"end":{"line":31,"column":1,"offset":1043},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":31,"column":1,"offset":1043},"end":{"line":31,"column":5,"offset":1047},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":31,"column":5,"offset":1047},"end":{"line":32,"column":1,"offset":1048},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":32,"column":1,"offset":1048},"end":{"line":32,"column":5,"offset":1052},"indent":[]}},{"type":"text","value":"\nEnvironment: The name-object pairs the interpreter keeps in memory.\n","position":{"start":{"line":32,"column":5,"offset":1052},"end":{"line":34,"column":1,"offset":1121},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":34,"column":1,"offset":1121},"end":{"line":34,"column":5,"offset":1125},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":34,"column":5,"offset":1125},"end":{"line":35,"column":1,"offset":1126},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":35,"column":1,"offset":1126},"end":{"line":35,"column":5,"offset":1130},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":35,"column":5,"offset":1130},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Compound Procedures can be used to build on top of other Compound Procedures:\n","position":{"start":{"line":37,"column":1,"offset":1132},"end":{"line":38,"column":1,"offset":1210},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":38,"column":1,"offset":1210},"end":{"line":38,"column":5,"offset":1214},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1132},"end":{"line":38,"column":5,"offset":1214},"indent":[1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (sum-of-squares x y)\n(+ (square x) (square y))</code></pre></div>","position":{"start":{"line":39,"column":1,"offset":1215},"end":{"line":42,"column":4,"offset":1277},"indent":[1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":43,"column":1,"offset":1278},"end":{"line":43,"column":5,"offset":1282},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Compound Procedure: procedure that you make out of other procedures.","position":{"start":{"line":45,"column":1,"offset":1284},"end":{"line":45,"column":69,"offset":1352},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1284},"end":{"line":45,"column":69,"offset":1352},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Primitive Procedure: procedure built into the language ex: ","position":{"start":{"line":47,"column":1,"offset":1354},"end":{"line":47,"column":60,"offset":1413},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":47,"column":60,"offset":1413},"end":{"line":47,"column":63,"offset":1416},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":47,"column":63,"offset":1416},"end":{"line":48,"column":1,"offset":1417},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":48,"column":1,"offset":1417},"end":{"line":48,"column":5,"offset":1421},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":48,"column":5,"offset":1421},"end":{"line":49,"column":1,"offset":1422},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":49,"column":1,"offset":1422},"end":{"line":49,"column":5,"offset":1426},"indent":[]}},{"type":"text","value":"\nBoth are used exactly the same.\n","position":{"start":{"line":49,"column":5,"offset":1426},"end":{"line":51,"column":1,"offset":1459},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":51,"column":1,"offset":1459},"end":{"line":51,"column":5,"offset":1463},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":51,"column":5,"offset":1463},"end":{"line":52,"column":1,"offset":1464},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":52,"column":1,"offset":1464},"end":{"line":52,"column":5,"offset":1468},"indent":[]}},{"type":"text","value":"\nWhen writing programs it is important to write modular code that doesn’t care how the other things are computed, only what is computed. This is known as a Black-Box abstraction.\n","position":{"start":{"line":52,"column":5,"offset":1468},"end":{"line":54,"column":1,"offset":1647},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":54,"column":1,"offset":1647},"end":{"line":54,"column":5,"offset":1651},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1354},"end":{"line":54,"column":5,"offset":1651},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lisp allows for block structure so you can nest a define in another define, and only the parent will have access to the nested define.\n","position":{"start":{"line":56,"column":1,"offset":1653},"end":{"line":57,"column":1,"offset":1788},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":57,"column":1,"offset":1788},"end":{"line":57,"column":5,"offset":1792},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1653},"end":{"line":57,"column":5,"offset":1792},"indent":[1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"1.2","position":{"start":{"line":59,"column":7,"offset":1800},"end":{"line":59,"column":10,"offset":1803},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1794},"end":{"line":59,"column":10,"offset":1803},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"1.3","position":{"start":{"line":60,"column":7,"offset":1810},"end":{"line":60,"column":10,"offset":1813},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1804},"end":{"line":60,"column":10,"offset":1813},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":62,"column":6,"offset":1820},"end":{"line":62,"column":14,"offset":1828},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1815},"end":{"line":62,"column":14,"offset":1828},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L01","position":{"start":{"line":63,"column":7,"offset":1835},"end":{"line":63,"column":10,"offset":1838},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1829},"end":{"line":63,"column":10,"offset":1838},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":65,"column":8,"offset":1847},"end":{"line":65,"column":30,"offset":1869},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1840},"end":{"line":65,"column":30,"offset":1869},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":67,"column":1,"offset":1871},"end":{"line":68,"column":1,"offset":2015},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":68,"column":1,"offset":2015},"end":{"line":68,"column":5,"offset":2019},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":68,"column":5,"offset":2019},"end":{"line":68,"column":16,"offset":2030},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":68,"column":16,"offset":2030},"end":{"line":68,"column":20,"offset":2034},"indent":[]}},{"type":"text","value":" \nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like: \n","position":{"start":{"line":68,"column":20,"offset":2034},"end":{"line":70,"column":1,"offset":2178},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":70,"column":1,"offset":2178},"end":{"line":70,"column":5,"offset":2182},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":70,"column":5,"offset":2182},"end":{"line":70,"column":16,"offset":2193},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":70,"column":16,"offset":2193},"end":{"line":70,"column":20,"offset":2197},"indent":[]}},{"type":"text","value":"\nNow lets say we want to do something like:  ","position":{"start":{"line":70,"column":20,"offset":2197},"end":{"line":71,"column":45,"offset":2242},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":71,"column":45,"offset":2242},"end":{"line":71,"column":49,"offset":2246},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">2 + 2 +  3 - 4</code>","position":{"start":{"line":71,"column":49,"offset":2246},"end":{"line":71,"column":65,"offset":2262},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":71,"column":65,"offset":2262},"end":{"line":71,"column":69,"offset":2266},"indent":[]}},{"type":"text","value":"\nIn Scheme you can simply nest operators: \n","position":{"start":{"line":71,"column":69,"offset":2266},"end":{"line":73,"column":1,"offset":2309},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":73,"column":1,"offset":2309},"end":{"line":73,"column":5,"offset":2313},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":73,"column":5,"offset":2313},"end":{"line":73,"column":22,"offset":2330},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":73,"column":22,"offset":2330},"end":{"line":73,"column":26,"offset":2334},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":73,"column":26,"offset":2334},"end":{"line":74,"column":1,"offset":2335},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":74,"column":1,"offset":2335},"end":{"line":74,"column":5,"offset":2339},"indent":[]}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer. \n","position":{"start":{"line":74,"column":5,"offset":2339},"end":{"line":76,"column":1,"offset":2457},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":76,"column":1,"offset":2457},"end":{"line":76,"column":5,"offset":2461},"indent":[]}},{"type":"text","value":"\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value. \n","position":{"start":{"line":76,"column":5,"offset":2461},"end":{"line":78,"column":1,"offset":2582},"indent":[1,1]}},{"type":"html","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":78,"column":1,"offset":2582},"end":{"line":78,"column":12,"offset":2593},"indent":[]}},{"type":"text","value":" is a expression and not a primitive value, so it calls ","position":{"start":{"line":78,"column":12,"offset":2593},"end":{"line":78,"column":68,"offset":2649},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":78,"column":68,"offset":2649},"end":{"line":78,"column":79,"offset":2660},"indent":[]}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":78,"column":79,"offset":2660},"end":{"line":78,"column":106,"offset":2687},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":78,"column":106,"offset":2687},"end":{"line":78,"column":109,"offset":2690},"indent":[]}},{"type":"text","value":" is now 7 and both arguments are primitive values, meaning it can calculate the ","position":{"start":{"line":78,"column":109,"offset":2690},"end":{"line":78,"column":189,"offset":2770},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":78,"column":189,"offset":2770},"end":{"line":78,"column":192,"offset":2773},"indent":[]}},{"type":"text","value":" to get 3.","position":{"start":{"line":78,"column":192,"offset":2773},"end":{"line":78,"column":202,"offset":2783},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1871},"end":{"line":78,"column":202,"offset":2783},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Define","position":{"start":{"line":80,"column":8,"offset":2792},"end":{"line":80,"column":14,"offset":2798},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2785},"end":{"line":80,"column":14,"offset":2798},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":81,"column":1,"offset":2799},"end":{"line":81,"column":9,"offset":2807},"indent":[]}},{"type":"text","value":" is an interesting keyword. It can be used to create functions: ","position":{"start":{"line":81,"column":9,"offset":2807},"end":{"line":81,"column":73,"offset":2871},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2799},"end":{"line":81,"column":73,"offset":2871},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":82,"column":1,"offset":2872},"end":{"line":85,"column":4,"offset":2911},"indent":[1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":86,"column":1,"offset":2912},"end":{"line":86,"column":5,"offset":2916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The syntax is very different from other languages, but try to think of ","position":{"start":{"line":88,"column":1,"offset":2918},"end":{"line":88,"column":72,"offset":2989},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":88,"column":72,"offset":2989},"end":{"line":88,"column":80,"offset":2997},"indent":[]}},{"type":"text","value":" as a function itself. \n","position":{"start":{"line":88,"column":80,"offset":2997},"end":{"line":89,"column":1,"offset":3021},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":89,"column":1,"offset":3021},"end":{"line":89,"column":5,"offset":3025},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":89,"column":5,"offset":3025},"end":{"line":90,"column":1,"offset":3026},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":90,"column":1,"offset":3026},"end":{"line":90,"column":5,"offset":3030},"indent":[]}},{"type":"text","value":"\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case ","position":{"start":{"line":90,"column":5,"offset":3030},"end":{"line":91,"column":184,"offset":3214},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":91,"column":184,"offset":3214},"end":{"line":91,"column":187,"offset":3217},"indent":[]}},{"type":"text","value":". \n","position":{"start":{"line":91,"column":187,"offset":3217},"end":{"line":92,"column":1,"offset":3220},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":92,"column":1,"offset":3220},"end":{"line":92,"column":5,"offset":3224},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":92,"column":5,"offset":3224},"end":{"line":93,"column":1,"offset":3225},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":93,"column":1,"offset":3225},"end":{"line":93,"column":5,"offset":3229},"indent":[]}},{"type":"text","value":"\nThe second parameter that ","position":{"start":{"line":93,"column":5,"offset":3229},"end":{"line":94,"column":27,"offset":3256},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":94,"column":27,"offset":3256},"end":{"line":94,"column":35,"offset":3264},"indent":[]}},{"type":"text","value":" takes in is the body that the procedure will call ","position":{"start":{"line":94,"column":35,"offset":3264},"end":{"line":94,"column":86,"offset":3315},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(* x x)</code>","position":{"start":{"line":94,"column":86,"offset":3315},"end":{"line":94,"column":95,"offset":3324},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":94,"column":95,"offset":3324},"end":{"line":94,"column":97,"offset":3326},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2918},"end":{"line":94,"column":97,"offset":3326},"indent":[1,1,1,1,1,1]}},{"type":"html","value":"<br> ","position":{"start":{"line":96,"column":1,"offset":3328},"end":{"line":96,"column":6,"offset":3333},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Define can also be used to store constants:\n","position":{"start":{"line":98,"column":1,"offset":3335},"end":{"line":99,"column":1,"offset":3379},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":99,"column":1,"offset":3379},"end":{"line":99,"column":5,"offset":3383},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":99,"column":5,"offset":3383},"end":{"line":100,"column":1,"offset":3384},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">(define pi 3.14159)</code>","position":{"start":{"line":100,"column":1,"offset":3384},"end":{"line":100,"column":22,"offset":3405},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":100,"column":22,"offset":3405},"end":{"line":101,"column":1,"offset":3406},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":101,"column":1,"offset":3406},"end":{"line":101,"column":5,"offset":3410},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":3335},"end":{"line":101,"column":5,"offset":3410},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.","position":{"start":{"line":103,"column":1,"offset":3412},"end":{"line":103,"column":152,"offset":3563},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3412},"end":{"line":103,"column":152,"offset":3563},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":105,"column":8,"offset":3572},"end":{"line":105,"column":20,"offset":3584},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":3565},"end":{"line":105,"column":20,"offset":3584},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is the first example of a program we see in class:","position":{"start":{"line":107,"column":1,"offset":3586},"end":{"line":107,"column":56,"offset":3641},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3586},"end":{"line":107,"column":56,"offset":3641},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>","position":{"start":{"line":108,"column":1,"offset":3642},"end":{"line":113,"column":4,"offset":3733},"indent":[1,1,1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":114,"column":1,"offset":3734},"end":{"line":114,"column":5,"offset":3738},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As you’ve probably already guessed, ","position":{"start":{"line":116,"column":1,"offset":3740},"end":{"line":116,"column":37,"offset":3776},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":116,"column":37,"offset":3776},"end":{"line":116,"column":41,"offset":3780},"indent":[]}},{"type":"text","value":" is a function. \n","position":{"start":{"line":116,"column":41,"offset":3780},"end":{"line":117,"column":1,"offset":3797},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":117,"column":1,"offset":3797},"end":{"line":117,"column":5,"offset":3801},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":117,"column":5,"offset":3801},"end":{"line":118,"column":1,"offset":3802},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":118,"column":1,"offset":3802},"end":{"line":118,"column":5,"offset":3806},"indent":[]}},{"type":"text","value":"\nThe first parameter is the test case for example if we input fly ","position":{"start":{"line":118,"column":5,"offset":3806},"end":{"line":119,"column":66,"offset":3872},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">(equal? (last wd) &#39;y)</code>","position":{"start":{"line":119,"column":66,"offset":3872},"end":{"line":119,"column":89,"offset":3895},"indent":[]}},{"type":"text","value":" would be true, because fly ends in y. \n","position":{"start":{"line":119,"column":89,"offset":3895},"end":{"line":120,"column":1,"offset":3935},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":120,"column":1,"offset":3935},"end":{"line":120,"column":5,"offset":3939},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":120,"column":5,"offset":3939},"end":{"line":121,"column":1,"offset":3940},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":121,"column":1,"offset":3940},"end":{"line":121,"column":5,"offset":3944},"indent":[]}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":121,"column":5,"offset":3944},"end":{"line":122,"column":21,"offset":3965},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":122,"column":21,"offset":3965},"end":{"line":122,"column":25,"offset":3969},"indent":[]}},{"type":"text","value":" takes in is the expression if the test case is true.\n","position":{"start":{"line":122,"column":25,"offset":3969},"end":{"line":123,"column":1,"offset":4023},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":123,"column":1,"offset":4023},"end":{"line":123,"column":5,"offset":4027},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":123,"column":5,"offset":4027},"end":{"line":124,"column":1,"offset":4028},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":124,"column":1,"offset":4028},"end":{"line":124,"column":5,"offset":4032},"indent":[]}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":124,"column":5,"offset":4032},"end":{"line":125,"column":21,"offset":4053},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":125,"column":21,"offset":4053},"end":{"line":125,"column":25,"offset":4057},"indent":[]}},{"type":"text","value":" takes in is the expression if the test case is false.\n","position":{"start":{"line":125,"column":25,"offset":4057},"end":{"line":126,"column":1,"offset":4112},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":126,"column":1,"offset":4112},"end":{"line":126,"column":5,"offset":4116},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":126,"column":5,"offset":4116},"end":{"line":127,"column":1,"offset":4117},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":127,"column":1,"offset":4117},"end":{"line":127,"column":5,"offset":4121},"indent":[]}},{"type":"text","value":"\nAlso worth noting that names that return a boolean add a ","position":{"start":{"line":127,"column":5,"offset":4121},"end":{"line":128,"column":58,"offset":4179},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">?</code>","position":{"start":{"line":128,"column":58,"offset":4179},"end":{"line":128,"column":61,"offset":4182},"indent":[]}},{"type":"text","value":" to the end to show that the primitive returned is true or false. Like how equal is ","position":{"start":{"line":128,"column":61,"offset":4182},"end":{"line":128,"column":145,"offset":4266},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">equal?</code>","position":{"start":{"line":128,"column":145,"offset":4266},"end":{"line":128,"column":153,"offset":4274},"indent":[]}},{"type":"text","value":" in the code block above.","position":{"start":{"line":128,"column":153,"offset":4274},"end":{"line":128,"column":178,"offset":4299},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3740},"end":{"line":128,"column":178,"offset":4299},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L02","position":{"start":{"line":130,"column":7,"offset":4307},"end":{"line":130,"column":10,"offset":4310},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":4301},"end":{"line":130,"column":10,"offset":4310},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Recursion","position":{"start":{"line":132,"column":8,"offset":4319},"end":{"line":132,"column":17,"offset":4328},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":4312},"end":{"line":132,"column":17,"offset":4328},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":133,"column":1,"offset":4329},"end":{"line":144,"column":4,"offset":4528},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":145,"column":1,"offset":4529},"end":{"line":145,"column":5,"offset":4533},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n","position":{"start":{"line":147,"column":1,"offset":4535},"end":{"line":148,"column":1,"offset":4751},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":148,"column":1,"offset":4751},"end":{"line":148,"column":5,"offset":4755},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":148,"column":5,"offset":4755},"end":{"line":149,"column":1,"offset":4756},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":149,"column":1,"offset":4756},"end":{"line":149,"column":5,"offset":4760},"indent":[]}},{"type":"text","value":"\nNotice in the above example from lecture the function calls pigl until ","position":{"start":{"line":149,"column":5,"offset":4760},"end":{"line":150,"column":72,"offset":4832},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":150,"column":72,"offset":4832},"end":{"line":150,"column":81,"offset":4841},"indent":[]}},{"type":"text","value":" is equal to true.\n","position":{"start":{"line":150,"column":81,"offset":4841},"end":{"line":151,"column":1,"offset":4860},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":151,"column":1,"offset":4860},"end":{"line":151,"column":5,"offset":4864},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":151,"column":5,"offset":4864},"end":{"line":152,"column":1,"offset":4865},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":152,"column":1,"offset":4865},"end":{"line":152,"column":5,"offset":4869},"indent":[]}},{"type":"text","value":"\nLets say ","position":{"start":{"line":152,"column":5,"offset":4869},"end":{"line":153,"column":10,"offset":4879},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":153,"column":10,"offset":4879},"end":{"line":153,"column":16,"offset":4885},"indent":[]}},{"type":"text","value":" gets called with ","position":{"start":{"line":153,"column":16,"offset":4885},"end":{"line":153,"column":34,"offset":4903},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">scheme</code>","position":{"start":{"line":153,"column":34,"offset":4903},"end":{"line":153,"column":42,"offset":4911},"indent":[]}},{"type":"text","value":".\nThe conditional checks ","position":{"start":{"line":153,"column":42,"offset":4911},"end":{"line":154,"column":24,"offset":4936},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":154,"column":24,"offset":4936},"end":{"line":154,"column":33,"offset":4945},"indent":[]}},{"type":"text","value":" which checks the first letter in the word to see if it is a vowel. Since ","position":{"start":{"line":154,"column":33,"offset":4945},"end":{"line":154,"column":107,"offset":5019},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":154,"column":107,"offset":5019},"end":{"line":154,"column":116,"offset":5028},"indent":[]}},{"type":"text","value":" is false because ","position":{"start":{"line":154,"column":116,"offset":5028},"end":{"line":154,"column":134,"offset":5046},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":154,"column":134,"offset":5046},"end":{"line":154,"column":137,"offset":5049},"indent":[]}},{"type":"text","value":" isn’t a vowel it calls ","position":{"start":{"line":154,"column":137,"offset":5049},"end":{"line":154,"column":161,"offset":5073},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":154,"column":161,"offset":5073},"end":{"line":154,"column":167,"offset":5079},"indent":[]}},{"type":"text","value":" again with the argument ","position":{"start":{"line":154,"column":167,"offset":5079},"end":{"line":154,"column":192,"offset":5104},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">chemes</code>","position":{"start":{"line":154,"column":192,"offset":5104},"end":{"line":154,"column":200,"offset":5112},"indent":[]}},{"type":"text","value":". This is because ","position":{"start":{"line":154,"column":200,"offset":5112},"end":{"line":154,"column":218,"offset":5130},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">word</code>","position":{"start":{"line":154,"column":218,"offset":5130},"end":{"line":154,"column":224,"offset":5136},"indent":[]}},{"type":"text","value":" takes the arguments ","position":{"start":{"line":154,"column":224,"offset":5136},"end":{"line":154,"column":245,"offset":5157},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cheme</code>","position":{"start":{"line":154,"column":245,"offset":5157},"end":{"line":154,"column":252,"offset":5164},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":154,"column":252,"offset":5164},"end":{"line":154,"column":257,"offset":5169},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":154,"column":257,"offset":5169},"end":{"line":154,"column":260,"offset":5172},"indent":[]}},{"type":"text","value":" and adds them together. ","position":{"start":{"line":154,"column":260,"offset":5172},"end":{"line":154,"column":285,"offset":5197},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":154,"column":285,"offset":5197},"end":{"line":154,"column":291,"offset":5203},"indent":[]}},{"type":"text","value":" gets called repeatedly until \nit is called with a vowel as the first letter. When the first letter is a vowel the expression ","position":{"start":{"line":154,"column":291,"offset":5203},"end":{"line":155,"column":96,"offset":5329},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">(word wd &#39;ay)</code>","position":{"start":{"line":155,"column":96,"offset":5329},"end":{"line":155,"column":111,"offset":5344},"indent":[]}},{"type":"text","value":" is ran and the result is a primitive which means the procedure stops. ","position":{"start":{"line":155,"column":111,"offset":5344},"end":{"line":155,"column":182,"offset":5415},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":4535},"end":{"line":155,"column":182,"offset":5415},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":157,"column":8,"offset":5424},"end":{"line":157,"column":19,"offset":5435},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":5417},"end":{"line":157,"column":19,"offset":5435},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Big Picture: ","position":{"start":{"line":158,"column":1,"offset":5436},"end":{"line":158,"column":14,"offset":5449},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":5436},"end":{"line":158,"column":14,"offset":5449},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>","position":{"start":{"line":159,"column":1,"offset":5450},"end":{"line":174,"column":4,"offset":5865},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":175,"column":1,"offset":5866},"end":{"line":175,"column":5,"offset":5870},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that can be referenced as a whole.","position":{"start":{"line":177,"column":1,"offset":5872},"end":{"line":177,"column":141,"offset":6012},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":5872},"end":{"line":177,"column":141,"offset":6012},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Functional Programming","position":{"start":{"line":179,"column":8,"offset":6021},"end":{"line":179,"column":30,"offset":6043},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":6014},"end":{"line":179,"column":30,"offset":6043},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With the introduction of multi-core processers, parallelism has helped functional programming make a comeback. If everything is a function you won’t run into race conditions created by dependencies.","position":{"start":{"line":180,"column":1,"offset":6044},"end":{"line":180,"column":199,"offset":6242},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":6044},"end":{"line":180,"column":199,"offset":6242},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Function vs. Procedure","position":{"start":{"line":182,"column":8,"offset":6251},"end":{"line":182,"column":30,"offset":6273},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":6244},"end":{"line":182,"column":30,"offset":6273},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Two functions are the same if they give the same output with given inputs.\n","position":{"start":{"line":184,"column":1,"offset":6275},"end":{"line":185,"column":1,"offset":6350},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":185,"column":1,"offset":6350},"end":{"line":185,"column":5,"offset":6354},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":185,"column":5,"offset":6354},"end":{"line":186,"column":1,"offset":6355},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":186,"column":1,"offset":6355},"end":{"line":186,"column":5,"offset":6359},"indent":[]}},{"type":"text","value":"\nA procedure is a sequence of steps for computing a function.\n","position":{"start":{"line":186,"column":5,"offset":6359},"end":{"line":188,"column":1,"offset":6421},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":188,"column":1,"offset":6421},"end":{"line":188,"column":5,"offset":6425},"indent":[]}},{"type":"break","position":{"start":{"line":188,"column":5,"offset":6425},"end":{"line":189,"column":1,"offset":6428},"indent":[1]}},{"type":"text","value":"Therefore ","position":{"start":{"line":189,"column":1,"offset":6428},"end":{"line":189,"column":11,"offset":6438},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">2x + 6</code>","position":{"start":{"line":189,"column":11,"offset":6438},"end":{"line":189,"column":19,"offset":6446},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":189,"column":19,"offset":6446},"end":{"line":189,"column":24,"offset":6451},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">2(x + 3)</code>","position":{"start":{"line":189,"column":24,"offset":6451},"end":{"line":189,"column":34,"offset":6461},"indent":[]}},{"type":"text","value":" are the same function but different procedures.\n","position":{"start":{"line":189,"column":34,"offset":6461},"end":{"line":190,"column":1,"offset":6510},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":190,"column":1,"offset":6510},"end":{"line":190,"column":5,"offset":6514},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":6275},"end":{"line":190,"column":5,"offset":6514},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Cond","position":{"start":{"line":192,"column":8,"offset":6523},"end":{"line":192,"column":12,"offset":6527},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":6516},"end":{"line":192,"column":12,"offset":6527},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (buzz n) \n    (cond ((equal? (remainder n 7) 0) &#39;buzz)\n    ((member? 7 n) &#39;buzz)\n    (else n)))</code></pre></div>","position":{"start":{"line":193,"column":1,"offset":6528},"end":{"line":198,"column":4,"offset":6639},"indent":[1,1,1,1,1]}},{"type":"html","value":"<br>\n<br>","position":{"start":{"line":199,"column":1,"offset":6640},"end":{"line":200,"column":5,"offset":6649},"indent":[1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":202,"column":1,"offset":6651},"end":{"line":202,"column":7,"offset":6657},"indent":[]}},{"type":"text","value":" allows for multiple test cases, and will return \nthe first clause that is true. \n","position":{"start":{"line":202,"column":7,"offset":6657},"end":{"line":204,"column":1,"offset":6739},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":204,"column":1,"offset":6739},"end":{"line":204,"column":5,"offset":6743},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":204,"column":5,"offset":6743},"end":{"line":205,"column":1,"offset":6744},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":205,"column":1,"offset":6744},"end":{"line":205,"column":5,"offset":6748},"indent":[]}},{"type":"text","value":"\nLets try ","position":{"start":{"line":205,"column":5,"offset":6748},"end":{"line":206,"column":10,"offset":6758},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">14</code>","position":{"start":{"line":206,"column":10,"offset":6758},"end":{"line":206,"column":14,"offset":6762},"indent":[]}},{"type":"text","value":". Since ","position":{"start":{"line":206,"column":14,"offset":6762},"end":{"line":206,"column":22,"offset":6770},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">14 / 7</code>","position":{"start":{"line":206,"column":22,"offset":6770},"end":{"line":206,"column":30,"offset":6778},"indent":[]}},{"type":"text","value":" has a remainder of ","position":{"start":{"line":206,"column":30,"offset":6778},"end":{"line":206,"column":50,"offset":6798},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":206,"column":50,"offset":6798},"end":{"line":206,"column":53,"offset":6801},"indent":[]}},{"type":"text","value":" the first clause is met and returns ","position":{"start":{"line":206,"column":53,"offset":6801},"end":{"line":206,"column":90,"offset":6838},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":206,"column":90,"offset":6838},"end":{"line":206,"column":96,"offset":6844},"indent":[]}},{"type":"text","value":". \n","position":{"start":{"line":206,"column":96,"offset":6844},"end":{"line":207,"column":1,"offset":6847},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":207,"column":1,"offset":6847},"end":{"line":207,"column":5,"offset":6851},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":207,"column":5,"offset":6851},"end":{"line":208,"column":1,"offset":6852},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":208,"column":1,"offset":6852},"end":{"line":208,"column":5,"offset":6856},"indent":[]}},{"type":"text","value":"\nNow Lets try ","position":{"start":{"line":208,"column":5,"offset":6856},"end":{"line":209,"column":14,"offset":6870},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":209,"column":14,"offset":6870},"end":{"line":209,"column":18,"offset":6874},"indent":[]}},{"type":"text","value":". The first clause is not met, and therefore goes onto the next clause. ","position":{"start":{"line":209,"column":18,"offset":6874},"end":{"line":209,"column":90,"offset":6946},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":209,"column":90,"offset":6946},"end":{"line":209,"column":94,"offset":6950},"indent":[]}},{"type":"text","value":" does have a 7 inside of it so ","position":{"start":{"line":209,"column":94,"offset":6950},"end":{"line":209,"column":125,"offset":6981},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":209,"column":125,"offset":6981},"end":{"line":209,"column":131,"offset":6987},"indent":[]}},{"type":"text","value":" is returned. \n","position":{"start":{"line":209,"column":131,"offset":6987},"end":{"line":210,"column":1,"offset":7002},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":210,"column":1,"offset":7002},"end":{"line":210,"column":5,"offset":7006},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":210,"column":5,"offset":7006},"end":{"line":211,"column":1,"offset":7007},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":211,"column":1,"offset":7007},"end":{"line":211,"column":5,"offset":7011},"indent":[]}},{"type":"text","value":"\nNow lets try ","position":{"start":{"line":211,"column":5,"offset":7011},"end":{"line":212,"column":14,"offset":7025},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":212,"column":14,"offset":7025},"end":{"line":212,"column":18,"offset":7029},"indent":[]}},{"type":"text","value":". The remainder is ","position":{"start":{"line":212,"column":18,"offset":7029},"end":{"line":212,"column":37,"offset":7048},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":212,"column":37,"offset":7048},"end":{"line":212,"column":40,"offset":7051},"indent":[]}},{"type":"text","value":" so the first clause is not met, and ","position":{"start":{"line":212,"column":40,"offset":7051},"end":{"line":212,"column":77,"offset":7088},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":212,"column":77,"offset":7088},"end":{"line":212,"column":81,"offset":7092},"indent":[]}},{"type":"text","value":"  does not have a ","position":{"start":{"line":212,"column":81,"offset":7092},"end":{"line":212,"column":99,"offset":7110},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":212,"column":99,"offset":7110},"end":{"line":212,"column":102,"offset":7113},"indent":[]}},{"type":"text","value":" inside of it so the catch all ","position":{"start":{"line":212,"column":102,"offset":7113},"end":{"line":212,"column":133,"offset":7144},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":212,"column":133,"offset":7144},"end":{"line":212,"column":139,"offset":7150},"indent":[]}},{"type":"text","value":" keyword returns the number ","position":{"start":{"line":212,"column":139,"offset":7150},"end":{"line":212,"column":167,"offset":7178},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":212,"column":167,"offset":7178},"end":{"line":212,"column":171,"offset":7182},"indent":[]}},{"type":"text","value":".\n","position":{"start":{"line":212,"column":171,"offset":7182},"end":{"line":213,"column":1,"offset":7184},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":213,"column":1,"offset":7184},"end":{"line":213,"column":5,"offset":7188},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":213,"column":5,"offset":7188},"end":{"line":214,"column":1,"offset":7189},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":214,"column":1,"offset":7189},"end":{"line":214,"column":5,"offset":7193},"indent":[]}},{"type":"text","value":"\nImportant to note:\n","position":{"start":{"line":214,"column":5,"offset":7193},"end":{"line":216,"column":1,"offset":7213},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":216,"column":1,"offset":7213},"end":{"line":216,"column":5,"offset":7217},"indent":[]}},{"type":"text","value":"\nIf a ","position":{"start":{"line":216,"column":5,"offset":7217},"end":{"line":217,"column":6,"offset":7223},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":217,"column":6,"offset":7223},"end":{"line":217,"column":12,"offset":7229},"indent":[]}},{"type":"text","value":" does not have an ","position":{"start":{"line":217,"column":12,"offset":7229},"end":{"line":217,"column":30,"offset":7247},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":217,"column":30,"offset":7247},"end":{"line":217,"column":36,"offset":7253},"indent":[]}},{"type":"text","value":" statement it will return ","position":{"start":{"line":217,"column":36,"offset":7253},"end":{"line":217,"column":62,"offset":7279},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">unspecified</code>","position":{"start":{"line":217,"column":62,"offset":7279},"end":{"line":217,"column":75,"offset":7292},"indent":[]}},{"type":"text","value":", which can be different depending on interpreted, so always have an else statement.","position":{"start":{"line":217,"column":75,"offset":7292},"end":{"line":217,"column":159,"offset":7376},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":6651},"end":{"line":217,"column":159,"offset":7376},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Applicative Order vs Normal Order","position":{"start":{"line":219,"column":8,"offset":7385},"end":{"line":219,"column":41,"offset":7418},"indent":[]}}],"position":{"start":{"line":219,"column":1,"offset":7378},"end":{"line":219,"column":41,"offset":7418},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (f a b) (+ (g a) b))\n(def (g x) (* 3 x))\n\n(f (+ 2 3) (- 15 6))</code></pre></div>","position":{"start":{"line":220,"column":1,"offset":7419},"end":{"line":225,"column":4,"offset":7494},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Applicative Order:\n","position":{"start":{"line":226,"column":1,"offset":7495},"end":{"line":227,"column":1,"offset":7514},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":227,"column":1,"offset":7514},"end":{"line":227,"column":5,"offset":7518},"indent":[]}},{"type":"text","value":"\n    evaluates the sub expressions until they are primitive values, then passes the primitive results back up to the parent function.\n    ","position":{"start":{"line":227,"column":5,"offset":7518},"end":{"line":229,"column":5,"offset":7656},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":229,"column":5,"offset":7656},"end":{"line":229,"column":9,"offset":7660},"indent":[]}},{"type":"text","value":"\n    ","position":{"start":{"line":229,"column":9,"offset":7660},"end":{"line":230,"column":5,"offset":7665},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":230,"column":5,"offset":7665},"end":{"line":230,"column":27,"offset":7687},"indent":[]}},{"type":"text","value":"\n    ","position":{"start":{"line":230,"column":27,"offset":7687},"end":{"line":231,"column":5,"offset":7692},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":231,"column":5,"offset":7692},"end":{"line":231,"column":9,"offset":7696},"indent":[]}},{"type":"text","value":"\n    ","position":{"start":{"line":231,"column":9,"offset":7696},"end":{"line":232,"column":5,"offset":7701},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">2 + 3</code>","position":{"start":{"line":232,"column":5,"offset":7701},"end":{"line":232,"column":12,"offset":7708},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":232,"column":12,"offset":7708},"end":{"line":232,"column":17,"offset":7713},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">15 - 6</code>","position":{"start":{"line":232,"column":17,"offset":7713},"end":{"line":232,"column":25,"offset":7721},"indent":[]}},{"type":"text","value":" will be evaluated before the outside ","position":{"start":{"line":232,"column":25,"offset":7721},"end":{"line":232,"column":63,"offset":7759},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":232,"column":63,"offset":7759},"end":{"line":232,"column":66,"offset":7762},"indent":[]}},{"type":"text","value":" is evaluated. Then ","position":{"start":{"line":232,"column":66,"offset":7762},"end":{"line":232,"column":86,"offset":7782},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":232,"column":86,"offset":7782},"end":{"line":232,"column":89,"offset":7785},"indent":[]}},{"type":"text","value":" will be called with ","position":{"start":{"line":232,"column":89,"offset":7785},"end":{"line":232,"column":110,"offset":7806},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(f 5 9)</code>","position":{"start":{"line":232,"column":110,"offset":7806},"end":{"line":232,"column":119,"offset":7815},"indent":[]}},{"type":"text","value":".\n","position":{"start":{"line":232,"column":119,"offset":7815},"end":{"line":233,"column":1,"offset":7817},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":233,"column":1,"offset":7817},"end":{"line":233,"column":5,"offset":7821},"indent":[]}},{"type":"text","value":"\nNormal Order: \n","position":{"start":{"line":233,"column":5,"offset":7821},"end":{"line":235,"column":1,"offset":7837},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":235,"column":1,"offset":7837},"end":{"line":235,"column":5,"offset":7841},"indent":[]}},{"type":"text","value":"\n    evaluates the outsides first, but instead of passing primitive values it passes the expressions. \n    ","position":{"start":{"line":235,"column":5,"offset":7841},"end":{"line":237,"column":5,"offset":7948},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":237,"column":5,"offset":7948},"end":{"line":237,"column":9,"offset":7952},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":237,"column":9,"offset":7952},"end":{"line":238,"column":1,"offset":7953},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":238,"column":1,"offset":7953},"end":{"line":238,"column":23,"offset":7975},"indent":[]}},{"type":"text","value":" turns into ","position":{"start":{"line":238,"column":23,"offset":7975},"end":{"line":238,"column":35,"offset":7987},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(+ (g (+ 2 3)) (- 15 6))</code>","position":{"start":{"line":238,"column":35,"offset":7987},"end":{"line":238,"column":61,"offset":8013},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":238,"column":61,"offset":8013},"end":{"line":239,"column":1,"offset":8014},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":239,"column":1,"offset":8014},"end":{"line":239,"column":5,"offset":8018},"indent":[]}},{"type":"text","value":"\nNow ","position":{"start":{"line":239,"column":5,"offset":8018},"end":{"line":240,"column":5,"offset":8023},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":240,"column":5,"offset":8023},"end":{"line":240,"column":8,"offset":8026},"indent":[]}},{"type":"text","value":" is done and the next expression can be evaluated.","position":{"start":{"line":240,"column":8,"offset":8026},"end":{"line":240,"column":58,"offset":8076},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":7495},"end":{"line":240,"column":58,"offset":8076},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Possible Problem:\n","position":{"start":{"line":242,"column":1,"offset":8078},"end":{"line":243,"column":1,"offset":8096},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":243,"column":1,"offset":8096},"end":{"line":243,"column":5,"offset":8100},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":8078},"end":{"line":243,"column":5,"offset":8100},"indent":[1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (zero z) (- x x))</code></pre></div>","position":{"start":{"line":244,"column":1,"offset":8101},"end":{"line":246,"column":4,"offset":8131},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"applicative ","position":{"start":{"line":247,"column":1,"offset":8132},"end":{"line":247,"column":13,"offset":8144},"indent":[]}}],"position":{"start":{"line":247,"column":1,"offset":8132},"end":{"line":247,"column":13,"offset":8144},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(random 10) ==&gt; 8\n(zero 8) ---&gt;\n(- 8 8) ==&gt; 0\n0</code></pre></div>","position":{"start":{"line":248,"column":1,"offset":8145},"end":{"line":254,"column":4,"offset":8224},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"normal ","position":{"start":{"line":255,"column":1,"offset":8225},"end":{"line":255,"column":8,"offset":8232},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":8225},"end":{"line":255,"column":8,"offset":8232},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(+ (random 10) (random 10)) ==&gt; \n    (random 10) ==&gt; 8\n    (random 10) ==&gt; 1\n(- 8 1) ==&gt; 7\n7</code></pre></div>","position":{"start":{"line":256,"column":1,"offset":8233},"end":{"line":263,"column":4,"offset":8357},"indent":[1,1,1,1,1,1,1]}},{"type":"html","value":"<br>\n<br>","position":{"start":{"line":264,"column":1,"offset":8358},"end":{"line":265,"column":5,"offset":8367},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Since the ","position":{"start":{"line":267,"column":1,"offset":8369},"end":{"line":267,"column":11,"offset":8379},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(random 10)</code>","position":{"start":{"line":267,"column":11,"offset":8379},"end":{"line":267,"column":24,"offset":8392},"indent":[]}},{"type":"text","value":" is split into 2 different function alls in normal order you get different results.","position":{"start":{"line":267,"column":24,"offset":8392},"end":{"line":267,"column":107,"offset":8475},"indent":[]}}],"position":{"start":{"line":267,"column":1,"offset":8369},"end":{"line":267,"column":107,"offset":8475},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L03","position":{"start":{"line":269,"column":7,"offset":8483},"end":{"line":269,"column":10,"offset":8486},"indent":[]}}],"position":{"start":{"line":269,"column":1,"offset":8477},"end":{"line":269,"column":10,"offset":8486},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"L04","position":{"start":{"line":270,"column":7,"offset":8493},"end":{"line":270,"column":10,"offset":8496},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":8487},"end":{"line":270,"column":10,"offset":8496},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"LABS","position":{"start":{"line":272,"column":6,"offset":8503},"end":{"line":272,"column":10,"offset":8507},"indent":[]}}],"position":{"start":{"line":272,"column":1,"offset":8498},"end":{"line":272,"column":10,"offset":8507},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"Lab 1A","position":{"start":{"line":273,"column":7,"offset":8514},"end":{"line":273,"column":13,"offset":8520},"indent":[]}}],"position":{"start":{"line":273,"column":1,"offset":8508},"end":{"line":273,"column":13,"offset":8520},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first problem for the lab was to modify the ","position":{"start":{"line":274,"column":1,"offset":8521},"end":{"line":274,"column":49,"offset":8569},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">plural</code>","position":{"start":{"line":274,"column":49,"offset":8569},"end":{"line":274,"column":57,"offset":8577},"indent":[]}},{"type":"text","value":" program to handle a word ending in y, but has a vowel in front of it (boy).","position":{"start":{"line":274,"column":57,"offset":8577},"end":{"line":274,"column":133,"offset":8653},"indent":[]}}],"position":{"start":{"line":274,"column":1,"offset":8521},"end":{"line":274,"column":133,"offset":8653},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t\t(if (vowel? (last (bl wd)))\n\t\t(word wd &#39;s)\n\t\t(word (bl wd) &#39;ies))\n\t(word wd &#39;s)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":275,"column":1,"offset":8654},"end":{"line":285,"column":4,"offset":8849},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":286,"column":1,"offset":8850},"end":{"line":286,"column":5,"offset":8854},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I handled this by adding a conditional that checks for the second to last letter.\n","position":{"start":{"line":289,"column":1,"offset":8857},"end":{"line":290,"column":1,"offset":8939},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":290,"column":1,"offset":8939},"end":{"line":290,"column":5,"offset":8943},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":290,"column":5,"offset":8943},"end":{"line":291,"column":1,"offset":8944},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":291,"column":1,"offset":8944},"end":{"line":291,"column":5,"offset":8948},"indent":[]}},{"type":"text","value":"\nThe second assgnment was:","position":{"start":{"line":291,"column":5,"offset":8948},"end":{"line":292,"column":26,"offset":8974},"indent":[1]}}],"position":{"start":{"line":289,"column":1,"offset":8857},"end":{"line":292,"column":26,"offset":8974},"indent":[1,1,1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Define a procedure that takes three numbers as arguments and returns the sum of\nthe squares of the two larger numbers.</code></pre></div>","position":{"start":{"line":293,"column":1,"offset":8975},"end":{"line":298,"column":4,"offset":9103},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"My Solution: ","position":{"start":{"line":299,"column":1,"offset":9104},"end":{"line":299,"column":14,"offset":9117},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":9104},"end":{"line":299,"column":14,"offset":9117},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (twoLargerSums a b c)\n    (if (&gt;= a b)\n        (if (&gt;= b c)\n            (+ (square a) (square b))\n            (+ (square a) (square c)))\n        (if (&gt;= a c)\n            (+ (square a) (square b))\n            (+ (square b) (square c))))\n)\n\n(define (square x)\n(* x x))</code></pre></div>","position":{"start":{"line":301,"column":1,"offset":9119},"end":{"line":314,"column":4,"offset":9401},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","value":"<br>\n<br>","position":{"start":{"line":316,"column":1,"offset":9403},"end":{"line":317,"column":5,"offset":9412},"indent":[1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"Lab 1B","position":{"start":{"line":320,"column":7,"offset":9421},"end":{"line":320,"column":13,"offset":9427},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":9415},"end":{"line":320,"column":13,"offset":9427},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":320,"column":13,"offset":9427}}}}