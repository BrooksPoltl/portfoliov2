{"expireTime":9007200842255762000,"key":"transformer-remark-markdown-html-ast-6d9acda195a37c0cb7b2cfe0ebf40049-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54}}},{"type":"element","tagName":"a","properties":{"href":"https://teachyourselfcs.com/"},"children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70}}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101}}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153}}},{"type":"element","tagName":"a","properties":{"href":"http://localhost:8000/teachyourselfcs/programming/00:getting-started/"},"children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158}}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":128,"offset":230}}},{"type":"text","value":".","position":{"start":{"line":2,"column":128,"offset":230},"end":{"line":2,"column":129,"offset":231}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":129,"offset":231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"INTRO","position":{"start":{"line":4,"column":6,"offset":238},"end":{"line":4,"column":11,"offset":243}}}],"position":{"start":{"line":4,"column":1,"offset":233},"end":{"line":4,"column":11,"offset":243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I will be following the Summer 2010 ","position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":5,"column":37,"offset":280}}},{"type":"element","tagName":"a","properties":{"href":"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html"},"children":[{"type":"text","value":"Calendar","position":{"start":{"line":5,"column":38,"offset":281},"end":{"line":5,"column":46,"offset":289}}}],"position":{"start":{"line":5,"column":37,"offset":280},"end":{"line":5,"column":101,"offset":344}}},{"type":"text","value":"\nso each week will consist of 4 lectures and 2 labs.","position":{"start":{"line":5,"column":101,"offset":344},"end":{"line":6,"column":52,"offset":396}}}],"position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":6,"column":52,"offset":396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"READINGS","position":{"start":{"line":8,"column":6,"offset":403},"end":{"line":8,"column":14,"offset":411}}}],"position":{"start":{"line":8,"column":1,"offset":398},"end":{"line":8,"column":14,"offset":411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.1 The Elements of Programming","position":{"start":{"line":9,"column":7,"offset":418},"end":{"line":9,"column":38,"offset":449}}}],"position":{"start":{"line":9,"column":1,"offset":412},"end":{"line":9,"column":38,"offset":449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The section starts off saying that there are 3 mechanisms that languages utilize to simplify complex ideas:\n","position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":11,"column":1,"offset":558}}},{"type":"raw","value":"<br>","position":{"start":{"line":11,"column":1,"offset":558},"end":{"line":11,"column":5,"offset":562}}},{"type":"text","value":"\nprimitive expressions: simplest entities within a language.\n","position":{"start":{"line":11,"column":5,"offset":562},"end":{"line":13,"column":1,"offset":623}}},{"type":"raw","value":"<br>","position":{"start":{"line":13,"column":1,"offset":623},"end":{"line":13,"column":5,"offset":627}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":5,"offset":627},"end":{"line":14,"column":1,"offset":628}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":1,"offset":628},"end":{"line":14,"column":5,"offset":632}}},{"type":"text","value":"\nmeans of combination: The ability to combine simple entities.\n","position":{"start":{"line":14,"column":5,"offset":632},"end":{"line":16,"column":1,"offset":696}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":1,"offset":696},"end":{"line":16,"column":5,"offset":700}}},{"type":"text","value":"\n","position":{"start":{"line":16,"column":5,"offset":700},"end":{"line":17,"column":1,"offset":701}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":1,"offset":701},"end":{"line":17,"column":5,"offset":705}}},{"type":"text","value":"\nmeans of abstraction: The ability to name and manipulate combined elements.\n","position":{"start":{"line":17,"column":5,"offset":705},"end":{"line":19,"column":1,"offset":782}}},{"type":"raw","value":"<br>","position":{"start":{"line":19,"column":1,"offset":782},"end":{"line":19,"column":5,"offset":786}}},{"type":"text","value":"\n","position":{"start":{"line":19,"column":5,"offset":786},"end":{"line":20,"column":1,"offset":787}}},{"type":"raw","value":"<br>","position":{"start":{"line":20,"column":1,"offset":787},"end":{"line":20,"column":5,"offset":791}}},{"type":"text","value":"\nBreaking down a compound expression:\n","position":{"start":{"line":20,"column":5,"offset":791},"end":{"line":22,"column":1,"offset":829}}},{"type":"raw","value":"<br>","position":{"start":{"line":22,"column":1,"offset":829},"end":{"line":22,"column":5,"offset":833}}},{"type":"text","value":"\ncombination: ","position":{"start":{"line":22,"column":5,"offset":833},"end":{"line":23,"column":14,"offset":847}}},{"type":"raw","value":"<code class=\"language-text\">(+ 137 349)</code>","position":{"start":{"line":23,"column":14,"offset":847},"end":{"line":23,"column":27,"offset":860}}},{"type":"text","value":"\n","position":{"start":{"line":23,"column":27,"offset":860},"end":{"line":24,"column":1,"offset":861}}},{"type":"raw","value":"<br>","position":{"start":{"line":24,"column":1,"offset":861},"end":{"line":24,"column":5,"offset":865}}},{"type":"text","value":"\noperator: ","position":{"start":{"line":24,"column":5,"offset":865},"end":{"line":25,"column":11,"offset":876}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":25,"column":11,"offset":876},"end":{"line":25,"column":14,"offset":879}}},{"type":"text","value":"\n","position":{"start":{"line":25,"column":14,"offset":879},"end":{"line":26,"column":1,"offset":880}}},{"type":"raw","value":"<br>","position":{"start":{"line":26,"column":1,"offset":880},"end":{"line":26,"column":5,"offset":884}}},{"type":"text","value":"\noperands: ","position":{"start":{"line":26,"column":5,"offset":884},"end":{"line":27,"column":11,"offset":895}}},{"type":"raw","value":"<code class=\"language-text\">137</code>","position":{"start":{"line":27,"column":11,"offset":895},"end":{"line":27,"column":16,"offset":900}}},{"type":"text","value":" ","position":{"start":{"line":27,"column":16,"offset":900},"end":{"line":27,"column":17,"offset":901}}},{"type":"raw","value":"<code class=\"language-text\">349</code>","position":{"start":{"line":27,"column":17,"offset":901},"end":{"line":27,"column":22,"offset":906}}},{"type":"text","value":"\n","position":{"start":{"line":27,"column":22,"offset":906},"end":{"line":28,"column":1,"offset":907}}},{"type":"raw","value":"<br>","position":{"start":{"line":28,"column":1,"offset":907},"end":{"line":28,"column":5,"offset":911}}},{"type":"text","value":"\n","position":{"start":{"line":28,"column":5,"offset":911},"end":{"line":29,"column":1,"offset":912}}},{"type":"raw","value":"<br>","position":{"start":{"line":29,"column":1,"offset":912},"end":{"line":29,"column":5,"offset":916}}},{"type":"text","value":"\nThe interpreter runs in a “read-eval-print” loop. That is why it is not necessary to print stuff out like in other languages.\n","position":{"start":{"line":29,"column":5,"offset":916},"end":{"line":31,"column":1,"offset":1043}}},{"type":"raw","value":"<br>","position":{"start":{"line":31,"column":1,"offset":1043},"end":{"line":31,"column":5,"offset":1047}}},{"type":"text","value":"\n","position":{"start":{"line":31,"column":5,"offset":1047},"end":{"line":32,"column":1,"offset":1048}}},{"type":"raw","value":"<br>","position":{"start":{"line":32,"column":1,"offset":1048},"end":{"line":32,"column":5,"offset":1052}}},{"type":"text","value":"\nEnvironment: The name-object pairs the interpreter keeps in memory.\n","position":{"start":{"line":32,"column":5,"offset":1052},"end":{"line":34,"column":1,"offset":1121}}},{"type":"raw","value":"<br>","position":{"start":{"line":34,"column":1,"offset":1121},"end":{"line":34,"column":5,"offset":1125}}},{"type":"text","value":"\n","position":{"start":{"line":34,"column":5,"offset":1125},"end":{"line":35,"column":1,"offset":1126}}},{"type":"raw","value":"<br>","position":{"start":{"line":35,"column":1,"offset":1126},"end":{"line":35,"column":5,"offset":1130}}}],"position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":35,"column":5,"offset":1130}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedures can be used to build on top of other Compound Procedures:\n","position":{"start":{"line":37,"column":1,"offset":1132},"end":{"line":38,"column":1,"offset":1210}}},{"type":"raw","value":"<br>","position":{"start":{"line":38,"column":1,"offset":1210},"end":{"line":38,"column":5,"offset":1214}}}],"position":{"start":{"line":37,"column":1,"offset":1132},"end":{"line":38,"column":5,"offset":1214}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (sum-of-squares x y)\n(+ (square x) (square y))</code></pre></div>","position":{"start":{"line":39,"column":1,"offset":1215},"end":{"line":42,"column":4,"offset":1277}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":43,"column":1,"offset":1278},"end":{"line":43,"column":5,"offset":1282}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedure: procedure that you make out of other procedures.","position":{"start":{"line":45,"column":1,"offset":1284},"end":{"line":45,"column":69,"offset":1352}}}],"position":{"start":{"line":45,"column":1,"offset":1284},"end":{"line":45,"column":69,"offset":1352}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Primitive Procedure: procedure built into the language ex: ","position":{"start":{"line":47,"column":1,"offset":1354},"end":{"line":47,"column":60,"offset":1413}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":47,"column":60,"offset":1413},"end":{"line":47,"column":63,"offset":1416}}},{"type":"text","value":"\n","position":{"start":{"line":47,"column":63,"offset":1416},"end":{"line":48,"column":1,"offset":1417}}},{"type":"raw","value":"<br>","position":{"start":{"line":48,"column":1,"offset":1417},"end":{"line":48,"column":5,"offset":1421}}},{"type":"text","value":"\n","position":{"start":{"line":48,"column":5,"offset":1421},"end":{"line":49,"column":1,"offset":1422}}},{"type":"raw","value":"<br>","position":{"start":{"line":49,"column":1,"offset":1422},"end":{"line":49,"column":5,"offset":1426}}},{"type":"text","value":"\nBoth are used exactly the same.\n","position":{"start":{"line":49,"column":5,"offset":1426},"end":{"line":51,"column":1,"offset":1459}}},{"type":"raw","value":"<br>","position":{"start":{"line":51,"column":1,"offset":1459},"end":{"line":51,"column":5,"offset":1463}}},{"type":"text","value":"\n","position":{"start":{"line":51,"column":5,"offset":1463},"end":{"line":52,"column":1,"offset":1464}}},{"type":"raw","value":"<br>","position":{"start":{"line":52,"column":1,"offset":1464},"end":{"line":52,"column":5,"offset":1468}}},{"type":"text","value":"\nWhen writing programs it is important to write modular code that doesn’t care how the other things are computed, only what is computed.\n","position":{"start":{"line":52,"column":5,"offset":1468},"end":{"line":54,"column":1,"offset":1605}}},{"type":"raw","value":"<br>","position":{"start":{"line":54,"column":1,"offset":1605},"end":{"line":54,"column":5,"offset":1609}}}],"position":{"start":{"line":47,"column":1,"offset":1354},"end":{"line":54,"column":5,"offset":1609}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.2","position":{"start":{"line":56,"column":7,"offset":1617},"end":{"line":56,"column":10,"offset":1620}}}],"position":{"start":{"line":56,"column":1,"offset":1611},"end":{"line":56,"column":10,"offset":1620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.3","position":{"start":{"line":57,"column":7,"offset":1627},"end":{"line":57,"column":10,"offset":1630}}}],"position":{"start":{"line":57,"column":1,"offset":1621},"end":{"line":57,"column":10,"offset":1630}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":59,"column":6,"offset":1637},"end":{"line":59,"column":14,"offset":1645}}}],"position":{"start":{"line":59,"column":1,"offset":1632},"end":{"line":59,"column":14,"offset":1645}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L01","position":{"start":{"line":60,"column":7,"offset":1652},"end":{"line":60,"column":10,"offset":1655}}}],"position":{"start":{"line":60,"column":1,"offset":1646},"end":{"line":60,"column":10,"offset":1655}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":62,"column":8,"offset":1664},"end":{"line":62,"column":30,"offset":1686}}}],"position":{"start":{"line":62,"column":1,"offset":1657},"end":{"line":62,"column":30,"offset":1686}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":64,"column":1,"offset":1688},"end":{"line":65,"column":1,"offset":1832}}},{"type":"raw","value":"<br>","position":{"start":{"line":65,"column":1,"offset":1832},"end":{"line":65,"column":5,"offset":1836}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":65,"column":5,"offset":1836},"end":{"line":65,"column":16,"offset":1847}}},{"type":"raw","value":"<br>","position":{"start":{"line":65,"column":16,"offset":1847},"end":{"line":65,"column":20,"offset":1851}}},{"type":"text","value":"\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n","position":{"start":{"line":65,"column":20,"offset":1851},"end":{"line":67,"column":1,"offset":1995}}},{"type":"raw","value":"<br>","position":{"start":{"line":67,"column":1,"offset":1995},"end":{"line":67,"column":5,"offset":1999}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":67,"column":5,"offset":1999},"end":{"line":67,"column":16,"offset":2010}}},{"type":"raw","value":"<br>","position":{"start":{"line":67,"column":16,"offset":2010},"end":{"line":67,"column":20,"offset":2014}}},{"type":"text","value":"\nNow lets say we want to do something like:  ","position":{"start":{"line":67,"column":20,"offset":2014},"end":{"line":68,"column":45,"offset":2059}}},{"type":"raw","value":"<br>","position":{"start":{"line":68,"column":45,"offset":2059},"end":{"line":68,"column":49,"offset":2063}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 +  3 - 4</code>","position":{"start":{"line":68,"column":49,"offset":2063},"end":{"line":68,"column":65,"offset":2079}}},{"type":"raw","value":"<br>","position":{"start":{"line":68,"column":65,"offset":2079},"end":{"line":68,"column":69,"offset":2083}}},{"type":"text","value":"\nIn Scheme you can simply nest operators:\n","position":{"start":{"line":68,"column":69,"offset":2083},"end":{"line":70,"column":1,"offset":2126}}},{"type":"raw","value":"<br>","position":{"start":{"line":70,"column":1,"offset":2126},"end":{"line":70,"column":5,"offset":2130}}},{"type":"raw","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":70,"column":5,"offset":2130},"end":{"line":70,"column":22,"offset":2147}}},{"type":"raw","value":"<br>","position":{"start":{"line":70,"column":22,"offset":2147},"end":{"line":70,"column":26,"offset":2151}}},{"type":"text","value":"\n","position":{"start":{"line":70,"column":26,"offset":2151},"end":{"line":71,"column":1,"offset":2152}}},{"type":"raw","value":"<br>","position":{"start":{"line":71,"column":1,"offset":2152},"end":{"line":71,"column":5,"offset":2156}}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer.\n","position":{"start":{"line":71,"column":5,"offset":2156},"end":{"line":73,"column":1,"offset":2274}}},{"type":"raw","value":"<br>","position":{"start":{"line":73,"column":1,"offset":2274},"end":{"line":73,"column":5,"offset":2278}}},{"type":"text","value":"\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value.\n","position":{"start":{"line":73,"column":5,"offset":2278},"end":{"line":75,"column":1,"offset":2399}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":75,"column":1,"offset":2399},"end":{"line":75,"column":12,"offset":2410}}},{"type":"text","value":" is a expression and not a primitive value, so it calls ","position":{"start":{"line":75,"column":12,"offset":2410},"end":{"line":75,"column":68,"offset":2466}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":75,"column":68,"offset":2466},"end":{"line":75,"column":79,"offset":2477}}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":75,"column":79,"offset":2477},"end":{"line":75,"column":106,"offset":2504}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":75,"column":106,"offset":2504},"end":{"line":75,"column":109,"offset":2507}}},{"type":"text","value":" is now 7 and both arguments are primitive values, meaning it can calculate the ","position":{"start":{"line":75,"column":109,"offset":2507},"end":{"line":75,"column":189,"offset":2587}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":75,"column":189,"offset":2587},"end":{"line":75,"column":192,"offset":2590}}},{"type":"text","value":" to get 3.","position":{"start":{"line":75,"column":192,"offset":2590},"end":{"line":75,"column":202,"offset":2600}}}],"position":{"start":{"line":64,"column":1,"offset":1688},"end":{"line":75,"column":202,"offset":2600}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Define","position":{"start":{"line":77,"column":8,"offset":2609},"end":{"line":77,"column":14,"offset":2615}}}],"position":{"start":{"line":77,"column":1,"offset":2602},"end":{"line":77,"column":14,"offset":2615}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":78,"column":1,"offset":2616},"end":{"line":78,"column":9,"offset":2624}}},{"type":"text","value":" is an interesting keyword. It can be used to create functions: ","position":{"start":{"line":78,"column":9,"offset":2624},"end":{"line":78,"column":73,"offset":2688}}}],"position":{"start":{"line":78,"column":1,"offset":2616},"end":{"line":78,"column":73,"offset":2688}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":79,"column":1,"offset":2689},"end":{"line":82,"column":4,"offset":2728}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":83,"column":1,"offset":2729},"end":{"line":83,"column":5,"offset":2733}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The syntax is very different from other languages, but try to think of ","position":{"start":{"line":85,"column":1,"offset":2735},"end":{"line":85,"column":72,"offset":2806}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":85,"column":72,"offset":2806},"end":{"line":85,"column":80,"offset":2814}}},{"type":"text","value":" as a function itself.\n","position":{"start":{"line":85,"column":80,"offset":2814},"end":{"line":86,"column":1,"offset":2838}}},{"type":"raw","value":"<br>","position":{"start":{"line":86,"column":1,"offset":2838},"end":{"line":86,"column":5,"offset":2842}}},{"type":"text","value":"\n","position":{"start":{"line":86,"column":5,"offset":2842},"end":{"line":87,"column":1,"offset":2843}}},{"type":"raw","value":"<br>","position":{"start":{"line":87,"column":1,"offset":2843},"end":{"line":87,"column":5,"offset":2847}}},{"type":"text","value":"\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case ","position":{"start":{"line":87,"column":5,"offset":2847},"end":{"line":88,"column":184,"offset":3031}}},{"type":"raw","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":88,"column":184,"offset":3031},"end":{"line":88,"column":187,"offset":3034}}},{"type":"text","value":".\n","position":{"start":{"line":88,"column":187,"offset":3034},"end":{"line":89,"column":1,"offset":3037}}},{"type":"raw","value":"<br>","position":{"start":{"line":89,"column":1,"offset":3037},"end":{"line":89,"column":5,"offset":3041}}},{"type":"text","value":"\n","position":{"start":{"line":89,"column":5,"offset":3041},"end":{"line":90,"column":1,"offset":3042}}},{"type":"raw","value":"<br>","position":{"start":{"line":90,"column":1,"offset":3042},"end":{"line":90,"column":5,"offset":3046}}},{"type":"text","value":"\nThe second parameter that ","position":{"start":{"line":90,"column":5,"offset":3046},"end":{"line":91,"column":27,"offset":3073}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":91,"column":27,"offset":3073},"end":{"line":91,"column":35,"offset":3081}}},{"type":"text","value":" takes in is the body that the procedure will call ","position":{"start":{"line":91,"column":35,"offset":3081},"end":{"line":91,"column":86,"offset":3132}}},{"type":"raw","value":"<code class=\"language-text\">(* x x)</code>","position":{"start":{"line":91,"column":86,"offset":3132},"end":{"line":91,"column":95,"offset":3141}}},{"type":"text","value":". ","position":{"start":{"line":91,"column":95,"offset":3141},"end":{"line":91,"column":97,"offset":3143}}}],"position":{"start":{"line":85,"column":1,"offset":2735},"end":{"line":91,"column":97,"offset":3143}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br> ","position":{"start":{"line":93,"column":1,"offset":3145},"end":{"line":93,"column":6,"offset":3150}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define can also be used to store constants:\n","position":{"start":{"line":95,"column":1,"offset":3152},"end":{"line":96,"column":1,"offset":3196}}},{"type":"raw","value":"<br>","position":{"start":{"line":96,"column":1,"offset":3196},"end":{"line":96,"column":5,"offset":3200}}},{"type":"text","value":"\n","position":{"start":{"line":96,"column":5,"offset":3200},"end":{"line":97,"column":1,"offset":3201}}},{"type":"raw","value":"<code class=\"language-text\">(define pi 3.14159)</code>","position":{"start":{"line":97,"column":1,"offset":3201},"end":{"line":97,"column":22,"offset":3222}}},{"type":"text","value":"\n","position":{"start":{"line":97,"column":22,"offset":3222},"end":{"line":98,"column":1,"offset":3223}}},{"type":"raw","value":"<br>","position":{"start":{"line":98,"column":1,"offset":3223},"end":{"line":98,"column":5,"offset":3227}}}],"position":{"start":{"line":95,"column":1,"offset":3152},"end":{"line":98,"column":5,"offset":3227}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.","position":{"start":{"line":100,"column":1,"offset":3229},"end":{"line":100,"column":152,"offset":3380}}}],"position":{"start":{"line":100,"column":1,"offset":3229},"end":{"line":100,"column":152,"offset":3380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":102,"column":8,"offset":3389},"end":{"line":102,"column":20,"offset":3401}}}],"position":{"start":{"line":102,"column":1,"offset":3382},"end":{"line":102,"column":20,"offset":3401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the first example of a program we see in class:","position":{"start":{"line":104,"column":1,"offset":3403},"end":{"line":104,"column":56,"offset":3458}}}],"position":{"start":{"line":104,"column":1,"offset":3403},"end":{"line":104,"column":56,"offset":3458}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>","position":{"start":{"line":105,"column":1,"offset":3459},"end":{"line":110,"column":4,"offset":3550}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":111,"column":1,"offset":3551},"end":{"line":111,"column":5,"offset":3555}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you’ve probably already guessed, ","position":{"start":{"line":113,"column":1,"offset":3557},"end":{"line":113,"column":37,"offset":3593}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":113,"column":37,"offset":3593},"end":{"line":113,"column":41,"offset":3597}}},{"type":"text","value":" is a function.\n","position":{"start":{"line":113,"column":41,"offset":3597},"end":{"line":114,"column":1,"offset":3614}}},{"type":"raw","value":"<br>","position":{"start":{"line":114,"column":1,"offset":3614},"end":{"line":114,"column":5,"offset":3618}}},{"type":"text","value":"\n","position":{"start":{"line":114,"column":5,"offset":3618},"end":{"line":115,"column":1,"offset":3619}}},{"type":"raw","value":"<br>","position":{"start":{"line":115,"column":1,"offset":3619},"end":{"line":115,"column":5,"offset":3623}}},{"type":"text","value":"\nThe first parameter is the test case for example if we input fly ","position":{"start":{"line":115,"column":5,"offset":3623},"end":{"line":116,"column":66,"offset":3689}}},{"type":"raw","value":"<code class=\"language-text\">(equal? (last wd) &#39;y)</code>","position":{"start":{"line":116,"column":66,"offset":3689},"end":{"line":116,"column":89,"offset":3712}}},{"type":"text","value":" would be true, because fly ends in y.\n","position":{"start":{"line":116,"column":89,"offset":3712},"end":{"line":117,"column":1,"offset":3752}}},{"type":"raw","value":"<br>","position":{"start":{"line":117,"column":1,"offset":3752},"end":{"line":117,"column":5,"offset":3756}}},{"type":"text","value":"\n","position":{"start":{"line":117,"column":5,"offset":3756},"end":{"line":118,"column":1,"offset":3757}}},{"type":"raw","value":"<br>","position":{"start":{"line":118,"column":1,"offset":3757},"end":{"line":118,"column":5,"offset":3761}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":118,"column":5,"offset":3761},"end":{"line":119,"column":21,"offset":3782}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":119,"column":21,"offset":3782},"end":{"line":119,"column":25,"offset":3786}}},{"type":"text","value":" takes in is the expression if the test case is true.\n","position":{"start":{"line":119,"column":25,"offset":3786},"end":{"line":120,"column":1,"offset":3840}}},{"type":"raw","value":"<br>","position":{"start":{"line":120,"column":1,"offset":3840},"end":{"line":120,"column":5,"offset":3844}}},{"type":"text","value":"\n","position":{"start":{"line":120,"column":5,"offset":3844},"end":{"line":121,"column":1,"offset":3845}}},{"type":"raw","value":"<br>","position":{"start":{"line":121,"column":1,"offset":3845},"end":{"line":121,"column":5,"offset":3849}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":121,"column":5,"offset":3849},"end":{"line":122,"column":21,"offset":3870}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":122,"column":21,"offset":3870},"end":{"line":122,"column":25,"offset":3874}}},{"type":"text","value":" takes in is the expression if the test case is false.\n","position":{"start":{"line":122,"column":25,"offset":3874},"end":{"line":123,"column":1,"offset":3929}}},{"type":"raw","value":"<br>","position":{"start":{"line":123,"column":1,"offset":3929},"end":{"line":123,"column":5,"offset":3933}}},{"type":"text","value":"\n","position":{"start":{"line":123,"column":5,"offset":3933},"end":{"line":124,"column":1,"offset":3934}}},{"type":"raw","value":"<br>","position":{"start":{"line":124,"column":1,"offset":3934},"end":{"line":124,"column":5,"offset":3938}}},{"type":"text","value":"\nAlso worth noting that names that return a boolean add a ","position":{"start":{"line":124,"column":5,"offset":3938},"end":{"line":125,"column":58,"offset":3996}}},{"type":"raw","value":"<code class=\"language-text\">?</code>","position":{"start":{"line":125,"column":58,"offset":3996},"end":{"line":125,"column":61,"offset":3999}}},{"type":"text","value":" to the end to show that the primitive returned is true or false. Like how equal is ","position":{"start":{"line":125,"column":61,"offset":3999},"end":{"line":125,"column":145,"offset":4083}}},{"type":"raw","value":"<code class=\"language-text\">equal?</code>","position":{"start":{"line":125,"column":145,"offset":4083},"end":{"line":125,"column":153,"offset":4091}}},{"type":"text","value":" in the code block above.","position":{"start":{"line":125,"column":153,"offset":4091},"end":{"line":125,"column":178,"offset":4116}}}],"position":{"start":{"line":113,"column":1,"offset":3557},"end":{"line":125,"column":178,"offset":4116}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L02","position":{"start":{"line":127,"column":7,"offset":4124},"end":{"line":127,"column":10,"offset":4127}}}],"position":{"start":{"line":127,"column":1,"offset":4118},"end":{"line":127,"column":10,"offset":4127}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Recursion","position":{"start":{"line":129,"column":8,"offset":4136},"end":{"line":129,"column":17,"offset":4145}}}],"position":{"start":{"line":129,"column":1,"offset":4129},"end":{"line":129,"column":17,"offset":4145}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":130,"column":1,"offset":4146},"end":{"line":141,"column":4,"offset":4345}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":142,"column":1,"offset":4346},"end":{"line":142,"column":5,"offset":4350}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n","position":{"start":{"line":144,"column":1,"offset":4352},"end":{"line":145,"column":1,"offset":4568}}},{"type":"raw","value":"<br>","position":{"start":{"line":145,"column":1,"offset":4568},"end":{"line":145,"column":5,"offset":4572}}},{"type":"text","value":"\n","position":{"start":{"line":145,"column":5,"offset":4572},"end":{"line":146,"column":1,"offset":4573}}},{"type":"raw","value":"<br>","position":{"start":{"line":146,"column":1,"offset":4573},"end":{"line":146,"column":5,"offset":4577}}},{"type":"text","value":"\nNotice in the above example from lecture the function calls pigl until ","position":{"start":{"line":146,"column":5,"offset":4577},"end":{"line":147,"column":72,"offset":4649}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":147,"column":72,"offset":4649},"end":{"line":147,"column":81,"offset":4658}}},{"type":"text","value":" is equal to true.\n","position":{"start":{"line":147,"column":81,"offset":4658},"end":{"line":148,"column":1,"offset":4677}}},{"type":"raw","value":"<br>","position":{"start":{"line":148,"column":1,"offset":4677},"end":{"line":148,"column":5,"offset":4681}}},{"type":"text","value":"\n","position":{"start":{"line":148,"column":5,"offset":4681},"end":{"line":149,"column":1,"offset":4682}}},{"type":"raw","value":"<br>","position":{"start":{"line":149,"column":1,"offset":4682},"end":{"line":149,"column":5,"offset":4686}}},{"type":"text","value":"\nLets say ","position":{"start":{"line":149,"column":5,"offset":4686},"end":{"line":150,"column":10,"offset":4696}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":150,"column":10,"offset":4696},"end":{"line":150,"column":16,"offset":4702}}},{"type":"text","value":" gets called with ","position":{"start":{"line":150,"column":16,"offset":4702},"end":{"line":150,"column":34,"offset":4720}}},{"type":"raw","value":"<code class=\"language-text\">scheme</code>","position":{"start":{"line":150,"column":34,"offset":4720},"end":{"line":150,"column":42,"offset":4728}}},{"type":"text","value":".\nThe conditional checks ","position":{"start":{"line":150,"column":42,"offset":4728},"end":{"line":151,"column":24,"offset":4753}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":151,"column":24,"offset":4753},"end":{"line":151,"column":33,"offset":4762}}},{"type":"text","value":" which checks the first letter in the word to see if it is a vowel. Since ","position":{"start":{"line":151,"column":33,"offset":4762},"end":{"line":151,"column":107,"offset":4836}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":151,"column":107,"offset":4836},"end":{"line":151,"column":116,"offset":4845}}},{"type":"text","value":" is false because ","position":{"start":{"line":151,"column":116,"offset":4845},"end":{"line":151,"column":134,"offset":4863}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":151,"column":134,"offset":4863},"end":{"line":151,"column":137,"offset":4866}}},{"type":"text","value":" isn’t a vowel it calls ","position":{"start":{"line":151,"column":137,"offset":4866},"end":{"line":151,"column":161,"offset":4890}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":151,"column":161,"offset":4890},"end":{"line":151,"column":167,"offset":4896}}},{"type":"text","value":" again with the argument ","position":{"start":{"line":151,"column":167,"offset":4896},"end":{"line":151,"column":192,"offset":4921}}},{"type":"raw","value":"<code class=\"language-text\">chemes</code>","position":{"start":{"line":151,"column":192,"offset":4921},"end":{"line":151,"column":200,"offset":4929}}},{"type":"text","value":". This is because ","position":{"start":{"line":151,"column":200,"offset":4929},"end":{"line":151,"column":218,"offset":4947}}},{"type":"raw","value":"<code class=\"language-text\">word</code>","position":{"start":{"line":151,"column":218,"offset":4947},"end":{"line":151,"column":224,"offset":4953}}},{"type":"text","value":" takes the arguments ","position":{"start":{"line":151,"column":224,"offset":4953},"end":{"line":151,"column":245,"offset":4974}}},{"type":"raw","value":"<code class=\"language-text\">cheme</code>","position":{"start":{"line":151,"column":245,"offset":4974},"end":{"line":151,"column":252,"offset":4981}}},{"type":"text","value":" and ","position":{"start":{"line":151,"column":252,"offset":4981},"end":{"line":151,"column":257,"offset":4986}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":151,"column":257,"offset":4986},"end":{"line":151,"column":260,"offset":4989}}},{"type":"text","value":" and adds them together. ","position":{"start":{"line":151,"column":260,"offset":4989},"end":{"line":151,"column":285,"offset":5014}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":151,"column":285,"offset":5014},"end":{"line":151,"column":291,"offset":5020}}},{"type":"text","value":" gets called repeatedly until\nit is called with a vowel as the first letter. When the first letter is a vowel the expression ","position":{"start":{"line":151,"column":291,"offset":5020},"end":{"line":152,"column":96,"offset":5146}}},{"type":"raw","value":"<code class=\"language-text\">(word wd &#39;ay)</code>","position":{"start":{"line":152,"column":96,"offset":5146},"end":{"line":152,"column":111,"offset":5161}}},{"type":"text","value":" is ran and the result is a primitive which means the procedure stops. ","position":{"start":{"line":152,"column":111,"offset":5161},"end":{"line":152,"column":182,"offset":5232}}}],"position":{"start":{"line":144,"column":1,"offset":4352},"end":{"line":152,"column":182,"offset":5232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":154,"column":8,"offset":5241},"end":{"line":154,"column":19,"offset":5252}}}],"position":{"start":{"line":154,"column":1,"offset":5234},"end":{"line":154,"column":19,"offset":5252}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Big Picture: ","position":{"start":{"line":155,"column":1,"offset":5253},"end":{"line":155,"column":14,"offset":5266}}}],"position":{"start":{"line":155,"column":1,"offset":5253},"end":{"line":155,"column":14,"offset":5266}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>","position":{"start":{"line":156,"column":1,"offset":5267},"end":{"line":171,"column":4,"offset":5682}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":172,"column":1,"offset":5683},"end":{"line":172,"column":5,"offset":5687}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that can be referenced as a whole.","position":{"start":{"line":174,"column":1,"offset":5689},"end":{"line":174,"column":141,"offset":5829}}}],"position":{"start":{"line":174,"column":1,"offset":5689},"end":{"line":174,"column":141,"offset":5829}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Functional Programming","position":{"start":{"line":176,"column":8,"offset":5838},"end":{"line":176,"column":30,"offset":5860}}}],"position":{"start":{"line":176,"column":1,"offset":5831},"end":{"line":176,"column":30,"offset":5860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the introduction of multi-core processers, parallelism has helped functional programming make a comeback. If everything is a function you won’t run into race conditions created by dependencies.","position":{"start":{"line":177,"column":1,"offset":5861},"end":{"line":177,"column":199,"offset":6059}}}],"position":{"start":{"line":177,"column":1,"offset":5861},"end":{"line":177,"column":199,"offset":6059}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Function vs. Procedure","position":{"start":{"line":179,"column":8,"offset":6068},"end":{"line":179,"column":30,"offset":6090}}}],"position":{"start":{"line":179,"column":1,"offset":6061},"end":{"line":179,"column":30,"offset":6090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Two functions are the same if they give the same output with given inputs.\n","position":{"start":{"line":181,"column":1,"offset":6092},"end":{"line":182,"column":1,"offset":6167}}},{"type":"raw","value":"<br>","position":{"start":{"line":182,"column":1,"offset":6167},"end":{"line":182,"column":5,"offset":6171}}},{"type":"text","value":"\n","position":{"start":{"line":182,"column":5,"offset":6171},"end":{"line":183,"column":1,"offset":6172}}},{"type":"raw","value":"<br>","position":{"start":{"line":183,"column":1,"offset":6172},"end":{"line":183,"column":5,"offset":6176}}},{"type":"text","value":"\nA procedure is a sequence of steps for computing a function.\n","position":{"start":{"line":183,"column":5,"offset":6176},"end":{"line":185,"column":1,"offset":6238}}},{"type":"raw","value":"<br>","position":{"start":{"line":185,"column":1,"offset":6238},"end":{"line":185,"column":5,"offset":6242}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":185,"column":5,"offset":6242},"end":{"line":186,"column":1,"offset":6245}}},{"type":"text","value":"\n"},{"type":"text","value":"Therefore ","position":{"start":{"line":186,"column":1,"offset":6245},"end":{"line":186,"column":11,"offset":6255}}},{"type":"raw","value":"<code class=\"language-text\">2x + 6</code>","position":{"start":{"line":186,"column":11,"offset":6255},"end":{"line":186,"column":19,"offset":6263}}},{"type":"text","value":" and ","position":{"start":{"line":186,"column":19,"offset":6263},"end":{"line":186,"column":24,"offset":6268}}},{"type":"raw","value":"<code class=\"language-text\">2(x + 3)</code>","position":{"start":{"line":186,"column":24,"offset":6268},"end":{"line":186,"column":34,"offset":6278}}},{"type":"text","value":" are the same function but different procedures.\n","position":{"start":{"line":186,"column":34,"offset":6278},"end":{"line":187,"column":1,"offset":6327}}},{"type":"raw","value":"<br>","position":{"start":{"line":187,"column":1,"offset":6327},"end":{"line":187,"column":5,"offset":6331}}}],"position":{"start":{"line":181,"column":1,"offset":6092},"end":{"line":187,"column":5,"offset":6331}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Cond","position":{"start":{"line":189,"column":8,"offset":6340},"end":{"line":189,"column":12,"offset":6344}}}],"position":{"start":{"line":189,"column":1,"offset":6333},"end":{"line":189,"column":12,"offset":6344}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (buzz n) \n    (cond ((equal? (remainder n 7) 0) &#39;buzz)\n    ((member? 7 n) &#39;buzz)\n    (else n)))</code></pre></div>","position":{"start":{"line":190,"column":1,"offset":6345},"end":{"line":195,"column":4,"offset":6456}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":196,"column":1,"offset":6457},"end":{"line":197,"column":5,"offset":6466}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":199,"column":1,"offset":6468},"end":{"line":199,"column":7,"offset":6474}}},{"type":"text","value":" allows for multiple test cases, and will return\nthe first clause that is true.\n","position":{"start":{"line":199,"column":7,"offset":6474},"end":{"line":201,"column":1,"offset":6556}}},{"type":"raw","value":"<br>","position":{"start":{"line":201,"column":1,"offset":6556},"end":{"line":201,"column":5,"offset":6560}}},{"type":"text","value":"\n","position":{"start":{"line":201,"column":5,"offset":6560},"end":{"line":202,"column":1,"offset":6561}}},{"type":"raw","value":"<br>","position":{"start":{"line":202,"column":1,"offset":6561},"end":{"line":202,"column":5,"offset":6565}}},{"type":"text","value":"\nLets try ","position":{"start":{"line":202,"column":5,"offset":6565},"end":{"line":203,"column":10,"offset":6575}}},{"type":"raw","value":"<code class=\"language-text\">14</code>","position":{"start":{"line":203,"column":10,"offset":6575},"end":{"line":203,"column":14,"offset":6579}}},{"type":"text","value":". Since ","position":{"start":{"line":203,"column":14,"offset":6579},"end":{"line":203,"column":22,"offset":6587}}},{"type":"raw","value":"<code class=\"language-text\">14 / 7</code>","position":{"start":{"line":203,"column":22,"offset":6587},"end":{"line":203,"column":30,"offset":6595}}},{"type":"text","value":" has a remainder of ","position":{"start":{"line":203,"column":30,"offset":6595},"end":{"line":203,"column":50,"offset":6615}}},{"type":"raw","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":203,"column":50,"offset":6615},"end":{"line":203,"column":53,"offset":6618}}},{"type":"text","value":" the first clause is met and returns ","position":{"start":{"line":203,"column":53,"offset":6618},"end":{"line":203,"column":90,"offset":6655}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":203,"column":90,"offset":6655},"end":{"line":203,"column":96,"offset":6661}}},{"type":"text","value":".\n","position":{"start":{"line":203,"column":96,"offset":6661},"end":{"line":204,"column":1,"offset":6664}}},{"type":"raw","value":"<br>","position":{"start":{"line":204,"column":1,"offset":6664},"end":{"line":204,"column":5,"offset":6668}}},{"type":"text","value":"\n","position":{"start":{"line":204,"column":5,"offset":6668},"end":{"line":205,"column":1,"offset":6669}}},{"type":"raw","value":"<br>","position":{"start":{"line":205,"column":1,"offset":6669},"end":{"line":205,"column":5,"offset":6673}}},{"type":"text","value":"\nNow Lets try ","position":{"start":{"line":205,"column":5,"offset":6673},"end":{"line":206,"column":14,"offset":6687}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":206,"column":14,"offset":6687},"end":{"line":206,"column":18,"offset":6691}}},{"type":"text","value":". The first clause is not met, and therefore goes onto the next clause. ","position":{"start":{"line":206,"column":18,"offset":6691},"end":{"line":206,"column":90,"offset":6763}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":206,"column":90,"offset":6763},"end":{"line":206,"column":94,"offset":6767}}},{"type":"text","value":" does have a 7 inside of it so ","position":{"start":{"line":206,"column":94,"offset":6767},"end":{"line":206,"column":125,"offset":6798}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":206,"column":125,"offset":6798},"end":{"line":206,"column":131,"offset":6804}}},{"type":"text","value":" is returned.\n","position":{"start":{"line":206,"column":131,"offset":6804},"end":{"line":207,"column":1,"offset":6819}}},{"type":"raw","value":"<br>","position":{"start":{"line":207,"column":1,"offset":6819},"end":{"line":207,"column":5,"offset":6823}}},{"type":"text","value":"\n","position":{"start":{"line":207,"column":5,"offset":6823},"end":{"line":208,"column":1,"offset":6824}}},{"type":"raw","value":"<br>","position":{"start":{"line":208,"column":1,"offset":6824},"end":{"line":208,"column":5,"offset":6828}}},{"type":"text","value":"\nNow lets try ","position":{"start":{"line":208,"column":5,"offset":6828},"end":{"line":209,"column":14,"offset":6842}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":209,"column":14,"offset":6842},"end":{"line":209,"column":18,"offset":6846}}},{"type":"text","value":". The remainder is ","position":{"start":{"line":209,"column":18,"offset":6846},"end":{"line":209,"column":37,"offset":6865}}},{"type":"raw","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":209,"column":37,"offset":6865},"end":{"line":209,"column":40,"offset":6868}}},{"type":"text","value":" so the first clause is not met, and ","position":{"start":{"line":209,"column":40,"offset":6868},"end":{"line":209,"column":77,"offset":6905}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":209,"column":77,"offset":6905},"end":{"line":209,"column":81,"offset":6909}}},{"type":"text","value":"  does not have a ","position":{"start":{"line":209,"column":81,"offset":6909},"end":{"line":209,"column":99,"offset":6927}}},{"type":"raw","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":209,"column":99,"offset":6927},"end":{"line":209,"column":102,"offset":6930}}},{"type":"text","value":" inside of it so the catch all ","position":{"start":{"line":209,"column":102,"offset":6930},"end":{"line":209,"column":133,"offset":6961}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":209,"column":133,"offset":6961},"end":{"line":209,"column":139,"offset":6967}}},{"type":"text","value":" keyword returns the number ","position":{"start":{"line":209,"column":139,"offset":6967},"end":{"line":209,"column":167,"offset":6995}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":209,"column":167,"offset":6995},"end":{"line":209,"column":171,"offset":6999}}},{"type":"text","value":".\n","position":{"start":{"line":209,"column":171,"offset":6999},"end":{"line":210,"column":1,"offset":7001}}},{"type":"raw","value":"<br>","position":{"start":{"line":210,"column":1,"offset":7001},"end":{"line":210,"column":5,"offset":7005}}},{"type":"text","value":"\n","position":{"start":{"line":210,"column":5,"offset":7005},"end":{"line":211,"column":1,"offset":7006}}},{"type":"raw","value":"<br>","position":{"start":{"line":211,"column":1,"offset":7006},"end":{"line":211,"column":5,"offset":7010}}},{"type":"text","value":"\nImportant to note:\n","position":{"start":{"line":211,"column":5,"offset":7010},"end":{"line":213,"column":1,"offset":7030}}},{"type":"raw","value":"<br>","position":{"start":{"line":213,"column":1,"offset":7030},"end":{"line":213,"column":5,"offset":7034}}},{"type":"text","value":"\nIf a ","position":{"start":{"line":213,"column":5,"offset":7034},"end":{"line":214,"column":6,"offset":7040}}},{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":214,"column":6,"offset":7040},"end":{"line":214,"column":12,"offset":7046}}},{"type":"text","value":" does not have an ","position":{"start":{"line":214,"column":12,"offset":7046},"end":{"line":214,"column":30,"offset":7064}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":214,"column":30,"offset":7064},"end":{"line":214,"column":36,"offset":7070}}},{"type":"text","value":" statement it will return ","position":{"start":{"line":214,"column":36,"offset":7070},"end":{"line":214,"column":62,"offset":7096}}},{"type":"raw","value":"<code class=\"language-text\">unspecified</code>","position":{"start":{"line":214,"column":62,"offset":7096},"end":{"line":214,"column":75,"offset":7109}}},{"type":"text","value":", which can be different depending on interpreted, so always have an else statement.","position":{"start":{"line":214,"column":75,"offset":7109},"end":{"line":214,"column":159,"offset":7193}}}],"position":{"start":{"line":199,"column":1,"offset":6468},"end":{"line":214,"column":159,"offset":7193}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Applicative Order vs Normal Order","position":{"start":{"line":216,"column":8,"offset":7202},"end":{"line":216,"column":41,"offset":7235}}}],"position":{"start":{"line":216,"column":1,"offset":7195},"end":{"line":216,"column":41,"offset":7235}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (f a b) (+ (g a) b))\n(def (g x) (* 3 x))\n\n(f (+ 2 3) (- 15 6))</code></pre></div>","position":{"start":{"line":217,"column":1,"offset":7236},"end":{"line":222,"column":4,"offset":7311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Applicative Order:\n","position":{"start":{"line":223,"column":1,"offset":7312},"end":{"line":224,"column":1,"offset":7331}}},{"type":"raw","value":"<br>","position":{"start":{"line":224,"column":1,"offset":7331},"end":{"line":224,"column":5,"offset":7335}}},{"type":"text","value":"\nevaluates the sub expressions until they are primitive values, then passes the primitive results back up to the parent function.\n","position":{"start":{"line":224,"column":5,"offset":7335},"end":{"line":226,"column":5,"offset":7473}}},{"type":"raw","value":"<br>","position":{"start":{"line":226,"column":5,"offset":7473},"end":{"line":226,"column":9,"offset":7477}}},{"type":"text","value":"\n","position":{"start":{"line":226,"column":9,"offset":7477},"end":{"line":227,"column":5,"offset":7482}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":227,"column":5,"offset":7482},"end":{"line":227,"column":27,"offset":7504}}},{"type":"text","value":"\n","position":{"start":{"line":227,"column":27,"offset":7504},"end":{"line":228,"column":5,"offset":7509}}},{"type":"raw","value":"<br>","position":{"start":{"line":228,"column":5,"offset":7509},"end":{"line":228,"column":9,"offset":7513}}},{"type":"text","value":"\n","position":{"start":{"line":228,"column":9,"offset":7513},"end":{"line":229,"column":5,"offset":7518}}},{"type":"raw","value":"<code class=\"language-text\">2 + 3</code>","position":{"start":{"line":229,"column":5,"offset":7518},"end":{"line":229,"column":12,"offset":7525}}},{"type":"text","value":" and ","position":{"start":{"line":229,"column":12,"offset":7525},"end":{"line":229,"column":17,"offset":7530}}},{"type":"raw","value":"<code class=\"language-text\">15 - 6</code>","position":{"start":{"line":229,"column":17,"offset":7530},"end":{"line":229,"column":25,"offset":7538}}},{"type":"text","value":" will be evaluated before the outside ","position":{"start":{"line":229,"column":25,"offset":7538},"end":{"line":229,"column":63,"offset":7576}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":229,"column":63,"offset":7576},"end":{"line":229,"column":66,"offset":7579}}},{"type":"text","value":" is evaluated. Then ","position":{"start":{"line":229,"column":66,"offset":7579},"end":{"line":229,"column":86,"offset":7599}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":229,"column":86,"offset":7599},"end":{"line":229,"column":89,"offset":7602}}},{"type":"text","value":" will be called with ","position":{"start":{"line":229,"column":89,"offset":7602},"end":{"line":229,"column":110,"offset":7623}}},{"type":"raw","value":"<code class=\"language-text\">(f 5 9)</code>","position":{"start":{"line":229,"column":110,"offset":7623},"end":{"line":229,"column":119,"offset":7632}}},{"type":"text","value":".\n","position":{"start":{"line":229,"column":119,"offset":7632},"end":{"line":230,"column":1,"offset":7634}}},{"type":"raw","value":"<br>","position":{"start":{"line":230,"column":1,"offset":7634},"end":{"line":230,"column":5,"offset":7638}}},{"type":"text","value":"\nNormal Order:\n","position":{"start":{"line":230,"column":5,"offset":7638},"end":{"line":232,"column":1,"offset":7654}}},{"type":"raw","value":"<br>","position":{"start":{"line":232,"column":1,"offset":7654},"end":{"line":232,"column":5,"offset":7658}}},{"type":"text","value":"\nevaluates the outsides first, but instead of passing primitive values it passes the expressions.\n","position":{"start":{"line":232,"column":5,"offset":7658},"end":{"line":234,"column":5,"offset":7765}}},{"type":"raw","value":"<br>","position":{"start":{"line":234,"column":5,"offset":7765},"end":{"line":234,"column":9,"offset":7769}}},{"type":"text","value":"\n","position":{"start":{"line":234,"column":9,"offset":7769},"end":{"line":235,"column":1,"offset":7770}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":235,"column":1,"offset":7770},"end":{"line":235,"column":23,"offset":7792}}},{"type":"text","value":" turns into ","position":{"start":{"line":235,"column":23,"offset":7792},"end":{"line":235,"column":35,"offset":7804}}},{"type":"raw","value":"<code class=\"language-text\">(+ (g (+ 2 3)) (- 15 6))</code>","position":{"start":{"line":235,"column":35,"offset":7804},"end":{"line":235,"column":61,"offset":7830}}},{"type":"text","value":"\n","position":{"start":{"line":235,"column":61,"offset":7830},"end":{"line":236,"column":1,"offset":7831}}},{"type":"raw","value":"<br>","position":{"start":{"line":236,"column":1,"offset":7831},"end":{"line":236,"column":5,"offset":7835}}},{"type":"text","value":"\nNow ","position":{"start":{"line":236,"column":5,"offset":7835},"end":{"line":237,"column":5,"offset":7840}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":237,"column":5,"offset":7840},"end":{"line":237,"column":8,"offset":7843}}},{"type":"text","value":" is done and the next expression can be evaluated.","position":{"start":{"line":237,"column":8,"offset":7843},"end":{"line":237,"column":58,"offset":7893}}}],"position":{"start":{"line":223,"column":1,"offset":7312},"end":{"line":237,"column":58,"offset":7893}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Possible Problem:\n","position":{"start":{"line":239,"column":1,"offset":7895},"end":{"line":240,"column":1,"offset":7913}}},{"type":"raw","value":"<br>","position":{"start":{"line":240,"column":1,"offset":7913},"end":{"line":240,"column":5,"offset":7917}}}],"position":{"start":{"line":239,"column":1,"offset":7895},"end":{"line":240,"column":5,"offset":7917}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (zero z) (- x x))</code></pre></div>","position":{"start":{"line":241,"column":1,"offset":7918},"end":{"line":243,"column":4,"offset":7948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"applicative ","position":{"start":{"line":244,"column":1,"offset":7949},"end":{"line":244,"column":13,"offset":7961}}}],"position":{"start":{"line":244,"column":1,"offset":7949},"end":{"line":244,"column":13,"offset":7961}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(random 10) ==&gt; 8\n(zero 8) ---&gt;\n(- 8 8) ==&gt; 0\n0</code></pre></div>","position":{"start":{"line":245,"column":1,"offset":7962},"end":{"line":251,"column":4,"offset":8041}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"normal ","position":{"start":{"line":252,"column":1,"offset":8042},"end":{"line":252,"column":8,"offset":8049}}}],"position":{"start":{"line":252,"column":1,"offset":8042},"end":{"line":252,"column":8,"offset":8049}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(+ (random 10) (random 10)) ==&gt; \n    (random 10) ==&gt; 8\n    (random 10) ==&gt; 1\n(- 8 1) ==&gt; 7\n7</code></pre></div>","position":{"start":{"line":253,"column":1,"offset":8050},"end":{"line":260,"column":4,"offset":8174}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":261,"column":1,"offset":8175},"end":{"line":262,"column":5,"offset":8184}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the ","position":{"start":{"line":264,"column":1,"offset":8186},"end":{"line":264,"column":11,"offset":8196}}},{"type":"raw","value":"<code class=\"language-text\">(random 10)</code>","position":{"start":{"line":264,"column":11,"offset":8196},"end":{"line":264,"column":24,"offset":8209}}},{"type":"text","value":" is split into 2 different function alls in normal order you get different results.","position":{"start":{"line":264,"column":24,"offset":8209},"end":{"line":264,"column":107,"offset":8292}}}],"position":{"start":{"line":264,"column":1,"offset":8186},"end":{"line":264,"column":107,"offset":8292}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L03","position":{"start":{"line":266,"column":7,"offset":8300},"end":{"line":266,"column":10,"offset":8303}}}],"position":{"start":{"line":266,"column":1,"offset":8294},"end":{"line":266,"column":10,"offset":8303}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L04","position":{"start":{"line":267,"column":7,"offset":8310},"end":{"line":267,"column":10,"offset":8313}}}],"position":{"start":{"line":267,"column":1,"offset":8304},"end":{"line":267,"column":10,"offset":8313}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LABS","position":{"start":{"line":269,"column":6,"offset":8320},"end":{"line":269,"column":10,"offset":8324}}}],"position":{"start":{"line":269,"column":1,"offset":8315},"end":{"line":269,"column":10,"offset":8324}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1A","position":{"start":{"line":270,"column":7,"offset":8331},"end":{"line":270,"column":13,"offset":8337}}}],"position":{"start":{"line":270,"column":1,"offset":8325},"end":{"line":270,"column":13,"offset":8337}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first problem for the lab was to modify the ","position":{"start":{"line":271,"column":1,"offset":8338},"end":{"line":271,"column":49,"offset":8386}}},{"type":"raw","value":"<code class=\"language-text\">plural</code>","position":{"start":{"line":271,"column":49,"offset":8386},"end":{"line":271,"column":57,"offset":8394}}},{"type":"text","value":" program to handle a word ending in y, but has a vowel in front of it (boy).","position":{"start":{"line":271,"column":57,"offset":8394},"end":{"line":271,"column":133,"offset":8470}}}],"position":{"start":{"line":271,"column":1,"offset":8338},"end":{"line":271,"column":133,"offset":8470}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t\t(if (vowel? (last (bl wd)))\n\t\t(word wd &#39;s)\n\t\t(word (bl wd) &#39;ies))\n\t(word wd &#39;s)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":272,"column":1,"offset":8471},"end":{"line":282,"column":4,"offset":8666}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":283,"column":1,"offset":8667},"end":{"line":283,"column":5,"offset":8671}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I handled this by adding a conditional that checks for the second to last letter.\n","position":{"start":{"line":286,"column":1,"offset":8674},"end":{"line":287,"column":1,"offset":8756}}},{"type":"raw","value":"<br>","position":{"start":{"line":287,"column":1,"offset":8756},"end":{"line":287,"column":5,"offset":8760}}},{"type":"text","value":"\n","position":{"start":{"line":287,"column":5,"offset":8760},"end":{"line":288,"column":1,"offset":8761}}},{"type":"raw","value":"<br>","position":{"start":{"line":288,"column":1,"offset":8761},"end":{"line":288,"column":5,"offset":8765}}},{"type":"text","value":"\nThe second assgnment was:","position":{"start":{"line":288,"column":5,"offset":8765},"end":{"line":289,"column":26,"offset":8791}}}],"position":{"start":{"line":286,"column":1,"offset":8674},"end":{"line":289,"column":26,"offset":8791}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Define a procedure that takes three numbers as arguments and returns the sum of\nthe squares of the two larger numbers.</code></pre></div>","position":{"start":{"line":290,"column":1,"offset":8792},"end":{"line":295,"column":4,"offset":8920}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My Solution: ","position":{"start":{"line":296,"column":1,"offset":8921},"end":{"line":296,"column":14,"offset":8934}}}],"position":{"start":{"line":296,"column":1,"offset":8921},"end":{"line":296,"column":14,"offset":8934}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (twoLargerSums a b c)\n    (if (&gt;= a b)\n        (if (&gt;= b c)\n            (+ (square a) (square b))\n            (+ (square a) (square c)))\n        (if (&gt;= a c)\n            (+ (square a) (square b))\n            (+ (square b) (square c))))\n)\n\n(define (square x)\n(* x x))</code></pre></div>","position":{"start":{"line":298,"column":1,"offset":8936},"end":{"line":311,"column":4,"offset":9218}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":313,"column":1,"offset":9220},"end":{"line":314,"column":5,"offset":9229}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1B","position":{"start":{"line":317,"column":7,"offset":9238},"end":{"line":317,"column":13,"offset":9244}}}],"position":{"start":{"line":317,"column":1,"offset":9232},"end":{"line":317,"column":13,"offset":9244}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":317,"column":13,"offset":9244}}}}