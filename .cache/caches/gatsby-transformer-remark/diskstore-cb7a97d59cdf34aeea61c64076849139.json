{"expireTime":9007200843559566000,"key":"transformer-remark-markdown-html-d8a873207c295977ba0cc8bf44978e37-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>This article is a part of a series where I go through <a href=\"https://teachyourselfcs.com/\">teachyourselfcs</a>.\nIf you would like to start at the beginning start <a href=\"https://bpp.dev/articles/teachyourselfcs/programming/00:getting-started/\">here</a>.</p>\n<h4>LECTURES</h4>\n<h5>L24</h5>\n<p>If sharing storage mutating may affect data, if not sharing storage it won’t.\n<br>\n<br></p>\n<p>Can’t mutate quoted list. Have to use cons or <code class=\"language-text\">list</code>.\n<br>\n<br>\neq? is when it is the same location in memory.\nequal? is equality.</p>\n<h5>L25</h5>\n<p>Table: association between keys and values\n<br>\n<br></p>\n<p>put: if no key in the table, create new one.\n<br>\n<br></p>\n<p>2d table: a key that has a table structure as its cdr.\n<br>\n<br></p>\n<p>Runtime for 2d table: n + y where n is the size of the table and y is the size of the second table.\n<br>\n<br></p>\n<p>2 lookups for key value store. assoc and assq.\n<br>\n<br>\nmemoization: storing previous calculations to build a result.\n<br>\n<br></p>\n<p>If underlying calculation is not functional you can’t use memoization.</p>\n<h5>L26</h5>\n<p>vector (array): indexed list\n<br>\n<br>\nvector best if needing to access a certain element a lot, accessing a value is o(1) instead of o(n) (worse case).\n<br>\n<br></p>\n<p>if you need to build up a list element by element list are faster.</p>\n<h5>L27</h5>\n<p>streams: returns the first element, and a promise to compute the rest later. </p>\n<br>\n<br>\n<p>Modern processers guess where the test is going to be and starts calculating the rest while still doing the test.</p>\n<br>\n<br>\n<p>delay: constructor for promises.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(delay exp) =&gt; (lambda () exp)</code></pre></div>\n<br>\n<br>\n<p>promise remembers what it is returning to.</p>\n<h5>L28</h5>\n<p>Integers computes the next integer just in time for the next computation to be run.</p>\n<br>\n<br>\n<p>Only use streams in functional programs.\nChapter three is about systems that change state over time.</p>\n<br>\n<br>\n<p>Parallelism simple with functional programming, very hard with mutating variables.</p>\n<br>\n<br>\n<p>Scheme uses normal order because it supports mutations. </p>\n<br>\n<br>\n<p>Haskell is a purely functional language that uses applicative order.</p>\n<h5>L29</h5>\n<p>Your operating system can assign you a port number.</p>\n<br>\n<br>\n<p>packet: burst of information you throw out and hope for the best.</p>\n<br>\n<br>\n<p>internet: network of networks</p>\n<br>\n<br>\n<p>Router connects to people outside your network.</p>\n<br>\n<br>\n<p>worldwide unreliable packets, because the network traverses many computers that could crash.\n<br>\n<br></p>\n<p>TCP: Transmission control protocol, provides worldwide reliable streams.\n<br>\n<br>\nsocket: abstract data type</p>\n<h5>L36</h5>\n<h5>L37</h5>\n<h4>LABS</h4>\n<h5>Lab 5A</h5>\n<h5>Lab 5B</h5>\n<h4>READINGS</h4>\n<h5>3.3</h5>\n<h5>4.1.1 - 4.1.6</h5>"}