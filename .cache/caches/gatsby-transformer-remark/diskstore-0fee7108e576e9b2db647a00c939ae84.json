{"expireTime":9007200843264025000,"key":"transformer-remark-markdown-html-ast-589d8bfc7fe82e3df2abfec4819f9fae-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":2,"column":6,"offset":6},"end":{"line":2,"column":14,"offset":14}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":14,"offset":14}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L14","position":{"start":{"line":3,"column":7,"offset":21},"end":{"line":3,"column":10,"offset":24}}}],"position":{"start":{"line":3,"column":1,"offset":15},"end":{"line":3,"column":10,"offset":24}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"2 types of expressions:","position":{"start":{"line":4,"column":1,"offset":25},"end":{"line":4,"column":24,"offset":48}}}],"position":{"start":{"line":4,"column":1,"offset":25},"end":{"line":4,"column":24,"offset":48}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                 expr\n    _______________|___________________    \n    |                                 |\n    atomic                           list\n    ___|__________                     |\n    |            |            _______________________       \nself-eval    variables        procedures special-forms</code></pre></div>","position":{"start":{"line":5,"column":1,"offset":49},"end":{"line":13,"column":4,"offset":361}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    (define (eval exp)\n    (cond ((self-evaluating? exp) exp)\n    ((symbol? exp) (look-up-global-value exp))\n    ((special-form? exp) (do-special-form exp))\n    (else (apply (eval (car exp))\n    (map eval (cdr exp)) ))))</code></pre></div>","position":{"start":{"line":15,"column":1,"offset":363},"end":{"line":22,"column":4,"offset":591}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Above is the eval function for an interpreter in Scheme. Notice it attempts to determine the type of expression then has a function to handle them. If it is a list it recursively calls eval to break the list into primitives.\n","position":{"start":{"line":23,"column":1,"offset":592},"end":{"line":24,"column":1,"offset":817}}},{"type":"raw","value":"<br>","position":{"start":{"line":24,"column":1,"offset":817},"end":{"line":24,"column":5,"offset":821}}},{"type":"text","value":"\n","position":{"start":{"line":24,"column":5,"offset":821},"end":{"line":25,"column":1,"offset":822}}},{"type":"raw","value":"<br>","position":{"start":{"line":25,"column":1,"offset":822},"end":{"line":25,"column":5,"offset":826}}}],"position":{"start":{"line":23,"column":1,"offset":592},"end":{"line":25,"column":5,"offset":826}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    (define (apply proc args)\n        (if (primitive? proc)\n            (do-magic proc args)\n            (eval (substitute (body proc) (formals proc) args))))</code></pre></div>","position":{"start":{"line":26,"column":1,"offset":827},"end":{"line":31,"column":4,"offset":993}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"apply takes a procedure and a list of arguments. In the else of ","position":{"start":{"line":32,"column":1,"offset":994},"end":{"line":32,"column":65,"offset":1058}}},{"type":"raw","value":"<code class=\"language-text\">eval</code>","position":{"start":{"line":32,"column":65,"offset":1058},"end":{"line":32,"column":71,"offset":1064}}},{"type":"text","value":" apply gets the first argument which will always the procedure call, and then it maps the arguments.\n","position":{"start":{"line":32,"column":71,"offset":1064},"end":{"line":33,"column":1,"offset":1165}}},{"type":"raw","value":"<br>","position":{"start":{"line":33,"column":1,"offset":1165},"end":{"line":33,"column":5,"offset":1169}}},{"type":"text","value":"\n","position":{"start":{"line":33,"column":5,"offset":1169},"end":{"line":34,"column":1,"offset":1170}}},{"type":"raw","value":"<br>","position":{"start":{"line":34,"column":1,"offset":1170},"end":{"line":34,"column":5,"offset":1174}}}],"position":{"start":{"line":32,"column":1,"offset":994},"end":{"line":34,"column":5,"offset":1174}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the procedure is a primitive it gets handled at the machine language level.","position":{"start":{"line":36,"column":1,"offset":1176},"end":{"line":36,"column":79,"offset":1254}}}],"position":{"start":{"line":36,"column":1,"offset":1176},"end":{"line":36,"column":79,"offset":1254}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":38,"column":1,"offset":1256},"end":{"line":39,"column":5,"offset":1265}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the procedure is created by a lambda,\nit has formal parameters and a body.\n","position":{"start":{"line":41,"column":1,"offset":1267},"end":{"line":43,"column":1,"offset":1345}}},{"type":"raw","value":"<br>","position":{"start":{"line":43,"column":1,"offset":1345},"end":{"line":43,"column":5,"offset":1349}}},{"type":"text","value":"\n","position":{"start":{"line":43,"column":5,"offset":1349},"end":{"line":44,"column":1,"offset":1350}}},{"type":"raw","value":"<br>","position":{"start":{"line":44,"column":1,"offset":1350},"end":{"line":44,"column":5,"offset":1354}}},{"type":"text","value":"\nScheme uses environmental model of evaluation, but we are building a substitution model interpreter right now.\nSubstitution works for functional programming, but not all paradigms.\n","position":{"start":{"line":44,"column":5,"offset":1354},"end":{"line":47,"column":1,"offset":1537}}},{"type":"raw","value":"<br>","position":{"start":{"line":47,"column":1,"offset":1537},"end":{"line":47,"column":5,"offset":1541}}},{"type":"text","value":"\n","position":{"start":{"line":47,"column":5,"offset":1541},"end":{"line":48,"column":1,"offset":1542}}},{"type":"raw","value":"<br>","position":{"start":{"line":48,"column":1,"offset":1542},"end":{"line":48,"column":5,"offset":1546}}}],"position":{"start":{"line":41,"column":1,"offset":1267},"end":{"line":48,"column":5,"offset":1546}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L15","position":{"start":{"line":50,"column":7,"offset":1554},"end":{"line":50,"column":10,"offset":1557}}}],"position":{"start":{"line":50,"column":1,"offset":1548},"end":{"line":50,"column":10,"offset":1557}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Why use a scheme interpreter to build a new one?\n","position":{"start":{"line":51,"column":1,"offset":1558},"end":{"line":52,"column":1,"offset":1608}}},{"type":"raw","value":"<br>","position":{"start":{"line":52,"column":1,"offset":1608},"end":{"line":52,"column":5,"offset":1612}}},{"type":"text","value":"\n","position":{"start":{"line":52,"column":5,"offset":1612},"end":{"line":53,"column":1,"offset":1613}}},{"type":"raw","value":"<br>","position":{"start":{"line":53,"column":1,"offset":1613},"end":{"line":53,"column":5,"offset":1617}}},{"type":"text","value":"\nHelps understand model of evaluation\n","position":{"start":{"line":53,"column":5,"offset":1617},"end":{"line":55,"column":1,"offset":1655}}},{"type":"raw","value":"<br>","position":{"start":{"line":55,"column":1,"offset":1655},"end":{"line":55,"column":5,"offset":1659}}},{"type":"text","value":"\nExperiment with modifications to scheme\n","position":{"start":{"line":55,"column":5,"offset":1659},"end":{"line":57,"column":1,"offset":1700}}},{"type":"raw","value":"<br>","position":{"start":{"line":57,"column":1,"offset":1700},"end":{"line":57,"column":5,"offset":1704}}},{"type":"text","value":"\nMost of the original interpreter is written in scheme.\n","position":{"start":{"line":57,"column":5,"offset":1704},"end":{"line":59,"column":1,"offset":1760}}},{"type":"raw","value":"<br>","position":{"start":{"line":59,"column":1,"offset":1760},"end":{"line":59,"column":5,"offset":1764}}},{"type":"text","value":"\nConveys a big concept in cs which is universality.\n","position":{"start":{"line":59,"column":5,"offset":1764},"end":{"line":61,"column":1,"offset":1816}}},{"type":"raw","value":"<br>","position":{"start":{"line":61,"column":1,"offset":1816},"end":{"line":61,"column":5,"offset":1820}}},{"type":"text","value":"\n","position":{"start":{"line":61,"column":5,"offset":1820},"end":{"line":62,"column":1,"offset":1821}}},{"type":"raw","value":"<br>","position":{"start":{"line":62,"column":1,"offset":1821},"end":{"line":62,"column":5,"offset":1825}}}],"position":{"start":{"line":51,"column":1,"offset":1558},"end":{"line":62,"column":5,"offset":1825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"universality is the concept of one machine that can run a large breadth of functions.\n","position":{"start":{"line":64,"column":1,"offset":1827},"end":{"line":65,"column":1,"offset":1913}}},{"type":"raw","value":"<br>","position":{"start":{"line":65,"column":1,"offset":1913},"end":{"line":65,"column":5,"offset":1917}}},{"type":"text","value":"\n","position":{"start":{"line":65,"column":5,"offset":1917},"end":{"line":66,"column":1,"offset":1918}}},{"type":"raw","value":"<br>","position":{"start":{"line":66,"column":1,"offset":1918},"end":{"line":66,"column":5,"offset":1922}}},{"type":"text","value":"\nApplicative: argument values\n","position":{"start":{"line":66,"column":5,"offset":1922},"end":{"line":68,"column":1,"offset":1952}}},{"type":"raw","value":"<br>","position":{"start":{"line":68,"column":1,"offset":1952},"end":{"line":68,"column":5,"offset":1956}}},{"type":"text","value":"\nNormal: argument expressions\n","position":{"start":{"line":68,"column":5,"offset":1956},"end":{"line":70,"column":1,"offset":1986}}},{"type":"raw","value":"<br>","position":{"start":{"line":70,"column":1,"offset":1986},"end":{"line":70,"column":5,"offset":1990}}}],"position":{"start":{"line":64,"column":1,"offset":1827},"end":{"line":70,"column":5,"offset":1990}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Read: takes the input and turns it into box pointer diagrams.\n","position":{"start":{"line":72,"column":1,"offset":1992},"end":{"line":73,"column":1,"offset":2055}}},{"type":"raw","value":"<br>","position":{"start":{"line":73,"column":1,"offset":2055},"end":{"line":73,"column":5,"offset":2059}}},{"type":"text","value":"\nQuote: takes cadr of the next expression.\n","position":{"start":{"line":73,"column":5,"offset":2059},"end":{"line":75,"column":1,"offset":2102}}},{"type":"raw","value":"<br>","position":{"start":{"line":75,"column":1,"offset":2102},"end":{"line":75,"column":5,"offset":2106}}}],"position":{"start":{"line":72,"column":1,"offset":1992},"end":{"line":75,"column":5,"offset":2106}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L16","position":{"start":{"line":78,"column":7,"offset":2115},"end":{"line":78,"column":10,"offset":2118}}}],"position":{"start":{"line":78,"column":1,"offset":2109},"end":{"line":78,"column":10,"offset":2118}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"concepts:\n","position":{"start":{"line":80,"column":1,"offset":2120},"end":{"line":81,"column":1,"offset":2130}}},{"type":"raw","value":"<br>","position":{"start":{"line":81,"column":1,"offset":2130},"end":{"line":81,"column":5,"offset":2134}}},{"type":"text","value":"\ntype tagging\n","position":{"start":{"line":81,"column":5,"offset":2134},"end":{"line":83,"column":1,"offset":2148}}},{"type":"raw","value":"<br>","position":{"start":{"line":83,"column":1,"offset":2148},"end":{"line":83,"column":5,"offset":2152}}},{"type":"text","value":"\ndata directed programming\n","position":{"start":{"line":83,"column":5,"offset":2152},"end":{"line":85,"column":1,"offset":2179}}},{"type":"raw","value":"<br>","position":{"start":{"line":85,"column":1,"offset":2179},"end":{"line":85,"column":5,"offset":2183}}},{"type":"text","value":"\nmessage passing\n","position":{"start":{"line":85,"column":5,"offset":2183},"end":{"line":87,"column":1,"offset":2200}}},{"type":"raw","value":"<br>","position":{"start":{"line":87,"column":1,"offset":2200},"end":{"line":87,"column":5,"offset":2204}}}],"position":{"start":{"line":80,"column":1,"offset":2120},"end":{"line":87,"column":5,"offset":2204}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"type tagging: car is the symbol, cdr is the arguments.\n","position":{"start":{"line":89,"column":1,"offset":2206},"end":{"line":90,"column":1,"offset":2261}}},{"type":"raw","value":"<br>","position":{"start":{"line":90,"column":1,"offset":2261},"end":{"line":90,"column":5,"offset":2265}}}],"position":{"start":{"line":89,"column":1,"offset":2206},"end":{"line":90,"column":5,"offset":2265}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"data directed programming: write one operation that does everything.\n","position":{"start":{"line":92,"column":1,"offset":2267},"end":{"line":93,"column":1,"offset":2336}}},{"type":"raw","value":"<br>","position":{"start":{"line":93,"column":1,"offset":2336},"end":{"line":93,"column":5,"offset":2340}}},{"type":"text","value":"\nNot functional programming if you call the same expression and get different results.\n","position":{"start":{"line":93,"column":5,"offset":2340},"end":{"line":95,"column":1,"offset":2427}}},{"type":"raw","value":"<br>","position":{"start":{"line":95,"column":1,"offset":2427},"end":{"line":95,"column":5,"offset":2431}}}],"position":{"start":{"line":92,"column":1,"offset":2267},"end":{"line":95,"column":5,"offset":2431}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(get &#39;brian &#39;address)\n; #f\n(put &#39;brian &#39;address &#39;(781 Soda))\n; ok\n(get &#39;brian &#39;address)\n; (781 soda)</code></pre></div>","position":{"start":{"line":96,"column":1,"offset":2432},"end":{"line":103,"column":4,"offset":2540}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":105,"column":1,"offset":2542},"end":{"line":106,"column":5,"offset":2551}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is not functional because same expression returns different results.\nYou can still use these in a functional way by assigning at the beginning and never reassigning.\n","position":{"start":{"line":108,"column":1,"offset":2553},"end":{"line":110,"column":1,"offset":2724}}},{"type":"raw","value":"<br>","position":{"start":{"line":110,"column":1,"offset":2724},"end":{"line":110,"column":5,"offset":2728}}}],"position":{"start":{"line":108,"column":1,"offset":2553},"end":{"line":110,"column":5,"offset":2728}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L17","position":{"start":{"line":114,"column":7,"offset":2738},"end":{"line":114,"column":10,"offset":2741}}}],"position":{"start":{"line":114,"column":1,"offset":2732},"end":{"line":114,"column":10,"offset":2741}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Horizontal slices through the table: messaging. The name of the interface knows all the function.","position":{"start":{"line":116,"column":1,"offset":2743},"end":{"line":116,"column":98,"offset":2840}}}],"position":{"start":{"line":116,"column":1,"offset":2743},"end":{"line":116,"column":98,"offset":2840}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":118,"column":1,"offset":2842},"end":{"line":118,"column":5,"offset":2846}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Horizontal slicing good for making prototypes.","position":{"start":{"line":120,"column":1,"offset":2848},"end":{"line":120,"column":47,"offset":2894}}}],"position":{"start":{"line":120,"column":1,"offset":2848},"end":{"line":120,"column":47,"offset":2894}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":122,"column":1,"offset":2896},"end":{"line":122,"column":5,"offset":2900}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"4 kinds of numbers:\n","position":{"start":{"line":124,"column":1,"offset":2902},"end":{"line":125,"column":1,"offset":2922}}},{"type":"raw","value":"<br>","position":{"start":{"line":125,"column":1,"offset":2922},"end":{"line":125,"column":5,"offset":2926}}},{"type":"text","value":"\ninteger\n","position":{"start":{"line":125,"column":5,"offset":2926},"end":{"line":127,"column":1,"offset":2935}}},{"type":"raw","value":"<br>","position":{"start":{"line":127,"column":1,"offset":2935},"end":{"line":127,"column":5,"offset":2939}}},{"type":"text","value":"\nrational\n","position":{"start":{"line":127,"column":5,"offset":2939},"end":{"line":129,"column":1,"offset":2949}}},{"type":"raw","value":"<br>","position":{"start":{"line":129,"column":1,"offset":2949},"end":{"line":129,"column":5,"offset":2953}}},{"type":"text","value":"\nreal\n","position":{"start":{"line":129,"column":5,"offset":2953},"end":{"line":131,"column":1,"offset":2959}}},{"type":"raw","value":"<br>","position":{"start":{"line":131,"column":1,"offset":2959},"end":{"line":131,"column":5,"offset":2963}}},{"type":"text","value":"\ncomplex\n","position":{"start":{"line":131,"column":5,"offset":2963},"end":{"line":133,"column":1,"offset":2972}}},{"type":"raw","value":"<br>","position":{"start":{"line":133,"column":1,"offset":2972},"end":{"line":133,"column":5,"offset":2976}}},{"type":"text","value":"\n","position":{"start":{"line":133,"column":5,"offset":2976},"end":{"line":134,"column":1,"offset":2977}}},{"type":"raw","value":"<br>","position":{"start":{"line":134,"column":1,"offset":2977},"end":{"line":134,"column":5,"offset":2981}}},{"type":"text","value":"\nregular people: 1 operand = unary, 2 operands = binary\n","position":{"start":{"line":134,"column":5,"offset":2981},"end":{"line":136,"column":1,"offset":3037}}},{"type":"raw","value":"<br>","position":{"start":{"line":136,"column":1,"offset":3037},"end":{"line":136,"column":5,"offset":3041}}},{"type":"text","value":"\n","position":{"start":{"line":136,"column":5,"offset":3041},"end":{"line":137,"column":1,"offset":3042}}},{"type":"raw","value":"<br>","position":{"start":{"line":137,"column":1,"offset":3042},"end":{"line":137,"column":5,"offset":3046}}},{"type":"text","value":"\nprogrammers: 1 operand = monadic, 2 operands = dyadic\n","position":{"start":{"line":137,"column":5,"offset":3046},"end":{"line":139,"column":1,"offset":3101}}},{"type":"raw","value":"<br>","position":{"start":{"line":139,"column":1,"offset":3101},"end":{"line":139,"column":5,"offset":3105}}},{"type":"text","value":"\n","position":{"start":{"line":139,"column":5,"offset":3105},"end":{"line":140,"column":1,"offset":3106}}},{"type":"raw","value":"<br>","position":{"start":{"line":140,"column":1,"offset":3106},"end":{"line":140,"column":5,"offset":3110}}}],"position":{"start":{"line":124,"column":1,"offset":2902},"end":{"line":140,"column":5,"offset":3110}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LAB","position":{"start":{"line":142,"column":6,"offset":3117},"end":{"line":142,"column":9,"offset":3120}}}],"position":{"start":{"line":142,"column":1,"offset":3112},"end":{"line":142,"column":9,"offset":3120}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"lab 3","position":{"start":{"line":143,"column":7,"offset":3127},"end":{"line":143,"column":12,"offset":3132}}}],"position":{"start":{"line":143,"column":1,"offset":3121},"end":{"line":143,"column":12,"offset":3132}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (count-change amount)\n(cc amount &#39;(50 25 10 5 1)))\n\n(define (cc amount kinds-of-coins)\n    (cond ((= amount 0) 1)\n    ((or (&lt; amount 0) (equal? kinds-of-coins &#39;())) 0)\n    (else (+ (cc amount\n                (cdr kinds-of-coins))\n    (cc (- amount \n    (first-denomination kinds-of-coins))\n    kinds-of-coins)))))\n\n(define (first-denomination kinds-of-coins)\n(car kinds-of-coins))</code></pre></div>","position":{"start":{"line":144,"column":1,"offset":3133},"end":{"line":159,"column":4,"offset":3529}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This modifies the procedure on page 40-41 for count-change.","position":{"start":{"line":160,"column":1,"offset":3530},"end":{"line":160,"column":60,"offset":3589}}}],"position":{"start":{"line":160,"column":1,"offset":3530},"end":{"line":160,"column":60,"offset":3589}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"READINGS","position":{"start":{"line":161,"column":6,"offset":3595},"end":{"line":161,"column":14,"offset":3603}}}],"position":{"start":{"line":161,"column":1,"offset":3590},"end":{"line":161,"column":14,"offset":3603}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"2.4","position":{"start":{"line":162,"column":7,"offset":3610},"end":{"line":162,"column":10,"offset":3613}}}],"position":{"start":{"line":162,"column":1,"offset":3604},"end":{"line":162,"column":10,"offset":3613}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"2.5","position":{"start":{"line":163,"column":7,"offset":3620},"end":{"line":163,"column":10,"offset":3623}}}],"position":{"start":{"line":163,"column":1,"offset":3614},"end":{"line":163,"column":10,"offset":3623}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":163,"column":10,"offset":3623}}}}