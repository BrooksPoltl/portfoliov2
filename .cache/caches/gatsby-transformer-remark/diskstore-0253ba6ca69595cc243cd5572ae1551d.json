{"expireTime":9007200842156607000,"key":"transformer-remark-markdown-html-ast-a09b9b35279417f3cce481720921c45c-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54}}},{"type":"element","tagName":"a","properties":{"href":"https://teachyourselfcs.com/"},"children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70}}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101}}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153}}},{"type":"element","tagName":"a","properties":{"href":"http://localhost:8000/teachyourselfcs/programming/00:getting-started/"},"children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158}}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":128,"offset":230}}},{"type":"text","value":".","position":{"start":{"line":2,"column":128,"offset":230},"end":{"line":2,"column":129,"offset":231}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":129,"offset":231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"INTRO","position":{"start":{"line":4,"column":6,"offset":238},"end":{"line":4,"column":11,"offset":243}}}],"position":{"start":{"line":4,"column":1,"offset":233},"end":{"line":4,"column":11,"offset":243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":5,"column":6,"offset":249},"end":{"line":5,"column":14,"offset":257}}}],"position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":5,"column":14,"offset":257}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L01","position":{"start":{"line":6,"column":7,"offset":264},"end":{"line":6,"column":10,"offset":267}}}],"position":{"start":{"line":6,"column":1,"offset":258},"end":{"line":6,"column":10,"offset":267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":8,"column":8,"offset":276},"end":{"line":8,"column":30,"offset":298}}}],"position":{"start":{"line":8,"column":1,"offset":269},"end":{"line":8,"column":30,"offset":298}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":10,"column":1,"offset":300},"end":{"line":11,"column":1,"offset":444}}},{"type":"raw","value":"<br>","position":{"start":{"line":11,"column":1,"offset":444},"end":{"line":11,"column":5,"offset":448}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":11,"column":5,"offset":448},"end":{"line":11,"column":16,"offset":459}}},{"type":"raw","value":"<br>","position":{"start":{"line":11,"column":16,"offset":459},"end":{"line":11,"column":20,"offset":463}}},{"type":"text","value":"\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n","position":{"start":{"line":11,"column":20,"offset":463},"end":{"line":13,"column":1,"offset":607}}},{"type":"raw","value":"<br>","position":{"start":{"line":13,"column":1,"offset":607},"end":{"line":13,"column":5,"offset":611}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":13,"column":5,"offset":611},"end":{"line":13,"column":16,"offset":622}}},{"type":"raw","value":"<br>","position":{"start":{"line":13,"column":16,"offset":622},"end":{"line":13,"column":20,"offset":626}}},{"type":"text","value":"\nNow lets say we want to do something like:  ","position":{"start":{"line":13,"column":20,"offset":626},"end":{"line":14,"column":45,"offset":671}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":45,"offset":671},"end":{"line":14,"column":49,"offset":675}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 +  3 - 4</code>","position":{"start":{"line":14,"column":49,"offset":675},"end":{"line":14,"column":65,"offset":691}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":65,"offset":691},"end":{"line":14,"column":69,"offset":695}}},{"type":"text","value":"\nIn Scheme you can simply nest operators:\n","position":{"start":{"line":14,"column":69,"offset":695},"end":{"line":16,"column":1,"offset":738}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":1,"offset":738},"end":{"line":16,"column":5,"offset":742}}},{"type":"raw","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":16,"column":5,"offset":742},"end":{"line":16,"column":22,"offset":759}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":22,"offset":759},"end":{"line":16,"column":26,"offset":763}}},{"type":"text","value":"\n","position":{"start":{"line":16,"column":26,"offset":763},"end":{"line":17,"column":1,"offset":764}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":1,"offset":764},"end":{"line":17,"column":5,"offset":768}}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer. Scheme takes the arguments and then computes the functions of the arguments until it gets down to a primitive value.\n","position":{"start":{"line":17,"column":5,"offset":768},"end":{"line":19,"column":1,"offset":1003}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":19,"column":1,"offset":1003},"end":{"line":19,"column":12,"offset":1014}}},{"type":"text","value":" is a function and not a primitive value, so it calls ","position":{"start":{"line":19,"column":12,"offset":1014},"end":{"line":19,"column":66,"offset":1068}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":19,"column":66,"offset":1068},"end":{"line":19,"column":77,"offset":1079}}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":19,"column":77,"offset":1079},"end":{"line":19,"column":104,"offset":1106}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":19,"column":104,"offset":1106},"end":{"line":19,"column":107,"offset":1109}}},{"type":"text","value":" is now 7 and it has 2 primitive values, meaning it can calculate the ","position":{"start":{"line":19,"column":107,"offset":1109},"end":{"line":19,"column":177,"offset":1179}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":19,"column":177,"offset":1179},"end":{"line":19,"column":180,"offset":1182}}},{"type":"text","value":" to get 3.","position":{"start":{"line":19,"column":180,"offset":1182},"end":{"line":19,"column":190,"offset":1192}}}],"position":{"start":{"line":10,"column":1,"offset":300},"end":{"line":19,"column":190,"offset":1192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Define","position":{"start":{"line":21,"column":8,"offset":1201},"end":{"line":21,"column":14,"offset":1207}}}],"position":{"start":{"line":21,"column":1,"offset":1194},"end":{"line":21,"column":14,"offset":1207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":22,"column":1,"offset":1208},"end":{"line":22,"column":9,"offset":1216}}},{"type":"text","value":" is an interesting keyword. It can be used to create functions: ","position":{"start":{"line":22,"column":9,"offset":1216},"end":{"line":22,"column":73,"offset":1280}}}],"position":{"start":{"line":22,"column":1,"offset":1208},"end":{"line":22,"column":73,"offset":1280}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":23,"column":1,"offset":1281},"end":{"line":26,"column":4,"offset":1320}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\nWhere `square` is the name of the function and `x` is a argument that the function takes in.<br> The syntax is very different from other languages, but try to think of `define` as a function itself. The first arguments first argument is a symbol (square) that will be the _procedure_. The rest of the arguments in the first argument are arguments for that procedure in this case `x`. The second argument that define takes in is the function that the procedure will call `(* x x)`. ","position":{"start":{"line":27,"column":1,"offset":1321},"end":{"line":28,"column":482,"offset":1807}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define can also be used to store constants:","position":{"start":{"line":30,"column":1,"offset":1809},"end":{"line":30,"column":44,"offset":1852}}}],"position":{"start":{"line":30,"column":1,"offset":1809},"end":{"line":30,"column":44,"offset":1852}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    (define )</code></pre></div>","position":{"start":{"line":31,"column":1,"offset":1853},"end":{"line":33,"column":4,"offset":1874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L02","position":{"start":{"line":34,"column":7,"offset":1881},"end":{"line":34,"column":10,"offset":1884}}}],"position":{"start":{"line":34,"column":1,"offset":1875},"end":{"line":34,"column":10,"offset":1884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"BOOK","position":{"start":{"line":35,"column":6,"offset":1890},"end":{"line":35,"column":10,"offset":1894}}}],"position":{"start":{"line":35,"column":1,"offset":1885},"end":{"line":35,"column":10,"offset":1894}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.1","position":{"start":{"line":36,"column":7,"offset":1901},"end":{"line":36,"column":10,"offset":1904}}}],"position":{"start":{"line":36,"column":1,"offset":1895},"end":{"line":36,"column":10,"offset":1904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.2","position":{"start":{"line":37,"column":7,"offset":1911},"end":{"line":37,"column":10,"offset":1914}}}],"position":{"start":{"line":37,"column":1,"offset":1905},"end":{"line":37,"column":10,"offset":1914}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.3","position":{"start":{"line":38,"column":7,"offset":1921},"end":{"line":38,"column":10,"offset":1924}}}],"position":{"start":{"line":38,"column":1,"offset":1915},"end":{"line":38,"column":10,"offset":1924}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LABS","position":{"start":{"line":39,"column":6,"offset":1930},"end":{"line":39,"column":10,"offset":1934}}}],"position":{"start":{"line":39,"column":1,"offset":1925},"end":{"line":39,"column":10,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1","position":{"start":{"line":40,"column":7,"offset":1941},"end":{"line":40,"column":12,"offset":1946}}}],"position":{"start":{"line":40,"column":1,"offset":1935},"end":{"line":40,"column":13,"offset":1947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 2","position":{"start":{"line":41,"column":7,"offset":1954},"end":{"line":41,"column":12,"offset":1959}}}],"position":{"start":{"line":41,"column":1,"offset":1948},"end":{"line":41,"column":13,"offset":1960}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":41,"column":13,"offset":1960}}}}