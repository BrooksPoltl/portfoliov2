{"expireTime":9007200842156613000,"key":"transformer-remark-markdown-html-13ebbcdd2f619325daca8fb7a17fa738-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>This article is a part of a series where I go through <a href=\"https://teachyourselfcs.com/\">teachyourselfcs</a>.\nIf you would like to start at the beginning start <a href=\"http://localhost:8000/teachyourselfcs/programming/00:getting-started/\">here</a>.</p>\n<h4>INTRO</h4>\n<h4>LECTURES</h4>\n<h5>L01</h5>\n<h6>Mathmatical Operations</h6>\n<p>Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n<br><code class=\"language-text\">2 + 2 + 3</code><br>\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n<br><code class=\"language-text\">(+ 2 2 3)</code><br>\nNow lets say we want to do something like:  <br><code class=\"language-text\">2 + 2 +  3 - 4</code><br>\nIn Scheme you can simply nest operators:\n<br><code class=\"language-text\">(- (+ 2 2 3) 4)</code><br>\n<br>\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer. Scheme takes the arguments and then computes the functions of the arguments until it gets down to a primitive value.\n<code class=\"language-text\">(+ 2 2 3)</code> is a function and not a primitive value, so it calls <code class=\"language-text\">(+ 2 2 3)</code>. The left argument of the <code class=\"language-text\">-</code> is now 7 and it has 2 primitive values, meaning it can calculate the <code class=\"language-text\">-</code> to get 3.</p>\n<h6>Define</h6>\n<p><code class=\"language-text\">define</code> is an interesting keyword. It can be used to create functions: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>\n<br>\n<p>Where <code class=\"language-text\">square</code> is the name of the function and <code class=\"language-text\">x</code> is a argument that the function takes in.<br> The syntax is very different from other languages, but try to think of <code class=\"language-text\">define</code> as a function itself. The first arguments first argument is a symbol (square) that will be the <em>procedure</em>. The rest of the arguments in the first argument are arguments for that procedure in this case <code class=\"language-text\">x</code>. The second argument that define takes in is the function that the procedure will call <code class=\"language-text\">(* x x)</code>. </p>\n<p>Define can also be used to store constants:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    (define )</code></pre></div>\n<h5>L02</h5>\n<h4>BOOK</h4>\n<h5>1.1</h5>\n<h5>1.2</h5>\n<h5>1.3</h5>\n<h4>LABS</h4>\n<h5>Lab 1</h5>\n<h5>Lab 2</h5>"}