{"expireTime":9007200842256467000,"key":"transformer-remark-markdown-html-ast-1eaaccef9ed79a293330110be33977b1-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54}}},{"type":"element","tagName":"a","properties":{"href":"https://teachyourselfcs.com/"},"children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70}}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101}}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153}}},{"type":"element","tagName":"a","properties":{"href":"http://localhost:8000/teachyourselfcs/programming/00:getting-started/"},"children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158}}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":128,"offset":230}}},{"type":"text","value":".","position":{"start":{"line":2,"column":128,"offset":230},"end":{"line":2,"column":129,"offset":231}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":129,"offset":231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"INTRO","position":{"start":{"line":4,"column":6,"offset":238},"end":{"line":4,"column":11,"offset":243}}}],"position":{"start":{"line":4,"column":1,"offset":233},"end":{"line":4,"column":11,"offset":243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I will be following the Summer 2010 ","position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":5,"column":37,"offset":280}}},{"type":"element","tagName":"a","properties":{"href":"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html"},"children":[{"type":"text","value":"Calendar","position":{"start":{"line":5,"column":38,"offset":281},"end":{"line":5,"column":46,"offset":289}}}],"position":{"start":{"line":5,"column":37,"offset":280},"end":{"line":5,"column":101,"offset":344}}},{"type":"text","value":"\nso each week will consist of 4 lectures and 2 labs.","position":{"start":{"line":5,"column":101,"offset":344},"end":{"line":6,"column":52,"offset":396}}}],"position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":6,"column":52,"offset":396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"READINGS","position":{"start":{"line":8,"column":6,"offset":403},"end":{"line":8,"column":14,"offset":411}}}],"position":{"start":{"line":8,"column":1,"offset":398},"end":{"line":8,"column":14,"offset":411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.1 The Elements of Programming","position":{"start":{"line":9,"column":7,"offset":418},"end":{"line":9,"column":38,"offset":449}}}],"position":{"start":{"line":9,"column":1,"offset":412},"end":{"line":9,"column":38,"offset":449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The section starts off saying that there are 3 mechanisms that languages utilize to simplify complex ideas:\n","position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":11,"column":1,"offset":558}}},{"type":"raw","value":"<br>","position":{"start":{"line":11,"column":1,"offset":558},"end":{"line":11,"column":5,"offset":562}}},{"type":"text","value":"\nprimitive expressions: simplest entities within a language.\n","position":{"start":{"line":11,"column":5,"offset":562},"end":{"line":13,"column":1,"offset":623}}},{"type":"raw","value":"<br>","position":{"start":{"line":13,"column":1,"offset":623},"end":{"line":13,"column":5,"offset":627}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":5,"offset":627},"end":{"line":14,"column":1,"offset":628}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":1,"offset":628},"end":{"line":14,"column":5,"offset":632}}},{"type":"text","value":"\nmeans of combination: The ability to combine simple entities.\n","position":{"start":{"line":14,"column":5,"offset":632},"end":{"line":16,"column":1,"offset":696}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":1,"offset":696},"end":{"line":16,"column":5,"offset":700}}},{"type":"text","value":"\n","position":{"start":{"line":16,"column":5,"offset":700},"end":{"line":17,"column":1,"offset":701}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":1,"offset":701},"end":{"line":17,"column":5,"offset":705}}},{"type":"text","value":"\nmeans of abstraction: The ability to name and manipulate combined elements.\n","position":{"start":{"line":17,"column":5,"offset":705},"end":{"line":19,"column":1,"offset":782}}},{"type":"raw","value":"<br>","position":{"start":{"line":19,"column":1,"offset":782},"end":{"line":19,"column":5,"offset":786}}},{"type":"text","value":"\n","position":{"start":{"line":19,"column":5,"offset":786},"end":{"line":20,"column":1,"offset":787}}},{"type":"raw","value":"<br>","position":{"start":{"line":20,"column":1,"offset":787},"end":{"line":20,"column":5,"offset":791}}},{"type":"text","value":"\nBreaking down a compound expression:\n","position":{"start":{"line":20,"column":5,"offset":791},"end":{"line":22,"column":1,"offset":829}}},{"type":"raw","value":"<br>","position":{"start":{"line":22,"column":1,"offset":829},"end":{"line":22,"column":5,"offset":833}}},{"type":"text","value":"\ncombination: ","position":{"start":{"line":22,"column":5,"offset":833},"end":{"line":23,"column":14,"offset":847}}},{"type":"raw","value":"<code class=\"language-text\">(+ 137 349)</code>","position":{"start":{"line":23,"column":14,"offset":847},"end":{"line":23,"column":27,"offset":860}}},{"type":"text","value":"\n","position":{"start":{"line":23,"column":27,"offset":860},"end":{"line":24,"column":1,"offset":861}}},{"type":"raw","value":"<br>","position":{"start":{"line":24,"column":1,"offset":861},"end":{"line":24,"column":5,"offset":865}}},{"type":"text","value":"\noperator: ","position":{"start":{"line":24,"column":5,"offset":865},"end":{"line":25,"column":11,"offset":876}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":25,"column":11,"offset":876},"end":{"line":25,"column":14,"offset":879}}},{"type":"text","value":"\n","position":{"start":{"line":25,"column":14,"offset":879},"end":{"line":26,"column":1,"offset":880}}},{"type":"raw","value":"<br>","position":{"start":{"line":26,"column":1,"offset":880},"end":{"line":26,"column":5,"offset":884}}},{"type":"text","value":"\noperands: ","position":{"start":{"line":26,"column":5,"offset":884},"end":{"line":27,"column":11,"offset":895}}},{"type":"raw","value":"<code class=\"language-text\">137</code>","position":{"start":{"line":27,"column":11,"offset":895},"end":{"line":27,"column":16,"offset":900}}},{"type":"text","value":" ","position":{"start":{"line":27,"column":16,"offset":900},"end":{"line":27,"column":17,"offset":901}}},{"type":"raw","value":"<code class=\"language-text\">349</code>","position":{"start":{"line":27,"column":17,"offset":901},"end":{"line":27,"column":22,"offset":906}}},{"type":"text","value":"\n","position":{"start":{"line":27,"column":22,"offset":906},"end":{"line":28,"column":1,"offset":907}}},{"type":"raw","value":"<br>","position":{"start":{"line":28,"column":1,"offset":907},"end":{"line":28,"column":5,"offset":911}}},{"type":"text","value":"\n","position":{"start":{"line":28,"column":5,"offset":911},"end":{"line":29,"column":1,"offset":912}}},{"type":"raw","value":"<br>","position":{"start":{"line":29,"column":1,"offset":912},"end":{"line":29,"column":5,"offset":916}}},{"type":"text","value":"\nThe interpreter runs in a “read-eval-print” loop. That is why it is not necessary to print stuff out like in other languages.\n","position":{"start":{"line":29,"column":5,"offset":916},"end":{"line":31,"column":1,"offset":1043}}},{"type":"raw","value":"<br>","position":{"start":{"line":31,"column":1,"offset":1043},"end":{"line":31,"column":5,"offset":1047}}},{"type":"text","value":"\n","position":{"start":{"line":31,"column":5,"offset":1047},"end":{"line":32,"column":1,"offset":1048}}},{"type":"raw","value":"<br>","position":{"start":{"line":32,"column":1,"offset":1048},"end":{"line":32,"column":5,"offset":1052}}},{"type":"text","value":"\nEnvironment: The name-object pairs the interpreter keeps in memory.\n","position":{"start":{"line":32,"column":5,"offset":1052},"end":{"line":34,"column":1,"offset":1121}}},{"type":"raw","value":"<br>","position":{"start":{"line":34,"column":1,"offset":1121},"end":{"line":34,"column":5,"offset":1125}}},{"type":"text","value":"\n","position":{"start":{"line":34,"column":5,"offset":1125},"end":{"line":35,"column":1,"offset":1126}}},{"type":"raw","value":"<br>","position":{"start":{"line":35,"column":1,"offset":1126},"end":{"line":35,"column":5,"offset":1130}}}],"position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":35,"column":5,"offset":1130}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedures can be used to build on top of other Compound Procedures:\n","position":{"start":{"line":37,"column":1,"offset":1132},"end":{"line":38,"column":1,"offset":1210}}},{"type":"raw","value":"<br>","position":{"start":{"line":38,"column":1,"offset":1210},"end":{"line":38,"column":5,"offset":1214}}}],"position":{"start":{"line":37,"column":1,"offset":1132},"end":{"line":38,"column":5,"offset":1214}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (sum-of-squares x y)\n(+ (square x) (square y))</code></pre></div>","position":{"start":{"line":39,"column":1,"offset":1215},"end":{"line":42,"column":4,"offset":1277}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":43,"column":1,"offset":1278},"end":{"line":43,"column":5,"offset":1282}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedure: procedure that you make out of other procedures.","position":{"start":{"line":45,"column":1,"offset":1284},"end":{"line":45,"column":69,"offset":1352}}}],"position":{"start":{"line":45,"column":1,"offset":1284},"end":{"line":45,"column":69,"offset":1352}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Primitive Procedure: procedure built into the language ex: ","position":{"start":{"line":47,"column":1,"offset":1354},"end":{"line":47,"column":60,"offset":1413}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":47,"column":60,"offset":1413},"end":{"line":47,"column":63,"offset":1416}}},{"type":"text","value":"\n","position":{"start":{"line":47,"column":63,"offset":1416},"end":{"line":48,"column":1,"offset":1417}}},{"type":"raw","value":"<br>","position":{"start":{"line":48,"column":1,"offset":1417},"end":{"line":48,"column":5,"offset":1421}}},{"type":"text","value":"\n","position":{"start":{"line":48,"column":5,"offset":1421},"end":{"line":49,"column":1,"offset":1422}}},{"type":"raw","value":"<br>","position":{"start":{"line":49,"column":1,"offset":1422},"end":{"line":49,"column":5,"offset":1426}}},{"type":"text","value":"\nBoth are used exactly the same.\n","position":{"start":{"line":49,"column":5,"offset":1426},"end":{"line":51,"column":1,"offset":1459}}},{"type":"raw","value":"<br>","position":{"start":{"line":51,"column":1,"offset":1459},"end":{"line":51,"column":5,"offset":1463}}},{"type":"text","value":"\n","position":{"start":{"line":51,"column":5,"offset":1463},"end":{"line":52,"column":1,"offset":1464}}},{"type":"raw","value":"<br>","position":{"start":{"line":52,"column":1,"offset":1464},"end":{"line":52,"column":5,"offset":1468}}},{"type":"text","value":"\nWhen writing programs it is important to write modular code that doesn’t care how the other things are computed, only what is computed. This is known as a Black-Box abstraction.\n","position":{"start":{"line":52,"column":5,"offset":1468},"end":{"line":54,"column":1,"offset":1647}}},{"type":"raw","value":"<br>","position":{"start":{"line":54,"column":1,"offset":1647},"end":{"line":54,"column":5,"offset":1651}}}],"position":{"start":{"line":47,"column":1,"offset":1354},"end":{"line":54,"column":5,"offset":1651}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lisp allows for block structure so you can nest a define in another define, and only the parent will have access to the nested define.\nLisp also allows the sub define functions to have access to parameters in the parents scope. This is called lexical scoping.\n","position":{"start":{"line":56,"column":1,"offset":1653},"end":{"line":58,"column":1,"offset":1913}}},{"type":"raw","value":"<br>","position":{"start":{"line":58,"column":1,"offset":1913},"end":{"line":58,"column":5,"offset":1917}}}],"position":{"start":{"line":56,"column":1,"offset":1653},"end":{"line":58,"column":5,"offset":1917}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.2","position":{"start":{"line":60,"column":7,"offset":1925},"end":{"line":60,"column":10,"offset":1928}}}],"position":{"start":{"line":60,"column":1,"offset":1919},"end":{"line":60,"column":10,"offset":1928}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.3","position":{"start":{"line":61,"column":7,"offset":1935},"end":{"line":61,"column":10,"offset":1938}}}],"position":{"start":{"line":61,"column":1,"offset":1929},"end":{"line":61,"column":10,"offset":1938}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":63,"column":6,"offset":1945},"end":{"line":63,"column":14,"offset":1953}}}],"position":{"start":{"line":63,"column":1,"offset":1940},"end":{"line":63,"column":14,"offset":1953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L01","position":{"start":{"line":64,"column":7,"offset":1960},"end":{"line":64,"column":10,"offset":1963}}}],"position":{"start":{"line":64,"column":1,"offset":1954},"end":{"line":64,"column":10,"offset":1963}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":66,"column":8,"offset":1972},"end":{"line":66,"column":30,"offset":1994}}}],"position":{"start":{"line":66,"column":1,"offset":1965},"end":{"line":66,"column":30,"offset":1994}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":68,"column":1,"offset":1996},"end":{"line":69,"column":1,"offset":2140}}},{"type":"raw","value":"<br>","position":{"start":{"line":69,"column":1,"offset":2140},"end":{"line":69,"column":5,"offset":2144}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":69,"column":5,"offset":2144},"end":{"line":69,"column":16,"offset":2155}}},{"type":"raw","value":"<br>","position":{"start":{"line":69,"column":16,"offset":2155},"end":{"line":69,"column":20,"offset":2159}}},{"type":"text","value":"\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n","position":{"start":{"line":69,"column":20,"offset":2159},"end":{"line":71,"column":1,"offset":2303}}},{"type":"raw","value":"<br>","position":{"start":{"line":71,"column":1,"offset":2303},"end":{"line":71,"column":5,"offset":2307}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":71,"column":5,"offset":2307},"end":{"line":71,"column":16,"offset":2318}}},{"type":"raw","value":"<br>","position":{"start":{"line":71,"column":16,"offset":2318},"end":{"line":71,"column":20,"offset":2322}}},{"type":"text","value":"\nNow lets say we want to do something like:  ","position":{"start":{"line":71,"column":20,"offset":2322},"end":{"line":72,"column":45,"offset":2367}}},{"type":"raw","value":"<br>","position":{"start":{"line":72,"column":45,"offset":2367},"end":{"line":72,"column":49,"offset":2371}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 +  3 - 4</code>","position":{"start":{"line":72,"column":49,"offset":2371},"end":{"line":72,"column":65,"offset":2387}}},{"type":"raw","value":"<br>","position":{"start":{"line":72,"column":65,"offset":2387},"end":{"line":72,"column":69,"offset":2391}}},{"type":"text","value":"\nIn Scheme you can simply nest operators:\n","position":{"start":{"line":72,"column":69,"offset":2391},"end":{"line":74,"column":1,"offset":2434}}},{"type":"raw","value":"<br>","position":{"start":{"line":74,"column":1,"offset":2434},"end":{"line":74,"column":5,"offset":2438}}},{"type":"raw","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":74,"column":5,"offset":2438},"end":{"line":74,"column":22,"offset":2455}}},{"type":"raw","value":"<br>","position":{"start":{"line":74,"column":22,"offset":2455},"end":{"line":74,"column":26,"offset":2459}}},{"type":"text","value":"\n","position":{"start":{"line":74,"column":26,"offset":2459},"end":{"line":75,"column":1,"offset":2460}}},{"type":"raw","value":"<br>","position":{"start":{"line":75,"column":1,"offset":2460},"end":{"line":75,"column":5,"offset":2464}}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer.\n","position":{"start":{"line":75,"column":5,"offset":2464},"end":{"line":77,"column":1,"offset":2582}}},{"type":"raw","value":"<br>","position":{"start":{"line":77,"column":1,"offset":2582},"end":{"line":77,"column":5,"offset":2586}}},{"type":"text","value":"\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value.\n","position":{"start":{"line":77,"column":5,"offset":2586},"end":{"line":79,"column":1,"offset":2707}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":79,"column":1,"offset":2707},"end":{"line":79,"column":12,"offset":2718}}},{"type":"text","value":" is a expression and not a primitive value, so it calls ","position":{"start":{"line":79,"column":12,"offset":2718},"end":{"line":79,"column":68,"offset":2774}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":79,"column":68,"offset":2774},"end":{"line":79,"column":79,"offset":2785}}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":79,"column":79,"offset":2785},"end":{"line":79,"column":106,"offset":2812}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":79,"column":106,"offset":2812},"end":{"line":79,"column":109,"offset":2815}}},{"type":"text","value":" is now 7 and both arguments are primitive values, meaning it can calculate the ","position":{"start":{"line":79,"column":109,"offset":2815},"end":{"line":79,"column":189,"offset":2895}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":79,"column":189,"offset":2895},"end":{"line":79,"column":192,"offset":2898}}},{"type":"text","value":" to get 3.","position":{"start":{"line":79,"column":192,"offset":2898},"end":{"line":79,"column":202,"offset":2908}}}],"position":{"start":{"line":68,"column":1,"offset":1996},"end":{"line":79,"column":202,"offset":2908}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Define","position":{"start":{"line":81,"column":8,"offset":2917},"end":{"line":81,"column":14,"offset":2923}}}],"position":{"start":{"line":81,"column":1,"offset":2910},"end":{"line":81,"column":14,"offset":2923}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":82,"column":1,"offset":2924},"end":{"line":82,"column":9,"offset":2932}}},{"type":"text","value":" is an interesting keyword. It can be used to create functions: ","position":{"start":{"line":82,"column":9,"offset":2932},"end":{"line":82,"column":73,"offset":2996}}}],"position":{"start":{"line":82,"column":1,"offset":2924},"end":{"line":82,"column":73,"offset":2996}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":83,"column":1,"offset":2997},"end":{"line":86,"column":4,"offset":3036}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":87,"column":1,"offset":3037},"end":{"line":87,"column":5,"offset":3041}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The syntax is very different from other languages, but try to think of ","position":{"start":{"line":89,"column":1,"offset":3043},"end":{"line":89,"column":72,"offset":3114}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":89,"column":72,"offset":3114},"end":{"line":89,"column":80,"offset":3122}}},{"type":"text","value":" as a function itself.\n","position":{"start":{"line":89,"column":80,"offset":3122},"end":{"line":90,"column":1,"offset":3146}}},{"type":"raw","value":"<br>","position":{"start":{"line":90,"column":1,"offset":3146},"end":{"line":90,"column":5,"offset":3150}}},{"type":"text","value":"\n","position":{"start":{"line":90,"column":5,"offset":3150},"end":{"line":91,"column":1,"offset":3151}}},{"type":"raw","value":"<br>","position":{"start":{"line":91,"column":1,"offset":3151},"end":{"line":91,"column":5,"offset":3155}}},{"type":"text","value":"\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case ","position":{"start":{"line":91,"column":5,"offset":3155},"end":{"line":92,"column":184,"offset":3339}}},{"type":"raw","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":92,"column":184,"offset":3339},"end":{"line":92,"column":187,"offset":3342}}},{"type":"text","value":".\n","position":{"start":{"line":92,"column":187,"offset":3342},"end":{"line":93,"column":1,"offset":3345}}},{"type":"raw","value":"<br>","position":{"start":{"line":93,"column":1,"offset":3345},"end":{"line":93,"column":5,"offset":3349}}},{"type":"text","value":"\n","position":{"start":{"line":93,"column":5,"offset":3349},"end":{"line":94,"column":1,"offset":3350}}},{"type":"raw","value":"<br>","position":{"start":{"line":94,"column":1,"offset":3350},"end":{"line":94,"column":5,"offset":3354}}},{"type":"text","value":"\nThe second parameter that ","position":{"start":{"line":94,"column":5,"offset":3354},"end":{"line":95,"column":27,"offset":3381}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":95,"column":27,"offset":3381},"end":{"line":95,"column":35,"offset":3389}}},{"type":"text","value":" takes in is the body that the procedure will call ","position":{"start":{"line":95,"column":35,"offset":3389},"end":{"line":95,"column":86,"offset":3440}}},{"type":"raw","value":"<code class=\"language-text\">(* x x)</code>","position":{"start":{"line":95,"column":86,"offset":3440},"end":{"line":95,"column":95,"offset":3449}}},{"type":"text","value":". ","position":{"start":{"line":95,"column":95,"offset":3449},"end":{"line":95,"column":97,"offset":3451}}}],"position":{"start":{"line":89,"column":1,"offset":3043},"end":{"line":95,"column":97,"offset":3451}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br> ","position":{"start":{"line":97,"column":1,"offset":3453},"end":{"line":97,"column":6,"offset":3458}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define can also be used to store constants:\n","position":{"start":{"line":99,"column":1,"offset":3460},"end":{"line":100,"column":1,"offset":3504}}},{"type":"raw","value":"<br>","position":{"start":{"line":100,"column":1,"offset":3504},"end":{"line":100,"column":5,"offset":3508}}},{"type":"text","value":"\n","position":{"start":{"line":100,"column":5,"offset":3508},"end":{"line":101,"column":1,"offset":3509}}},{"type":"raw","value":"<code class=\"language-text\">(define pi 3.14159)</code>","position":{"start":{"line":101,"column":1,"offset":3509},"end":{"line":101,"column":22,"offset":3530}}},{"type":"text","value":"\n","position":{"start":{"line":101,"column":22,"offset":3530},"end":{"line":102,"column":1,"offset":3531}}},{"type":"raw","value":"<br>","position":{"start":{"line":102,"column":1,"offset":3531},"end":{"line":102,"column":5,"offset":3535}}}],"position":{"start":{"line":99,"column":1,"offset":3460},"end":{"line":102,"column":5,"offset":3535}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.","position":{"start":{"line":104,"column":1,"offset":3537},"end":{"line":104,"column":152,"offset":3688}}}],"position":{"start":{"line":104,"column":1,"offset":3537},"end":{"line":104,"column":152,"offset":3688}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":106,"column":8,"offset":3697},"end":{"line":106,"column":20,"offset":3709}}}],"position":{"start":{"line":106,"column":1,"offset":3690},"end":{"line":106,"column":20,"offset":3709}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the first example of a program we see in class:","position":{"start":{"line":108,"column":1,"offset":3711},"end":{"line":108,"column":56,"offset":3766}}}],"position":{"start":{"line":108,"column":1,"offset":3711},"end":{"line":108,"column":56,"offset":3766}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>","position":{"start":{"line":109,"column":1,"offset":3767},"end":{"line":114,"column":4,"offset":3858}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":115,"column":1,"offset":3859},"end":{"line":115,"column":5,"offset":3863}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you’ve probably already guessed, ","position":{"start":{"line":117,"column":1,"offset":3865},"end":{"line":117,"column":37,"offset":3901}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":117,"column":37,"offset":3901},"end":{"line":117,"column":41,"offset":3905}}},{"type":"text","value":" is a function.\n","position":{"start":{"line":117,"column":41,"offset":3905},"end":{"line":118,"column":1,"offset":3922}}},{"type":"raw","value":"<br>","position":{"start":{"line":118,"column":1,"offset":3922},"end":{"line":118,"column":5,"offset":3926}}},{"type":"text","value":"\n","position":{"start":{"line":118,"column":5,"offset":3926},"end":{"line":119,"column":1,"offset":3927}}},{"type":"raw","value":"<br>","position":{"start":{"line":119,"column":1,"offset":3927},"end":{"line":119,"column":5,"offset":3931}}},{"type":"text","value":"\nThe first parameter is the test case for example if we input fly ","position":{"start":{"line":119,"column":5,"offset":3931},"end":{"line":120,"column":66,"offset":3997}}},{"type":"raw","value":"<code class=\"language-text\">(equal? (last wd) &#39;y)</code>","position":{"start":{"line":120,"column":66,"offset":3997},"end":{"line":120,"column":89,"offset":4020}}},{"type":"text","value":" would be true, because fly ends in y.\n","position":{"start":{"line":120,"column":89,"offset":4020},"end":{"line":121,"column":1,"offset":4060}}},{"type":"raw","value":"<br>","position":{"start":{"line":121,"column":1,"offset":4060},"end":{"line":121,"column":5,"offset":4064}}},{"type":"text","value":"\n","position":{"start":{"line":121,"column":5,"offset":4064},"end":{"line":122,"column":1,"offset":4065}}},{"type":"raw","value":"<br>","position":{"start":{"line":122,"column":1,"offset":4065},"end":{"line":122,"column":5,"offset":4069}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":122,"column":5,"offset":4069},"end":{"line":123,"column":21,"offset":4090}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":123,"column":21,"offset":4090},"end":{"line":123,"column":25,"offset":4094}}},{"type":"text","value":" takes in is the expression if the test case is true.\n","position":{"start":{"line":123,"column":25,"offset":4094},"end":{"line":124,"column":1,"offset":4148}}},{"type":"raw","value":"<br>","position":{"start":{"line":124,"column":1,"offset":4148},"end":{"line":124,"column":5,"offset":4152}}},{"type":"text","value":"\n","position":{"start":{"line":124,"column":5,"offset":4152},"end":{"line":125,"column":1,"offset":4153}}},{"type":"raw","value":"<br>","position":{"start":{"line":125,"column":1,"offset":4153},"end":{"line":125,"column":5,"offset":4157}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":125,"column":5,"offset":4157},"end":{"line":126,"column":21,"offset":4178}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":126,"column":21,"offset":4178},"end":{"line":126,"column":25,"offset":4182}}},{"type":"text","value":" takes in is the expression if the test case is false.\n","position":{"start":{"line":126,"column":25,"offset":4182},"end":{"line":127,"column":1,"offset":4237}}},{"type":"raw","value":"<br>","position":{"start":{"line":127,"column":1,"offset":4237},"end":{"line":127,"column":5,"offset":4241}}},{"type":"text","value":"\n","position":{"start":{"line":127,"column":5,"offset":4241},"end":{"line":128,"column":1,"offset":4242}}},{"type":"raw","value":"<br>","position":{"start":{"line":128,"column":1,"offset":4242},"end":{"line":128,"column":5,"offset":4246}}},{"type":"text","value":"\nAlso worth noting that names that return a boolean add a ","position":{"start":{"line":128,"column":5,"offset":4246},"end":{"line":129,"column":58,"offset":4304}}},{"type":"raw","value":"<code class=\"language-text\">?</code>","position":{"start":{"line":129,"column":58,"offset":4304},"end":{"line":129,"column":61,"offset":4307}}},{"type":"text","value":" to the end to show that the primitive returned is true or false. Like how equal is ","position":{"start":{"line":129,"column":61,"offset":4307},"end":{"line":129,"column":145,"offset":4391}}},{"type":"raw","value":"<code class=\"language-text\">equal?</code>","position":{"start":{"line":129,"column":145,"offset":4391},"end":{"line":129,"column":153,"offset":4399}}},{"type":"text","value":" in the code block above.","position":{"start":{"line":129,"column":153,"offset":4399},"end":{"line":129,"column":178,"offset":4424}}}],"position":{"start":{"line":117,"column":1,"offset":3865},"end":{"line":129,"column":178,"offset":4424}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L02","position":{"start":{"line":131,"column":7,"offset":4432},"end":{"line":131,"column":10,"offset":4435}}}],"position":{"start":{"line":131,"column":1,"offset":4426},"end":{"line":131,"column":10,"offset":4435}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Recursion","position":{"start":{"line":133,"column":8,"offset":4444},"end":{"line":133,"column":17,"offset":4453}}}],"position":{"start":{"line":133,"column":1,"offset":4437},"end":{"line":133,"column":17,"offset":4453}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":134,"column":1,"offset":4454},"end":{"line":145,"column":4,"offset":4653}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":146,"column":1,"offset":4654},"end":{"line":146,"column":5,"offset":4658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n","position":{"start":{"line":148,"column":1,"offset":4660},"end":{"line":149,"column":1,"offset":4876}}},{"type":"raw","value":"<br>","position":{"start":{"line":149,"column":1,"offset":4876},"end":{"line":149,"column":5,"offset":4880}}},{"type":"text","value":"\n","position":{"start":{"line":149,"column":5,"offset":4880},"end":{"line":150,"column":1,"offset":4881}}},{"type":"raw","value":"<br>","position":{"start":{"line":150,"column":1,"offset":4881},"end":{"line":150,"column":5,"offset":4885}}},{"type":"text","value":"\nNotice in the above example from lecture the function calls pigl until ","position":{"start":{"line":150,"column":5,"offset":4885},"end":{"line":151,"column":72,"offset":4957}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":151,"column":72,"offset":4957},"end":{"line":151,"column":81,"offset":4966}}},{"type":"text","value":" is equal to true.\n","position":{"start":{"line":151,"column":81,"offset":4966},"end":{"line":152,"column":1,"offset":4985}}},{"type":"raw","value":"<br>","position":{"start":{"line":152,"column":1,"offset":4985},"end":{"line":152,"column":5,"offset":4989}}},{"type":"text","value":"\n","position":{"start":{"line":152,"column":5,"offset":4989},"end":{"line":153,"column":1,"offset":4990}}},{"type":"raw","value":"<br>","position":{"start":{"line":153,"column":1,"offset":4990},"end":{"line":153,"column":5,"offset":4994}}},{"type":"text","value":"\nLets say ","position":{"start":{"line":153,"column":5,"offset":4994},"end":{"line":154,"column":10,"offset":5004}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":154,"column":10,"offset":5004},"end":{"line":154,"column":16,"offset":5010}}},{"type":"text","value":" gets called with ","position":{"start":{"line":154,"column":16,"offset":5010},"end":{"line":154,"column":34,"offset":5028}}},{"type":"raw","value":"<code class=\"language-text\">scheme</code>","position":{"start":{"line":154,"column":34,"offset":5028},"end":{"line":154,"column":42,"offset":5036}}},{"type":"text","value":".\nThe conditional checks ","position":{"start":{"line":154,"column":42,"offset":5036},"end":{"line":155,"column":24,"offset":5061}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":155,"column":24,"offset":5061},"end":{"line":155,"column":33,"offset":5070}}},{"type":"text","value":" which checks the first letter in the word to see if it is a vowel. Since ","position":{"start":{"line":155,"column":33,"offset":5070},"end":{"line":155,"column":107,"offset":5144}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":155,"column":107,"offset":5144},"end":{"line":155,"column":116,"offset":5153}}},{"type":"text","value":" is false because ","position":{"start":{"line":155,"column":116,"offset":5153},"end":{"line":155,"column":134,"offset":5171}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":155,"column":134,"offset":5171},"end":{"line":155,"column":137,"offset":5174}}},{"type":"text","value":" isn’t a vowel it calls ","position":{"start":{"line":155,"column":137,"offset":5174},"end":{"line":155,"column":161,"offset":5198}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":155,"column":161,"offset":5198},"end":{"line":155,"column":167,"offset":5204}}},{"type":"text","value":" again with the argument ","position":{"start":{"line":155,"column":167,"offset":5204},"end":{"line":155,"column":192,"offset":5229}}},{"type":"raw","value":"<code class=\"language-text\">chemes</code>","position":{"start":{"line":155,"column":192,"offset":5229},"end":{"line":155,"column":200,"offset":5237}}},{"type":"text","value":". This is because ","position":{"start":{"line":155,"column":200,"offset":5237},"end":{"line":155,"column":218,"offset":5255}}},{"type":"raw","value":"<code class=\"language-text\">word</code>","position":{"start":{"line":155,"column":218,"offset":5255},"end":{"line":155,"column":224,"offset":5261}}},{"type":"text","value":" takes the arguments ","position":{"start":{"line":155,"column":224,"offset":5261},"end":{"line":155,"column":245,"offset":5282}}},{"type":"raw","value":"<code class=\"language-text\">cheme</code>","position":{"start":{"line":155,"column":245,"offset":5282},"end":{"line":155,"column":252,"offset":5289}}},{"type":"text","value":" and ","position":{"start":{"line":155,"column":252,"offset":5289},"end":{"line":155,"column":257,"offset":5294}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":155,"column":257,"offset":5294},"end":{"line":155,"column":260,"offset":5297}}},{"type":"text","value":" and adds them together. ","position":{"start":{"line":155,"column":260,"offset":5297},"end":{"line":155,"column":285,"offset":5322}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":155,"column":285,"offset":5322},"end":{"line":155,"column":291,"offset":5328}}},{"type":"text","value":" gets called repeatedly until\nit is called with a vowel as the first letter. When the first letter is a vowel the expression ","position":{"start":{"line":155,"column":291,"offset":5328},"end":{"line":156,"column":96,"offset":5454}}},{"type":"raw","value":"<code class=\"language-text\">(word wd &#39;ay)</code>","position":{"start":{"line":156,"column":96,"offset":5454},"end":{"line":156,"column":111,"offset":5469}}},{"type":"text","value":" is ran and the result is a primitive which means the procedure stops. ","position":{"start":{"line":156,"column":111,"offset":5469},"end":{"line":156,"column":182,"offset":5540}}}],"position":{"start":{"line":148,"column":1,"offset":4660},"end":{"line":156,"column":182,"offset":5540}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":158,"column":8,"offset":5549},"end":{"line":158,"column":19,"offset":5560}}}],"position":{"start":{"line":158,"column":1,"offset":5542},"end":{"line":158,"column":19,"offset":5560}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Big Picture: ","position":{"start":{"line":159,"column":1,"offset":5561},"end":{"line":159,"column":14,"offset":5574}}}],"position":{"start":{"line":159,"column":1,"offset":5561},"end":{"line":159,"column":14,"offset":5574}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>","position":{"start":{"line":160,"column":1,"offset":5575},"end":{"line":175,"column":4,"offset":5990}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":176,"column":1,"offset":5991},"end":{"line":176,"column":5,"offset":5995}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that can be referenced as a whole.","position":{"start":{"line":178,"column":1,"offset":5997},"end":{"line":178,"column":141,"offset":6137}}}],"position":{"start":{"line":178,"column":1,"offset":5997},"end":{"line":178,"column":141,"offset":6137}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Functional Programming","position":{"start":{"line":180,"column":8,"offset":6146},"end":{"line":180,"column":30,"offset":6168}}}],"position":{"start":{"line":180,"column":1,"offset":6139},"end":{"line":180,"column":30,"offset":6168}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the introduction of multi-core processers, parallelism has helped functional programming make a comeback. If everything is a function you won’t run into race conditions created by dependencies.","position":{"start":{"line":181,"column":1,"offset":6169},"end":{"line":181,"column":199,"offset":6367}}}],"position":{"start":{"line":181,"column":1,"offset":6169},"end":{"line":181,"column":199,"offset":6367}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Function vs. Procedure","position":{"start":{"line":183,"column":8,"offset":6376},"end":{"line":183,"column":30,"offset":6398}}}],"position":{"start":{"line":183,"column":1,"offset":6369},"end":{"line":183,"column":30,"offset":6398}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Two functions are the same if they give the same output with given inputs.\n","position":{"start":{"line":185,"column":1,"offset":6400},"end":{"line":186,"column":1,"offset":6475}}},{"type":"raw","value":"<br>","position":{"start":{"line":186,"column":1,"offset":6475},"end":{"line":186,"column":5,"offset":6479}}},{"type":"text","value":"\n","position":{"start":{"line":186,"column":5,"offset":6479},"end":{"line":187,"column":1,"offset":6480}}},{"type":"raw","value":"<br>","position":{"start":{"line":187,"column":1,"offset":6480},"end":{"line":187,"column":5,"offset":6484}}},{"type":"text","value":"\nA procedure is a sequence of steps for computing a function.\n","position":{"start":{"line":187,"column":5,"offset":6484},"end":{"line":189,"column":1,"offset":6546}}},{"type":"raw","value":"<br>","position":{"start":{"line":189,"column":1,"offset":6546},"end":{"line":189,"column":5,"offset":6550}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":189,"column":5,"offset":6550},"end":{"line":190,"column":1,"offset":6553}}},{"type":"text","value":"\n"},{"type":"text","value":"Therefore ","position":{"start":{"line":190,"column":1,"offset":6553},"end":{"line":190,"column":11,"offset":6563}}},{"type":"raw","value":"<code class=\"language-text\">2x + 6</code>","position":{"start":{"line":190,"column":11,"offset":6563},"end":{"line":190,"column":19,"offset":6571}}},{"type":"text","value":" and ","position":{"start":{"line":190,"column":19,"offset":6571},"end":{"line":190,"column":24,"offset":6576}}},{"type":"raw","value":"<code class=\"language-text\">2(x + 3)</code>","position":{"start":{"line":190,"column":24,"offset":6576},"end":{"line":190,"column":34,"offset":6586}}},{"type":"text","value":" are the same function but different procedures.\n","position":{"start":{"line":190,"column":34,"offset":6586},"end":{"line":191,"column":1,"offset":6635}}},{"type":"raw","value":"<br>","position":{"start":{"line":191,"column":1,"offset":6635},"end":{"line":191,"column":5,"offset":6639}}}],"position":{"start":{"line":185,"column":1,"offset":6400},"end":{"line":191,"column":5,"offset":6639}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Cond","position":{"start":{"line":193,"column":8,"offset":6648},"end":{"line":193,"column":12,"offset":6652}}}],"position":{"start":{"line":193,"column":1,"offset":6641},"end":{"line":193,"column":12,"offset":6652}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (buzz n) \n    (cond ((equal? (remainder n 7) 0) &#39;buzz)\n    ((member? 7 n) &#39;buzz)\n    (else n)))</code></pre></div>","position":{"start":{"line":194,"column":1,"offset":6653},"end":{"line":199,"column":4,"offset":6764}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":200,"column":1,"offset":6765},"end":{"line":201,"column":5,"offset":6774}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":203,"column":1,"offset":6776},"end":{"line":203,"column":7,"offset":6782}}},{"type":"text","value":" allows for multiple test cases, and will return\nthe first clause that is true.\n","position":{"start":{"line":203,"column":7,"offset":6782},"end":{"line":205,"column":1,"offset":6864}}},{"type":"raw","value":"<br>","position":{"start":{"line":205,"column":1,"offset":6864},"end":{"line":205,"column":5,"offset":6868}}},{"type":"text","value":"\n","position":{"start":{"line":205,"column":5,"offset":6868},"end":{"line":206,"column":1,"offset":6869}}},{"type":"raw","value":"<br>","position":{"start":{"line":206,"column":1,"offset":6869},"end":{"line":206,"column":5,"offset":6873}}},{"type":"text","value":"\nLets try ","position":{"start":{"line":206,"column":5,"offset":6873},"end":{"line":207,"column":10,"offset":6883}}},{"type":"raw","value":"<code class=\"language-text\">14</code>","position":{"start":{"line":207,"column":10,"offset":6883},"end":{"line":207,"column":14,"offset":6887}}},{"type":"text","value":". Since ","position":{"start":{"line":207,"column":14,"offset":6887},"end":{"line":207,"column":22,"offset":6895}}},{"type":"raw","value":"<code class=\"language-text\">14 / 7</code>","position":{"start":{"line":207,"column":22,"offset":6895},"end":{"line":207,"column":30,"offset":6903}}},{"type":"text","value":" has a remainder of ","position":{"start":{"line":207,"column":30,"offset":6903},"end":{"line":207,"column":50,"offset":6923}}},{"type":"raw","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":207,"column":50,"offset":6923},"end":{"line":207,"column":53,"offset":6926}}},{"type":"text","value":" the first clause is met and returns ","position":{"start":{"line":207,"column":53,"offset":6926},"end":{"line":207,"column":90,"offset":6963}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":207,"column":90,"offset":6963},"end":{"line":207,"column":96,"offset":6969}}},{"type":"text","value":".\n","position":{"start":{"line":207,"column":96,"offset":6969},"end":{"line":208,"column":1,"offset":6972}}},{"type":"raw","value":"<br>","position":{"start":{"line":208,"column":1,"offset":6972},"end":{"line":208,"column":5,"offset":6976}}},{"type":"text","value":"\n","position":{"start":{"line":208,"column":5,"offset":6976},"end":{"line":209,"column":1,"offset":6977}}},{"type":"raw","value":"<br>","position":{"start":{"line":209,"column":1,"offset":6977},"end":{"line":209,"column":5,"offset":6981}}},{"type":"text","value":"\nNow Lets try ","position":{"start":{"line":209,"column":5,"offset":6981},"end":{"line":210,"column":14,"offset":6995}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":210,"column":14,"offset":6995},"end":{"line":210,"column":18,"offset":6999}}},{"type":"text","value":". The first clause is not met, and therefore goes onto the next clause. ","position":{"start":{"line":210,"column":18,"offset":6999},"end":{"line":210,"column":90,"offset":7071}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":210,"column":90,"offset":7071},"end":{"line":210,"column":94,"offset":7075}}},{"type":"text","value":" does have a 7 inside of it so ","position":{"start":{"line":210,"column":94,"offset":7075},"end":{"line":210,"column":125,"offset":7106}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":210,"column":125,"offset":7106},"end":{"line":210,"column":131,"offset":7112}}},{"type":"text","value":" is returned.\n","position":{"start":{"line":210,"column":131,"offset":7112},"end":{"line":211,"column":1,"offset":7127}}},{"type":"raw","value":"<br>","position":{"start":{"line":211,"column":1,"offset":7127},"end":{"line":211,"column":5,"offset":7131}}},{"type":"text","value":"\n","position":{"start":{"line":211,"column":5,"offset":7131},"end":{"line":212,"column":1,"offset":7132}}},{"type":"raw","value":"<br>","position":{"start":{"line":212,"column":1,"offset":7132},"end":{"line":212,"column":5,"offset":7136}}},{"type":"text","value":"\nNow lets try ","position":{"start":{"line":212,"column":5,"offset":7136},"end":{"line":213,"column":14,"offset":7150}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":213,"column":14,"offset":7150},"end":{"line":213,"column":18,"offset":7154}}},{"type":"text","value":". The remainder is ","position":{"start":{"line":213,"column":18,"offset":7154},"end":{"line":213,"column":37,"offset":7173}}},{"type":"raw","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":213,"column":37,"offset":7173},"end":{"line":213,"column":40,"offset":7176}}},{"type":"text","value":" so the first clause is not met, and ","position":{"start":{"line":213,"column":40,"offset":7176},"end":{"line":213,"column":77,"offset":7213}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":213,"column":77,"offset":7213},"end":{"line":213,"column":81,"offset":7217}}},{"type":"text","value":"  does not have a ","position":{"start":{"line":213,"column":81,"offset":7217},"end":{"line":213,"column":99,"offset":7235}}},{"type":"raw","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":213,"column":99,"offset":7235},"end":{"line":213,"column":102,"offset":7238}}},{"type":"text","value":" inside of it so the catch all ","position":{"start":{"line":213,"column":102,"offset":7238},"end":{"line":213,"column":133,"offset":7269}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":213,"column":133,"offset":7269},"end":{"line":213,"column":139,"offset":7275}}},{"type":"text","value":" keyword returns the number ","position":{"start":{"line":213,"column":139,"offset":7275},"end":{"line":213,"column":167,"offset":7303}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":213,"column":167,"offset":7303},"end":{"line":213,"column":171,"offset":7307}}},{"type":"text","value":".\n","position":{"start":{"line":213,"column":171,"offset":7307},"end":{"line":214,"column":1,"offset":7309}}},{"type":"raw","value":"<br>","position":{"start":{"line":214,"column":1,"offset":7309},"end":{"line":214,"column":5,"offset":7313}}},{"type":"text","value":"\n","position":{"start":{"line":214,"column":5,"offset":7313},"end":{"line":215,"column":1,"offset":7314}}},{"type":"raw","value":"<br>","position":{"start":{"line":215,"column":1,"offset":7314},"end":{"line":215,"column":5,"offset":7318}}},{"type":"text","value":"\nImportant to note:\n","position":{"start":{"line":215,"column":5,"offset":7318},"end":{"line":217,"column":1,"offset":7338}}},{"type":"raw","value":"<br>","position":{"start":{"line":217,"column":1,"offset":7338},"end":{"line":217,"column":5,"offset":7342}}},{"type":"text","value":"\nIf a ","position":{"start":{"line":217,"column":5,"offset":7342},"end":{"line":218,"column":6,"offset":7348}}},{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":218,"column":6,"offset":7348},"end":{"line":218,"column":12,"offset":7354}}},{"type":"text","value":" does not have an ","position":{"start":{"line":218,"column":12,"offset":7354},"end":{"line":218,"column":30,"offset":7372}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":218,"column":30,"offset":7372},"end":{"line":218,"column":36,"offset":7378}}},{"type":"text","value":" statement it will return ","position":{"start":{"line":218,"column":36,"offset":7378},"end":{"line":218,"column":62,"offset":7404}}},{"type":"raw","value":"<code class=\"language-text\">unspecified</code>","position":{"start":{"line":218,"column":62,"offset":7404},"end":{"line":218,"column":75,"offset":7417}}},{"type":"text","value":", which can be different depending on interpreted, so always have an else statement.","position":{"start":{"line":218,"column":75,"offset":7417},"end":{"line":218,"column":159,"offset":7501}}}],"position":{"start":{"line":203,"column":1,"offset":6776},"end":{"line":218,"column":159,"offset":7501}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Applicative Order vs Normal Order","position":{"start":{"line":220,"column":8,"offset":7510},"end":{"line":220,"column":41,"offset":7543}}}],"position":{"start":{"line":220,"column":1,"offset":7503},"end":{"line":220,"column":41,"offset":7543}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (f a b) (+ (g a) b))\n(def (g x) (* 3 x))\n\n(f (+ 2 3) (- 15 6))</code></pre></div>","position":{"start":{"line":221,"column":1,"offset":7544},"end":{"line":226,"column":4,"offset":7619}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Applicative Order:\n","position":{"start":{"line":227,"column":1,"offset":7620},"end":{"line":228,"column":1,"offset":7639}}},{"type":"raw","value":"<br>","position":{"start":{"line":228,"column":1,"offset":7639},"end":{"line":228,"column":5,"offset":7643}}},{"type":"text","value":"\nevaluates the sub expressions until they are primitive values, then passes the primitive results back up to the parent function.\n","position":{"start":{"line":228,"column":5,"offset":7643},"end":{"line":230,"column":5,"offset":7781}}},{"type":"raw","value":"<br>","position":{"start":{"line":230,"column":5,"offset":7781},"end":{"line":230,"column":9,"offset":7785}}},{"type":"text","value":"\n","position":{"start":{"line":230,"column":9,"offset":7785},"end":{"line":231,"column":5,"offset":7790}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":231,"column":5,"offset":7790},"end":{"line":231,"column":27,"offset":7812}}},{"type":"text","value":"\n","position":{"start":{"line":231,"column":27,"offset":7812},"end":{"line":232,"column":5,"offset":7817}}},{"type":"raw","value":"<br>","position":{"start":{"line":232,"column":5,"offset":7817},"end":{"line":232,"column":9,"offset":7821}}},{"type":"text","value":"\n","position":{"start":{"line":232,"column":9,"offset":7821},"end":{"line":233,"column":5,"offset":7826}}},{"type":"raw","value":"<code class=\"language-text\">2 + 3</code>","position":{"start":{"line":233,"column":5,"offset":7826},"end":{"line":233,"column":12,"offset":7833}}},{"type":"text","value":" and ","position":{"start":{"line":233,"column":12,"offset":7833},"end":{"line":233,"column":17,"offset":7838}}},{"type":"raw","value":"<code class=\"language-text\">15 - 6</code>","position":{"start":{"line":233,"column":17,"offset":7838},"end":{"line":233,"column":25,"offset":7846}}},{"type":"text","value":" will be evaluated before the outside ","position":{"start":{"line":233,"column":25,"offset":7846},"end":{"line":233,"column":63,"offset":7884}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":233,"column":63,"offset":7884},"end":{"line":233,"column":66,"offset":7887}}},{"type":"text","value":" is evaluated. Then ","position":{"start":{"line":233,"column":66,"offset":7887},"end":{"line":233,"column":86,"offset":7907}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":233,"column":86,"offset":7907},"end":{"line":233,"column":89,"offset":7910}}},{"type":"text","value":" will be called with ","position":{"start":{"line":233,"column":89,"offset":7910},"end":{"line":233,"column":110,"offset":7931}}},{"type":"raw","value":"<code class=\"language-text\">(f 5 9)</code>","position":{"start":{"line":233,"column":110,"offset":7931},"end":{"line":233,"column":119,"offset":7940}}},{"type":"text","value":".\n","position":{"start":{"line":233,"column":119,"offset":7940},"end":{"line":234,"column":1,"offset":7942}}},{"type":"raw","value":"<br>","position":{"start":{"line":234,"column":1,"offset":7942},"end":{"line":234,"column":5,"offset":7946}}},{"type":"text","value":"\nNormal Order:\n","position":{"start":{"line":234,"column":5,"offset":7946},"end":{"line":236,"column":1,"offset":7962}}},{"type":"raw","value":"<br>","position":{"start":{"line":236,"column":1,"offset":7962},"end":{"line":236,"column":5,"offset":7966}}},{"type":"text","value":"\nevaluates the outsides first, but instead of passing primitive values it passes the expressions.\n","position":{"start":{"line":236,"column":5,"offset":7966},"end":{"line":238,"column":5,"offset":8073}}},{"type":"raw","value":"<br>","position":{"start":{"line":238,"column":5,"offset":8073},"end":{"line":238,"column":9,"offset":8077}}},{"type":"text","value":"\n","position":{"start":{"line":238,"column":9,"offset":8077},"end":{"line":239,"column":1,"offset":8078}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":239,"column":1,"offset":8078},"end":{"line":239,"column":23,"offset":8100}}},{"type":"text","value":" turns into ","position":{"start":{"line":239,"column":23,"offset":8100},"end":{"line":239,"column":35,"offset":8112}}},{"type":"raw","value":"<code class=\"language-text\">(+ (g (+ 2 3)) (- 15 6))</code>","position":{"start":{"line":239,"column":35,"offset":8112},"end":{"line":239,"column":61,"offset":8138}}},{"type":"text","value":"\n","position":{"start":{"line":239,"column":61,"offset":8138},"end":{"line":240,"column":1,"offset":8139}}},{"type":"raw","value":"<br>","position":{"start":{"line":240,"column":1,"offset":8139},"end":{"line":240,"column":5,"offset":8143}}},{"type":"text","value":"\nNow ","position":{"start":{"line":240,"column":5,"offset":8143},"end":{"line":241,"column":5,"offset":8148}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":241,"column":5,"offset":8148},"end":{"line":241,"column":8,"offset":8151}}},{"type":"text","value":" is done and the next expression can be evaluated.","position":{"start":{"line":241,"column":8,"offset":8151},"end":{"line":241,"column":58,"offset":8201}}}],"position":{"start":{"line":227,"column":1,"offset":7620},"end":{"line":241,"column":58,"offset":8201}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Possible Problem:\n","position":{"start":{"line":243,"column":1,"offset":8203},"end":{"line":244,"column":1,"offset":8221}}},{"type":"raw","value":"<br>","position":{"start":{"line":244,"column":1,"offset":8221},"end":{"line":244,"column":5,"offset":8225}}}],"position":{"start":{"line":243,"column":1,"offset":8203},"end":{"line":244,"column":5,"offset":8225}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (zero z) (- x x))</code></pre></div>","position":{"start":{"line":245,"column":1,"offset":8226},"end":{"line":247,"column":4,"offset":8256}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"applicative ","position":{"start":{"line":248,"column":1,"offset":8257},"end":{"line":248,"column":13,"offset":8269}}}],"position":{"start":{"line":248,"column":1,"offset":8257},"end":{"line":248,"column":13,"offset":8269}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(random 10) ==&gt; 8\n(zero 8) ---&gt;\n(- 8 8) ==&gt; 0\n0</code></pre></div>","position":{"start":{"line":249,"column":1,"offset":8270},"end":{"line":255,"column":4,"offset":8349}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"normal ","position":{"start":{"line":256,"column":1,"offset":8350},"end":{"line":256,"column":8,"offset":8357}}}],"position":{"start":{"line":256,"column":1,"offset":8350},"end":{"line":256,"column":8,"offset":8357}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(+ (random 10) (random 10)) ==&gt; \n    (random 10) ==&gt; 8\n    (random 10) ==&gt; 1\n(- 8 1) ==&gt; 7\n7</code></pre></div>","position":{"start":{"line":257,"column":1,"offset":8358},"end":{"line":264,"column":4,"offset":8482}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":265,"column":1,"offset":8483},"end":{"line":266,"column":5,"offset":8492}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the ","position":{"start":{"line":268,"column":1,"offset":8494},"end":{"line":268,"column":11,"offset":8504}}},{"type":"raw","value":"<code class=\"language-text\">(random 10)</code>","position":{"start":{"line":268,"column":11,"offset":8504},"end":{"line":268,"column":24,"offset":8517}}},{"type":"text","value":" is split into 2 different function alls in normal order you get different results.","position":{"start":{"line":268,"column":24,"offset":8517},"end":{"line":268,"column":107,"offset":8600}}}],"position":{"start":{"line":268,"column":1,"offset":8494},"end":{"line":268,"column":107,"offset":8600}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L03","position":{"start":{"line":270,"column":7,"offset":8608},"end":{"line":270,"column":10,"offset":8611}}}],"position":{"start":{"line":270,"column":1,"offset":8602},"end":{"line":270,"column":10,"offset":8611}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L04","position":{"start":{"line":271,"column":7,"offset":8618},"end":{"line":271,"column":10,"offset":8621}}}],"position":{"start":{"line":271,"column":1,"offset":8612},"end":{"line":271,"column":10,"offset":8621}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LABS","position":{"start":{"line":273,"column":6,"offset":8628},"end":{"line":273,"column":10,"offset":8632}}}],"position":{"start":{"line":273,"column":1,"offset":8623},"end":{"line":273,"column":10,"offset":8632}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1A","position":{"start":{"line":274,"column":7,"offset":8639},"end":{"line":274,"column":13,"offset":8645}}}],"position":{"start":{"line":274,"column":1,"offset":8633},"end":{"line":274,"column":13,"offset":8645}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first problem for the lab was to modify the ","position":{"start":{"line":275,"column":1,"offset":8646},"end":{"line":275,"column":49,"offset":8694}}},{"type":"raw","value":"<code class=\"language-text\">plural</code>","position":{"start":{"line":275,"column":49,"offset":8694},"end":{"line":275,"column":57,"offset":8702}}},{"type":"text","value":" program to handle a word ending in y, but has a vowel in front of it (boy).","position":{"start":{"line":275,"column":57,"offset":8702},"end":{"line":275,"column":133,"offset":8778}}}],"position":{"start":{"line":275,"column":1,"offset":8646},"end":{"line":275,"column":133,"offset":8778}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t\t(if (vowel? (last (bl wd)))\n\t\t(word wd &#39;s)\n\t\t(word (bl wd) &#39;ies))\n\t(word wd &#39;s)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":276,"column":1,"offset":8779},"end":{"line":286,"column":4,"offset":8974}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":287,"column":1,"offset":8975},"end":{"line":287,"column":5,"offset":8979}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I handled this by adding a conditional that checks for the second to last letter.\n","position":{"start":{"line":290,"column":1,"offset":8982},"end":{"line":291,"column":1,"offset":9064}}},{"type":"raw","value":"<br>","position":{"start":{"line":291,"column":1,"offset":9064},"end":{"line":291,"column":5,"offset":9068}}},{"type":"text","value":"\n","position":{"start":{"line":291,"column":5,"offset":9068},"end":{"line":292,"column":1,"offset":9069}}},{"type":"raw","value":"<br>","position":{"start":{"line":292,"column":1,"offset":9069},"end":{"line":292,"column":5,"offset":9073}}},{"type":"text","value":"\nThe second assgnment was:","position":{"start":{"line":292,"column":5,"offset":9073},"end":{"line":293,"column":26,"offset":9099}}}],"position":{"start":{"line":290,"column":1,"offset":8982},"end":{"line":293,"column":26,"offset":9099}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Define a procedure that takes three numbers as arguments and returns the sum of\nthe squares of the two larger numbers.</code></pre></div>","position":{"start":{"line":294,"column":1,"offset":9100},"end":{"line":299,"column":4,"offset":9228}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My Solution: ","position":{"start":{"line":300,"column":1,"offset":9229},"end":{"line":300,"column":14,"offset":9242}}}],"position":{"start":{"line":300,"column":1,"offset":9229},"end":{"line":300,"column":14,"offset":9242}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (twoLargerSums a b c)\n    (if (&gt;= a b)\n        (if (&gt;= b c)\n            (+ (square a) (square b))\n            (+ (square a) (square c)))\n        (if (&gt;= a c)\n            (+ (square a) (square b))\n            (+ (square b) (square c))))\n)\n\n(define (square x)\n(* x x))</code></pre></div>","position":{"start":{"line":302,"column":1,"offset":9244},"end":{"line":315,"column":4,"offset":9526}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":317,"column":1,"offset":9528},"end":{"line":318,"column":5,"offset":9537}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1B","position":{"start":{"line":321,"column":7,"offset":9546},"end":{"line":321,"column":13,"offset":9552}}}],"position":{"start":{"line":321,"column":1,"offset":9540},"end":{"line":321,"column":13,"offset":9552}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":321,"column":13,"offset":9552}}}}