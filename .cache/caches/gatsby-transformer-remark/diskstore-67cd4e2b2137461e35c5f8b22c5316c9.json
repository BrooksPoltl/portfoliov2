{"expireTime":9007200848861471000,"key":"transformer-remark-markdown-html-4054aca02a6257b3100c12f08a138962-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>This article is a part of a series where I go through <a href=\"https://teachyourselfcs.com/\">teachyourselfcs</a>.\nIf you would like to start at the beginning start <a href=\"https://bpp.dev/articles/teachyourselfcs/programming/00-getting-started/\">here</a>.</p>\n<h4>LECTURES</h4>\n<h5>L30</h5>\n<p>Client/Server programming\n<br>\n<br></p>\n<p>Have a host, connects with the “internet address”.\nThen you also have a port on that host to connect to.</p>\n<br>\n<br>\n<p>Running out of internet addresses (4 bil), not because of 4 bil computers buts because of unassigned addresses.\n<br>\n<br></p>\n<p>To solve this ipv6 was created.\n<br>\n<br></p>\n<p>https: secure http\n<br>\n<br></p>\n<p>socket is an abstract datatype: 2 way internet connection.\n<br>\n<br></p>\n<p>three way handshake: client sends to server, server sends to client, client sends back to server.\n<br>\n<br></p>\n<h5>L31</h5>\n<p>Your processer has memory inside of it to do computations with data very fast (ram). If second load called before first store happens you can get a concurrency issue.\n<br>\n<br></p>\n<p>Have to “lock out” the variable while it is being used.\n<br>\n<br>\nSerializer: takes a procedure and returns a protected procedure.\nPrevents procedures from overlapping.\n<br>\n<br></p>\n<p>Better to crash than to get wrong answer, because wrong answers pile up without you noticing them.\n<br>\n<br></p>\n<p>Inefficiency: not using parrallelism at all\n<br>\n<br>\nDeadlock: 2 threads locked waiting for eachother to finish\n<br>\n<br></p>\n<p>unfairness: process A wins and process B can’t win.</p>\n<h5>L32</h5>\n<p>Correct answer. Consistent within sequential order of the evaluated threads.\nSame answer as no parallelism.\n<br>\n<br></p>\n<p>serial: one after the other\n<br>\n<br></p>\n<p>Most programs aren’t programmed with deadlock in mind, because processes are very fast.\n<br>\n<br></p>\n<p>Figure out about the deadlock from thread maintenance in the database, then you kill one of the threads.\n<br>\n<br></p>\n<p>Resource starvation: several threads want resource. One thread keeps getting the resource.\n<br>\n<br>\nmutex: object that attempts to aquire and release</p>\n<h5>L33</h5>\n<p>Duplicate video</p>\n<h5>L34</h5>\n<p>memoization: remembering result of expression and using that to build the next expression.\n<br>\n<br></p>\n<p>Stream uses JIT (just in time) to where it calculates the value whenever it is needed.\n<br>\n<br>\nOnly use streams if program is functional.\n<br>\n<br>\nParts of the interpreter and computer are non-functional, but they provide a layer of abstraction at the program level that allows for safe multiprocessing if you write a functional program.</p>\n<h5>L35</h5>\n<p>Therac-25\n<br>\nSoftware that had a bug that caused some cancer patients to die of overdose.\n<br>\n<br></p>\n<p>Software doesnt degrade, but has problems with reliability because of the amount of possibilities that could go wrong that the real world doesnt have. Many layers of abstraction create a black box that can have underlying problems.\n<br>\n<br></p>\n<p>No limit to how complicated a software program can get.\n<br>\n<br></p>\n<p>Therac was multithreaded, must do error checking.\n<br>\n<br></p>\n<p>There were error messages that werent really errors, when a real error occurs operators will bypass because it is likely not a big deal.</p>\n<br>\n<br>\n<p>Documentation, didn’t help people understand issues that happened.\n<br>\n<br></p>\n<p>Initially people thought it was operator error since the machines most of the time (we know concurrency issues can cause this). Sometimes it actually was operator error, but it was because of poor user interface design and bad error messaging.\n<br>\n<br></p>\n<h5>L38</h5>\n<h5>L39</h5>\n<h4>LABS</h4>\n<h5>LAB 6B</h5>\n<p>(lab 6A is related to logo project).</p>\n<h4>READING</h4>\n<h5>3.4</h5>\n<h5>3.5</h5>"}