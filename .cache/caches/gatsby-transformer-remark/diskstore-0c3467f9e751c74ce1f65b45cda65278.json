{"expireTime":9007200842255727000,"key":"transformer-remark-markdown-html-ast-ec7aa2cf228d153bc2c9c1c8a9ca5bb9-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54}}},{"type":"element","tagName":"a","properties":{"href":"https://teachyourselfcs.com/"},"children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70}}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101}}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153}}},{"type":"element","tagName":"a","properties":{"href":"http://localhost:8000/teachyourselfcs/programming/00:getting-started/"},"children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158}}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":128,"offset":230}}},{"type":"text","value":".","position":{"start":{"line":2,"column":128,"offset":230},"end":{"line":2,"column":129,"offset":231}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":129,"offset":231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"INTRO","position":{"start":{"line":4,"column":6,"offset":238},"end":{"line":4,"column":11,"offset":243}}}],"position":{"start":{"line":4,"column":1,"offset":233},"end":{"line":4,"column":11,"offset":243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I will be following the Summer 2010 ","position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":5,"column":37,"offset":280}}},{"type":"element","tagName":"a","properties":{"href":"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html"},"children":[{"type":"text","value":"Calendar","position":{"start":{"line":5,"column":38,"offset":281},"end":{"line":5,"column":46,"offset":289}}}],"position":{"start":{"line":5,"column":37,"offset":280},"end":{"line":5,"column":101,"offset":344}}},{"type":"text","value":"\nso each week will consist of 4 lectures and 2 labs.","position":{"start":{"line":5,"column":101,"offset":344},"end":{"line":6,"column":52,"offset":396}}}],"position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":6,"column":52,"offset":396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"READINGS","position":{"start":{"line":8,"column":6,"offset":403},"end":{"line":8,"column":14,"offset":411}}}],"position":{"start":{"line":8,"column":1,"offset":398},"end":{"line":8,"column":14,"offset":411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.1 The Elements of Programming","position":{"start":{"line":9,"column":7,"offset":418},"end":{"line":9,"column":38,"offset":449}}}],"position":{"start":{"line":9,"column":1,"offset":412},"end":{"line":9,"column":38,"offset":449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The section starts off saying that there are 3 mechanisms that languages utilize to simplify complex ideas:\n","position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":11,"column":1,"offset":558}}},{"type":"raw","value":"<br>","position":{"start":{"line":11,"column":1,"offset":558},"end":{"line":11,"column":5,"offset":562}}},{"type":"text","value":"\nprimitive expressions: simplest entities within a language.\n","position":{"start":{"line":11,"column":5,"offset":562},"end":{"line":13,"column":1,"offset":623}}},{"type":"raw","value":"<br>","position":{"start":{"line":13,"column":1,"offset":623},"end":{"line":13,"column":5,"offset":627}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":5,"offset":627},"end":{"line":14,"column":1,"offset":628}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":1,"offset":628},"end":{"line":14,"column":5,"offset":632}}},{"type":"text","value":"\nmeans of combination: The ability to combine simple entities.\n","position":{"start":{"line":14,"column":5,"offset":632},"end":{"line":16,"column":1,"offset":696}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":1,"offset":696},"end":{"line":16,"column":5,"offset":700}}},{"type":"text","value":"\n","position":{"start":{"line":16,"column":5,"offset":700},"end":{"line":17,"column":1,"offset":701}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":1,"offset":701},"end":{"line":17,"column":5,"offset":705}}},{"type":"text","value":"\nmeans of abstraction: The ability to name and manipulate combined elements.\n","position":{"start":{"line":17,"column":5,"offset":705},"end":{"line":19,"column":1,"offset":782}}},{"type":"raw","value":"<br>","position":{"start":{"line":19,"column":1,"offset":782},"end":{"line":19,"column":5,"offset":786}}},{"type":"text","value":"\n","position":{"start":{"line":19,"column":5,"offset":786},"end":{"line":20,"column":1,"offset":787}}},{"type":"raw","value":"<br>","position":{"start":{"line":20,"column":1,"offset":787},"end":{"line":20,"column":5,"offset":791}}},{"type":"text","value":"\nBreaking down a compound expression:\n","position":{"start":{"line":20,"column":5,"offset":791},"end":{"line":22,"column":1,"offset":829}}},{"type":"raw","value":"<br>","position":{"start":{"line":22,"column":1,"offset":829},"end":{"line":22,"column":5,"offset":833}}},{"type":"text","value":"\ncombination: ","position":{"start":{"line":22,"column":5,"offset":833},"end":{"line":23,"column":14,"offset":847}}},{"type":"raw","value":"<code class=\"language-text\">(+ 137 349)</code>","position":{"start":{"line":23,"column":14,"offset":847},"end":{"line":23,"column":27,"offset":860}}},{"type":"text","value":"\n","position":{"start":{"line":23,"column":27,"offset":860},"end":{"line":24,"column":1,"offset":861}}},{"type":"raw","value":"<br>","position":{"start":{"line":24,"column":1,"offset":861},"end":{"line":24,"column":5,"offset":865}}},{"type":"text","value":"\noperator: ","position":{"start":{"line":24,"column":5,"offset":865},"end":{"line":25,"column":11,"offset":876}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":25,"column":11,"offset":876},"end":{"line":25,"column":14,"offset":879}}},{"type":"text","value":"\n","position":{"start":{"line":25,"column":14,"offset":879},"end":{"line":26,"column":1,"offset":880}}},{"type":"raw","value":"<br>","position":{"start":{"line":26,"column":1,"offset":880},"end":{"line":26,"column":5,"offset":884}}},{"type":"text","value":"\noperands: ","position":{"start":{"line":26,"column":5,"offset":884},"end":{"line":27,"column":11,"offset":895}}},{"type":"raw","value":"<code class=\"language-text\">137</code>","position":{"start":{"line":27,"column":11,"offset":895},"end":{"line":27,"column":16,"offset":900}}},{"type":"text","value":" ","position":{"start":{"line":27,"column":16,"offset":900},"end":{"line":27,"column":17,"offset":901}}},{"type":"raw","value":"<code class=\"language-text\">349</code>","position":{"start":{"line":27,"column":17,"offset":901},"end":{"line":27,"column":22,"offset":906}}},{"type":"text","value":"\n","position":{"start":{"line":27,"column":22,"offset":906},"end":{"line":28,"column":1,"offset":907}}},{"type":"raw","value":"<br>","position":{"start":{"line":28,"column":1,"offset":907},"end":{"line":28,"column":5,"offset":911}}},{"type":"text","value":"\n","position":{"start":{"line":28,"column":5,"offset":911},"end":{"line":29,"column":1,"offset":912}}},{"type":"raw","value":"<br>","position":{"start":{"line":29,"column":1,"offset":912},"end":{"line":29,"column":5,"offset":916}}},{"type":"text","value":"\nThe interpreter runs in a “read-eval-print” loop. That is why it is not necessary to print stuff out like in other languages.\n","position":{"start":{"line":29,"column":5,"offset":916},"end":{"line":31,"column":1,"offset":1043}}},{"type":"raw","value":"<br>","position":{"start":{"line":31,"column":1,"offset":1043},"end":{"line":31,"column":5,"offset":1047}}},{"type":"text","value":"\n","position":{"start":{"line":31,"column":5,"offset":1047},"end":{"line":32,"column":1,"offset":1048}}},{"type":"raw","value":"<br>","position":{"start":{"line":32,"column":1,"offset":1048},"end":{"line":32,"column":5,"offset":1052}}},{"type":"text","value":"\nEnvironment: The name-object pairs the interpreter keeps in memory.\n","position":{"start":{"line":32,"column":5,"offset":1052},"end":{"line":34,"column":1,"offset":1121}}},{"type":"raw","value":"<br>","position":{"start":{"line":34,"column":1,"offset":1121},"end":{"line":34,"column":5,"offset":1125}}},{"type":"text","value":"\n","position":{"start":{"line":34,"column":5,"offset":1125},"end":{"line":35,"column":1,"offset":1126}}},{"type":"raw","value":"<br>","position":{"start":{"line":35,"column":1,"offset":1126},"end":{"line":35,"column":5,"offset":1130}}}],"position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":35,"column":5,"offset":1130}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedures can be used to build on top of other Compound Procedures:\n","position":{"start":{"line":37,"column":1,"offset":1132},"end":{"line":38,"column":1,"offset":1210}}},{"type":"raw","value":"<br>","position":{"start":{"line":38,"column":1,"offset":1210},"end":{"line":38,"column":5,"offset":1214}}}],"position":{"start":{"line":37,"column":1,"offset":1132},"end":{"line":38,"column":5,"offset":1214}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (sum-of-squares x y)\n(+ (square x) (square y))</code></pre></div>","position":{"start":{"line":39,"column":1,"offset":1215},"end":{"line":42,"column":4,"offset":1277}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":43,"column":1,"offset":1278},"end":{"line":43,"column":5,"offset":1282}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedure: procedure that you make out of other procedures.","position":{"start":{"line":45,"column":1,"offset":1284},"end":{"line":45,"column":69,"offset":1352}}}],"position":{"start":{"line":45,"column":1,"offset":1284},"end":{"line":45,"column":69,"offset":1352}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Primitive Procedure: procedure built into the language ex: ","position":{"start":{"line":47,"column":1,"offset":1354},"end":{"line":47,"column":60,"offset":1413}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":47,"column":60,"offset":1413},"end":{"line":47,"column":63,"offset":1416}}},{"type":"text","value":"\n","position":{"start":{"line":47,"column":63,"offset":1416},"end":{"line":48,"column":1,"offset":1417}}},{"type":"raw","value":"<br>","position":{"start":{"line":48,"column":1,"offset":1417},"end":{"line":48,"column":5,"offset":1421}}},{"type":"text","value":"\n","position":{"start":{"line":48,"column":5,"offset":1421},"end":{"line":49,"column":1,"offset":1422}}},{"type":"raw","value":"<br>","position":{"start":{"line":49,"column":1,"offset":1422},"end":{"line":49,"column":5,"offset":1426}}},{"type":"text","value":"\nBoth are used exactly the same.\n","position":{"start":{"line":49,"column":5,"offset":1426},"end":{"line":51,"column":1,"offset":1459}}},{"type":"raw","value":"<br>","position":{"start":{"line":51,"column":1,"offset":1459},"end":{"line":51,"column":5,"offset":1463}}}],"position":{"start":{"line":47,"column":1,"offset":1354},"end":{"line":51,"column":5,"offset":1463}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When writing programs it is important to write modular programs that don’t cared how the other things are computed, only what should be computed.\n","position":{"start":{"line":53,"column":1,"offset":1465},"end":{"line":54,"column":1,"offset":1611}}},{"type":"raw","value":"<br>","position":{"start":{"line":54,"column":1,"offset":1611},"end":{"line":54,"column":5,"offset":1615}}}],"position":{"start":{"line":53,"column":1,"offset":1465},"end":{"line":54,"column":5,"offset":1615}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.2","position":{"start":{"line":56,"column":7,"offset":1623},"end":{"line":56,"column":10,"offset":1626}}}],"position":{"start":{"line":56,"column":1,"offset":1617},"end":{"line":56,"column":10,"offset":1626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.3","position":{"start":{"line":57,"column":7,"offset":1633},"end":{"line":57,"column":10,"offset":1636}}}],"position":{"start":{"line":57,"column":1,"offset":1627},"end":{"line":57,"column":10,"offset":1636}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":59,"column":6,"offset":1643},"end":{"line":59,"column":14,"offset":1651}}}],"position":{"start":{"line":59,"column":1,"offset":1638},"end":{"line":59,"column":14,"offset":1651}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L01","position":{"start":{"line":60,"column":7,"offset":1658},"end":{"line":60,"column":10,"offset":1661}}}],"position":{"start":{"line":60,"column":1,"offset":1652},"end":{"line":60,"column":10,"offset":1661}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":62,"column":8,"offset":1670},"end":{"line":62,"column":30,"offset":1692}}}],"position":{"start":{"line":62,"column":1,"offset":1663},"end":{"line":62,"column":30,"offset":1692}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":64,"column":1,"offset":1694},"end":{"line":65,"column":1,"offset":1838}}},{"type":"raw","value":"<br>","position":{"start":{"line":65,"column":1,"offset":1838},"end":{"line":65,"column":5,"offset":1842}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":65,"column":5,"offset":1842},"end":{"line":65,"column":16,"offset":1853}}},{"type":"raw","value":"<br>","position":{"start":{"line":65,"column":16,"offset":1853},"end":{"line":65,"column":20,"offset":1857}}},{"type":"text","value":"\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n","position":{"start":{"line":65,"column":20,"offset":1857},"end":{"line":67,"column":1,"offset":2001}}},{"type":"raw","value":"<br>","position":{"start":{"line":67,"column":1,"offset":2001},"end":{"line":67,"column":5,"offset":2005}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":67,"column":5,"offset":2005},"end":{"line":67,"column":16,"offset":2016}}},{"type":"raw","value":"<br>","position":{"start":{"line":67,"column":16,"offset":2016},"end":{"line":67,"column":20,"offset":2020}}},{"type":"text","value":"\nNow lets say we want to do something like:  ","position":{"start":{"line":67,"column":20,"offset":2020},"end":{"line":68,"column":45,"offset":2065}}},{"type":"raw","value":"<br>","position":{"start":{"line":68,"column":45,"offset":2065},"end":{"line":68,"column":49,"offset":2069}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 +  3 - 4</code>","position":{"start":{"line":68,"column":49,"offset":2069},"end":{"line":68,"column":65,"offset":2085}}},{"type":"raw","value":"<br>","position":{"start":{"line":68,"column":65,"offset":2085},"end":{"line":68,"column":69,"offset":2089}}},{"type":"text","value":"\nIn Scheme you can simply nest operators:\n","position":{"start":{"line":68,"column":69,"offset":2089},"end":{"line":70,"column":1,"offset":2132}}},{"type":"raw","value":"<br>","position":{"start":{"line":70,"column":1,"offset":2132},"end":{"line":70,"column":5,"offset":2136}}},{"type":"raw","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":70,"column":5,"offset":2136},"end":{"line":70,"column":22,"offset":2153}}},{"type":"raw","value":"<br>","position":{"start":{"line":70,"column":22,"offset":2153},"end":{"line":70,"column":26,"offset":2157}}},{"type":"text","value":"\n","position":{"start":{"line":70,"column":26,"offset":2157},"end":{"line":71,"column":1,"offset":2158}}},{"type":"raw","value":"<br>","position":{"start":{"line":71,"column":1,"offset":2158},"end":{"line":71,"column":5,"offset":2162}}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer.\n","position":{"start":{"line":71,"column":5,"offset":2162},"end":{"line":73,"column":1,"offset":2280}}},{"type":"raw","value":"<br>","position":{"start":{"line":73,"column":1,"offset":2280},"end":{"line":73,"column":5,"offset":2284}}},{"type":"text","value":"\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value.\n","position":{"start":{"line":73,"column":5,"offset":2284},"end":{"line":75,"column":1,"offset":2405}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":75,"column":1,"offset":2405},"end":{"line":75,"column":12,"offset":2416}}},{"type":"text","value":" is a expression and not a primitive value, so it calls ","position":{"start":{"line":75,"column":12,"offset":2416},"end":{"line":75,"column":68,"offset":2472}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":75,"column":68,"offset":2472},"end":{"line":75,"column":79,"offset":2483}}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":75,"column":79,"offset":2483},"end":{"line":75,"column":106,"offset":2510}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":75,"column":106,"offset":2510},"end":{"line":75,"column":109,"offset":2513}}},{"type":"text","value":" is now 7 and both arguments are primitive values, meaning it can calculate the ","position":{"start":{"line":75,"column":109,"offset":2513},"end":{"line":75,"column":189,"offset":2593}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":75,"column":189,"offset":2593},"end":{"line":75,"column":192,"offset":2596}}},{"type":"text","value":" to get 3.","position":{"start":{"line":75,"column":192,"offset":2596},"end":{"line":75,"column":202,"offset":2606}}}],"position":{"start":{"line":64,"column":1,"offset":1694},"end":{"line":75,"column":202,"offset":2606}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Define","position":{"start":{"line":77,"column":8,"offset":2615},"end":{"line":77,"column":14,"offset":2621}}}],"position":{"start":{"line":77,"column":1,"offset":2608},"end":{"line":77,"column":14,"offset":2621}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":78,"column":1,"offset":2622},"end":{"line":78,"column":9,"offset":2630}}},{"type":"text","value":" is an interesting keyword. It can be used to create functions: ","position":{"start":{"line":78,"column":9,"offset":2630},"end":{"line":78,"column":73,"offset":2694}}}],"position":{"start":{"line":78,"column":1,"offset":2622},"end":{"line":78,"column":73,"offset":2694}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":79,"column":1,"offset":2695},"end":{"line":82,"column":4,"offset":2734}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":83,"column":1,"offset":2735},"end":{"line":83,"column":5,"offset":2739}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The syntax is very different from other languages, but try to think of ","position":{"start":{"line":85,"column":1,"offset":2741},"end":{"line":85,"column":72,"offset":2812}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":85,"column":72,"offset":2812},"end":{"line":85,"column":80,"offset":2820}}},{"type":"text","value":" as a function itself.\n","position":{"start":{"line":85,"column":80,"offset":2820},"end":{"line":86,"column":1,"offset":2844}}},{"type":"raw","value":"<br>","position":{"start":{"line":86,"column":1,"offset":2844},"end":{"line":86,"column":5,"offset":2848}}},{"type":"text","value":"\n","position":{"start":{"line":86,"column":5,"offset":2848},"end":{"line":87,"column":1,"offset":2849}}},{"type":"raw","value":"<br>","position":{"start":{"line":87,"column":1,"offset":2849},"end":{"line":87,"column":5,"offset":2853}}},{"type":"text","value":"\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case ","position":{"start":{"line":87,"column":5,"offset":2853},"end":{"line":88,"column":184,"offset":3037}}},{"type":"raw","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":88,"column":184,"offset":3037},"end":{"line":88,"column":187,"offset":3040}}},{"type":"text","value":".\n","position":{"start":{"line":88,"column":187,"offset":3040},"end":{"line":89,"column":1,"offset":3043}}},{"type":"raw","value":"<br>","position":{"start":{"line":89,"column":1,"offset":3043},"end":{"line":89,"column":5,"offset":3047}}},{"type":"text","value":"\n","position":{"start":{"line":89,"column":5,"offset":3047},"end":{"line":90,"column":1,"offset":3048}}},{"type":"raw","value":"<br>","position":{"start":{"line":90,"column":1,"offset":3048},"end":{"line":90,"column":5,"offset":3052}}},{"type":"text","value":"\nThe second parameter that ","position":{"start":{"line":90,"column":5,"offset":3052},"end":{"line":91,"column":27,"offset":3079}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":91,"column":27,"offset":3079},"end":{"line":91,"column":35,"offset":3087}}},{"type":"text","value":" takes in is the body that the procedure will call ","position":{"start":{"line":91,"column":35,"offset":3087},"end":{"line":91,"column":86,"offset":3138}}},{"type":"raw","value":"<code class=\"language-text\">(* x x)</code>","position":{"start":{"line":91,"column":86,"offset":3138},"end":{"line":91,"column":95,"offset":3147}}},{"type":"text","value":". ","position":{"start":{"line":91,"column":95,"offset":3147},"end":{"line":91,"column":97,"offset":3149}}}],"position":{"start":{"line":85,"column":1,"offset":2741},"end":{"line":91,"column":97,"offset":3149}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br> ","position":{"start":{"line":93,"column":1,"offset":3151},"end":{"line":93,"column":6,"offset":3156}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define can also be used to store constants:\n","position":{"start":{"line":95,"column":1,"offset":3158},"end":{"line":96,"column":1,"offset":3202}}},{"type":"raw","value":"<br>","position":{"start":{"line":96,"column":1,"offset":3202},"end":{"line":96,"column":5,"offset":3206}}},{"type":"text","value":"\n","position":{"start":{"line":96,"column":5,"offset":3206},"end":{"line":97,"column":1,"offset":3207}}},{"type":"raw","value":"<code class=\"language-text\">(define pi 3.14159)</code>","position":{"start":{"line":97,"column":1,"offset":3207},"end":{"line":97,"column":22,"offset":3228}}},{"type":"text","value":"\n","position":{"start":{"line":97,"column":22,"offset":3228},"end":{"line":98,"column":1,"offset":3229}}},{"type":"raw","value":"<br>","position":{"start":{"line":98,"column":1,"offset":3229},"end":{"line":98,"column":5,"offset":3233}}}],"position":{"start":{"line":95,"column":1,"offset":3158},"end":{"line":98,"column":5,"offset":3233}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.","position":{"start":{"line":100,"column":1,"offset":3235},"end":{"line":100,"column":152,"offset":3386}}}],"position":{"start":{"line":100,"column":1,"offset":3235},"end":{"line":100,"column":152,"offset":3386}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":102,"column":8,"offset":3395},"end":{"line":102,"column":20,"offset":3407}}}],"position":{"start":{"line":102,"column":1,"offset":3388},"end":{"line":102,"column":20,"offset":3407}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the first example of a program we see in class:","position":{"start":{"line":104,"column":1,"offset":3409},"end":{"line":104,"column":56,"offset":3464}}}],"position":{"start":{"line":104,"column":1,"offset":3409},"end":{"line":104,"column":56,"offset":3464}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>","position":{"start":{"line":105,"column":1,"offset":3465},"end":{"line":110,"column":4,"offset":3556}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":111,"column":1,"offset":3557},"end":{"line":111,"column":5,"offset":3561}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you’ve probably already guessed, ","position":{"start":{"line":113,"column":1,"offset":3563},"end":{"line":113,"column":37,"offset":3599}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":113,"column":37,"offset":3599},"end":{"line":113,"column":41,"offset":3603}}},{"type":"text","value":" is a function.\n","position":{"start":{"line":113,"column":41,"offset":3603},"end":{"line":114,"column":1,"offset":3620}}},{"type":"raw","value":"<br>","position":{"start":{"line":114,"column":1,"offset":3620},"end":{"line":114,"column":5,"offset":3624}}},{"type":"text","value":"\n","position":{"start":{"line":114,"column":5,"offset":3624},"end":{"line":115,"column":1,"offset":3625}}},{"type":"raw","value":"<br>","position":{"start":{"line":115,"column":1,"offset":3625},"end":{"line":115,"column":5,"offset":3629}}},{"type":"text","value":"\nThe first parameter is the test case for example if we input fly ","position":{"start":{"line":115,"column":5,"offset":3629},"end":{"line":116,"column":66,"offset":3695}}},{"type":"raw","value":"<code class=\"language-text\">(equal? (last wd) &#39;y)</code>","position":{"start":{"line":116,"column":66,"offset":3695},"end":{"line":116,"column":89,"offset":3718}}},{"type":"text","value":" would be true, because fly ends in y.\n","position":{"start":{"line":116,"column":89,"offset":3718},"end":{"line":117,"column":1,"offset":3758}}},{"type":"raw","value":"<br>","position":{"start":{"line":117,"column":1,"offset":3758},"end":{"line":117,"column":5,"offset":3762}}},{"type":"text","value":"\n","position":{"start":{"line":117,"column":5,"offset":3762},"end":{"line":118,"column":1,"offset":3763}}},{"type":"raw","value":"<br>","position":{"start":{"line":118,"column":1,"offset":3763},"end":{"line":118,"column":5,"offset":3767}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":118,"column":5,"offset":3767},"end":{"line":119,"column":21,"offset":3788}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":119,"column":21,"offset":3788},"end":{"line":119,"column":25,"offset":3792}}},{"type":"text","value":" takes in is the expression if the test case is true.\n","position":{"start":{"line":119,"column":25,"offset":3792},"end":{"line":120,"column":1,"offset":3846}}},{"type":"raw","value":"<br>","position":{"start":{"line":120,"column":1,"offset":3846},"end":{"line":120,"column":5,"offset":3850}}},{"type":"text","value":"\n","position":{"start":{"line":120,"column":5,"offset":3850},"end":{"line":121,"column":1,"offset":3851}}},{"type":"raw","value":"<br>","position":{"start":{"line":121,"column":1,"offset":3851},"end":{"line":121,"column":5,"offset":3855}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":121,"column":5,"offset":3855},"end":{"line":122,"column":21,"offset":3876}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":122,"column":21,"offset":3876},"end":{"line":122,"column":25,"offset":3880}}},{"type":"text","value":" takes in is the expression if the test case is false.\n","position":{"start":{"line":122,"column":25,"offset":3880},"end":{"line":123,"column":1,"offset":3935}}},{"type":"raw","value":"<br>","position":{"start":{"line":123,"column":1,"offset":3935},"end":{"line":123,"column":5,"offset":3939}}},{"type":"text","value":"\n","position":{"start":{"line":123,"column":5,"offset":3939},"end":{"line":124,"column":1,"offset":3940}}},{"type":"raw","value":"<br>","position":{"start":{"line":124,"column":1,"offset":3940},"end":{"line":124,"column":5,"offset":3944}}},{"type":"text","value":"\nAlso worth noting that names that return a boolean add a ","position":{"start":{"line":124,"column":5,"offset":3944},"end":{"line":125,"column":58,"offset":4002}}},{"type":"raw","value":"<code class=\"language-text\">?</code>","position":{"start":{"line":125,"column":58,"offset":4002},"end":{"line":125,"column":61,"offset":4005}}},{"type":"text","value":" to the end to show that the primitive returned is true or false. Like how equal is ","position":{"start":{"line":125,"column":61,"offset":4005},"end":{"line":125,"column":145,"offset":4089}}},{"type":"raw","value":"<code class=\"language-text\">equal?</code>","position":{"start":{"line":125,"column":145,"offset":4089},"end":{"line":125,"column":153,"offset":4097}}},{"type":"text","value":" in the code block above.","position":{"start":{"line":125,"column":153,"offset":4097},"end":{"line":125,"column":178,"offset":4122}}}],"position":{"start":{"line":113,"column":1,"offset":3563},"end":{"line":125,"column":178,"offset":4122}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L02","position":{"start":{"line":127,"column":7,"offset":4130},"end":{"line":127,"column":10,"offset":4133}}}],"position":{"start":{"line":127,"column":1,"offset":4124},"end":{"line":127,"column":10,"offset":4133}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Recursion","position":{"start":{"line":129,"column":8,"offset":4142},"end":{"line":129,"column":17,"offset":4151}}}],"position":{"start":{"line":129,"column":1,"offset":4135},"end":{"line":129,"column":17,"offset":4151}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":130,"column":1,"offset":4152},"end":{"line":141,"column":4,"offset":4351}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":142,"column":1,"offset":4352},"end":{"line":142,"column":5,"offset":4356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n","position":{"start":{"line":144,"column":1,"offset":4358},"end":{"line":145,"column":1,"offset":4574}}},{"type":"raw","value":"<br>","position":{"start":{"line":145,"column":1,"offset":4574},"end":{"line":145,"column":5,"offset":4578}}},{"type":"text","value":"\n","position":{"start":{"line":145,"column":5,"offset":4578},"end":{"line":146,"column":1,"offset":4579}}},{"type":"raw","value":"<br>","position":{"start":{"line":146,"column":1,"offset":4579},"end":{"line":146,"column":5,"offset":4583}}},{"type":"text","value":"\nNotice in the above example from lecture the function calls pigl until ","position":{"start":{"line":146,"column":5,"offset":4583},"end":{"line":147,"column":72,"offset":4655}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":147,"column":72,"offset":4655},"end":{"line":147,"column":81,"offset":4664}}},{"type":"text","value":" is equal to true.\n","position":{"start":{"line":147,"column":81,"offset":4664},"end":{"line":148,"column":1,"offset":4683}}},{"type":"raw","value":"<br>","position":{"start":{"line":148,"column":1,"offset":4683},"end":{"line":148,"column":5,"offset":4687}}},{"type":"text","value":"\n","position":{"start":{"line":148,"column":5,"offset":4687},"end":{"line":149,"column":1,"offset":4688}}},{"type":"raw","value":"<br>","position":{"start":{"line":149,"column":1,"offset":4688},"end":{"line":149,"column":5,"offset":4692}}},{"type":"text","value":"\nLets say ","position":{"start":{"line":149,"column":5,"offset":4692},"end":{"line":150,"column":10,"offset":4702}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":150,"column":10,"offset":4702},"end":{"line":150,"column":16,"offset":4708}}},{"type":"text","value":" gets called with ","position":{"start":{"line":150,"column":16,"offset":4708},"end":{"line":150,"column":34,"offset":4726}}},{"type":"raw","value":"<code class=\"language-text\">scheme</code>","position":{"start":{"line":150,"column":34,"offset":4726},"end":{"line":150,"column":42,"offset":4734}}},{"type":"text","value":".\nThe conditional checks ","position":{"start":{"line":150,"column":42,"offset":4734},"end":{"line":151,"column":24,"offset":4759}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":151,"column":24,"offset":4759},"end":{"line":151,"column":33,"offset":4768}}},{"type":"text","value":" which checks the first letter in the word to see if it is a vowel. Since ","position":{"start":{"line":151,"column":33,"offset":4768},"end":{"line":151,"column":107,"offset":4842}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":151,"column":107,"offset":4842},"end":{"line":151,"column":116,"offset":4851}}},{"type":"text","value":" is false because ","position":{"start":{"line":151,"column":116,"offset":4851},"end":{"line":151,"column":134,"offset":4869}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":151,"column":134,"offset":4869},"end":{"line":151,"column":137,"offset":4872}}},{"type":"text","value":" isn’t a vowel it calls ","position":{"start":{"line":151,"column":137,"offset":4872},"end":{"line":151,"column":161,"offset":4896}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":151,"column":161,"offset":4896},"end":{"line":151,"column":167,"offset":4902}}},{"type":"text","value":" again with the argument ","position":{"start":{"line":151,"column":167,"offset":4902},"end":{"line":151,"column":192,"offset":4927}}},{"type":"raw","value":"<code class=\"language-text\">chemes</code>","position":{"start":{"line":151,"column":192,"offset":4927},"end":{"line":151,"column":200,"offset":4935}}},{"type":"text","value":". This is because ","position":{"start":{"line":151,"column":200,"offset":4935},"end":{"line":151,"column":218,"offset":4953}}},{"type":"raw","value":"<code class=\"language-text\">word</code>","position":{"start":{"line":151,"column":218,"offset":4953},"end":{"line":151,"column":224,"offset":4959}}},{"type":"text","value":" takes the arguments ","position":{"start":{"line":151,"column":224,"offset":4959},"end":{"line":151,"column":245,"offset":4980}}},{"type":"raw","value":"<code class=\"language-text\">cheme</code>","position":{"start":{"line":151,"column":245,"offset":4980},"end":{"line":151,"column":252,"offset":4987}}},{"type":"text","value":" and ","position":{"start":{"line":151,"column":252,"offset":4987},"end":{"line":151,"column":257,"offset":4992}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":151,"column":257,"offset":4992},"end":{"line":151,"column":260,"offset":4995}}},{"type":"text","value":" and adds them together. ","position":{"start":{"line":151,"column":260,"offset":4995},"end":{"line":151,"column":285,"offset":5020}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":151,"column":285,"offset":5020},"end":{"line":151,"column":291,"offset":5026}}},{"type":"text","value":" gets called repeatedly until\nit is called with a vowel as the first letter. When the first letter is a vowel the expression ","position":{"start":{"line":151,"column":291,"offset":5026},"end":{"line":152,"column":96,"offset":5152}}},{"type":"raw","value":"<code class=\"language-text\">(word wd &#39;ay)</code>","position":{"start":{"line":152,"column":96,"offset":5152},"end":{"line":152,"column":111,"offset":5167}}},{"type":"text","value":" is ran and the result is a primitive which means the procedure stops. ","position":{"start":{"line":152,"column":111,"offset":5167},"end":{"line":152,"column":182,"offset":5238}}}],"position":{"start":{"line":144,"column":1,"offset":4358},"end":{"line":152,"column":182,"offset":5238}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":154,"column":8,"offset":5247},"end":{"line":154,"column":19,"offset":5258}}}],"position":{"start":{"line":154,"column":1,"offset":5240},"end":{"line":154,"column":19,"offset":5258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Big Picture: ","position":{"start":{"line":155,"column":1,"offset":5259},"end":{"line":155,"column":14,"offset":5272}}}],"position":{"start":{"line":155,"column":1,"offset":5259},"end":{"line":155,"column":14,"offset":5272}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>","position":{"start":{"line":156,"column":1,"offset":5273},"end":{"line":171,"column":4,"offset":5688}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":172,"column":1,"offset":5689},"end":{"line":172,"column":5,"offset":5693}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that can be referenced as a whole.","position":{"start":{"line":174,"column":1,"offset":5695},"end":{"line":174,"column":141,"offset":5835}}}],"position":{"start":{"line":174,"column":1,"offset":5695},"end":{"line":174,"column":141,"offset":5835}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Functional Programming","position":{"start":{"line":176,"column":8,"offset":5844},"end":{"line":176,"column":30,"offset":5866}}}],"position":{"start":{"line":176,"column":1,"offset":5837},"end":{"line":176,"column":30,"offset":5866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the introduction of multi-core processers, parallelism has helped functional programming make a comeback. If everything is a function you won’t run into race conditions created by dependencies.","position":{"start":{"line":177,"column":1,"offset":5867},"end":{"line":177,"column":199,"offset":6065}}}],"position":{"start":{"line":177,"column":1,"offset":5867},"end":{"line":177,"column":199,"offset":6065}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Function vs. Procedure","position":{"start":{"line":179,"column":8,"offset":6074},"end":{"line":179,"column":30,"offset":6096}}}],"position":{"start":{"line":179,"column":1,"offset":6067},"end":{"line":179,"column":30,"offset":6096}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Two functions are the same if they give the same output with given inputs.\n","position":{"start":{"line":181,"column":1,"offset":6098},"end":{"line":182,"column":1,"offset":6173}}},{"type":"raw","value":"<br>","position":{"start":{"line":182,"column":1,"offset":6173},"end":{"line":182,"column":5,"offset":6177}}},{"type":"text","value":"\n","position":{"start":{"line":182,"column":5,"offset":6177},"end":{"line":183,"column":1,"offset":6178}}},{"type":"raw","value":"<br>","position":{"start":{"line":183,"column":1,"offset":6178},"end":{"line":183,"column":5,"offset":6182}}},{"type":"text","value":"\nA procedure is a sequence of steps for computing a function.\n","position":{"start":{"line":183,"column":5,"offset":6182},"end":{"line":185,"column":1,"offset":6244}}},{"type":"raw","value":"<br>","position":{"start":{"line":185,"column":1,"offset":6244},"end":{"line":185,"column":5,"offset":6248}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":185,"column":5,"offset":6248},"end":{"line":186,"column":1,"offset":6251}}},{"type":"text","value":"\n"},{"type":"text","value":"Therefore ","position":{"start":{"line":186,"column":1,"offset":6251},"end":{"line":186,"column":11,"offset":6261}}},{"type":"raw","value":"<code class=\"language-text\">2x + 6</code>","position":{"start":{"line":186,"column":11,"offset":6261},"end":{"line":186,"column":19,"offset":6269}}},{"type":"text","value":" and ","position":{"start":{"line":186,"column":19,"offset":6269},"end":{"line":186,"column":24,"offset":6274}}},{"type":"raw","value":"<code class=\"language-text\">2(x + 3)</code>","position":{"start":{"line":186,"column":24,"offset":6274},"end":{"line":186,"column":34,"offset":6284}}},{"type":"text","value":" are the same function but different procedures.\n","position":{"start":{"line":186,"column":34,"offset":6284},"end":{"line":187,"column":1,"offset":6333}}},{"type":"raw","value":"<br>","position":{"start":{"line":187,"column":1,"offset":6333},"end":{"line":187,"column":5,"offset":6337}}}],"position":{"start":{"line":181,"column":1,"offset":6098},"end":{"line":187,"column":5,"offset":6337}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Cond","position":{"start":{"line":189,"column":8,"offset":6346},"end":{"line":189,"column":12,"offset":6350}}}],"position":{"start":{"line":189,"column":1,"offset":6339},"end":{"line":189,"column":12,"offset":6350}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (buzz n) \n    (cond ((equal? (remainder n 7) 0) &#39;buzz)\n    ((member? 7 n) &#39;buzz)\n    (else n)))</code></pre></div>","position":{"start":{"line":190,"column":1,"offset":6351},"end":{"line":195,"column":4,"offset":6462}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":196,"column":1,"offset":6463},"end":{"line":197,"column":5,"offset":6472}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":199,"column":1,"offset":6474},"end":{"line":199,"column":7,"offset":6480}}},{"type":"text","value":" allows for multiple test cases, and will return\nthe first clause that is true.\n","position":{"start":{"line":199,"column":7,"offset":6480},"end":{"line":201,"column":1,"offset":6562}}},{"type":"raw","value":"<br>","position":{"start":{"line":201,"column":1,"offset":6562},"end":{"line":201,"column":5,"offset":6566}}},{"type":"text","value":"\n","position":{"start":{"line":201,"column":5,"offset":6566},"end":{"line":202,"column":1,"offset":6567}}},{"type":"raw","value":"<br>","position":{"start":{"line":202,"column":1,"offset":6567},"end":{"line":202,"column":5,"offset":6571}}},{"type":"text","value":"\nLets try ","position":{"start":{"line":202,"column":5,"offset":6571},"end":{"line":203,"column":10,"offset":6581}}},{"type":"raw","value":"<code class=\"language-text\">14</code>","position":{"start":{"line":203,"column":10,"offset":6581},"end":{"line":203,"column":14,"offset":6585}}},{"type":"text","value":". Since ","position":{"start":{"line":203,"column":14,"offset":6585},"end":{"line":203,"column":22,"offset":6593}}},{"type":"raw","value":"<code class=\"language-text\">14 / 7</code>","position":{"start":{"line":203,"column":22,"offset":6593},"end":{"line":203,"column":30,"offset":6601}}},{"type":"text","value":" has a remainder of ","position":{"start":{"line":203,"column":30,"offset":6601},"end":{"line":203,"column":50,"offset":6621}}},{"type":"raw","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":203,"column":50,"offset":6621},"end":{"line":203,"column":53,"offset":6624}}},{"type":"text","value":" the first clause is met and returns ","position":{"start":{"line":203,"column":53,"offset":6624},"end":{"line":203,"column":90,"offset":6661}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":203,"column":90,"offset":6661},"end":{"line":203,"column":96,"offset":6667}}},{"type":"text","value":".\n","position":{"start":{"line":203,"column":96,"offset":6667},"end":{"line":204,"column":1,"offset":6670}}},{"type":"raw","value":"<br>","position":{"start":{"line":204,"column":1,"offset":6670},"end":{"line":204,"column":5,"offset":6674}}},{"type":"text","value":"\n","position":{"start":{"line":204,"column":5,"offset":6674},"end":{"line":205,"column":1,"offset":6675}}},{"type":"raw","value":"<br>","position":{"start":{"line":205,"column":1,"offset":6675},"end":{"line":205,"column":5,"offset":6679}}},{"type":"text","value":"\nNow Lets try ","position":{"start":{"line":205,"column":5,"offset":6679},"end":{"line":206,"column":14,"offset":6693}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":206,"column":14,"offset":6693},"end":{"line":206,"column":18,"offset":6697}}},{"type":"text","value":". The first clause is not met, and therefore goes onto the next clause. ","position":{"start":{"line":206,"column":18,"offset":6697},"end":{"line":206,"column":90,"offset":6769}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":206,"column":90,"offset":6769},"end":{"line":206,"column":94,"offset":6773}}},{"type":"text","value":" does have a 7 inside of it so ","position":{"start":{"line":206,"column":94,"offset":6773},"end":{"line":206,"column":125,"offset":6804}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":206,"column":125,"offset":6804},"end":{"line":206,"column":131,"offset":6810}}},{"type":"text","value":" is returned.\n","position":{"start":{"line":206,"column":131,"offset":6810},"end":{"line":207,"column":1,"offset":6825}}},{"type":"raw","value":"<br>","position":{"start":{"line":207,"column":1,"offset":6825},"end":{"line":207,"column":5,"offset":6829}}},{"type":"text","value":"\n","position":{"start":{"line":207,"column":5,"offset":6829},"end":{"line":208,"column":1,"offset":6830}}},{"type":"raw","value":"<br>","position":{"start":{"line":208,"column":1,"offset":6830},"end":{"line":208,"column":5,"offset":6834}}},{"type":"text","value":"\nNow lets try ","position":{"start":{"line":208,"column":5,"offset":6834},"end":{"line":209,"column":14,"offset":6848}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":209,"column":14,"offset":6848},"end":{"line":209,"column":18,"offset":6852}}},{"type":"text","value":". The remainder is ","position":{"start":{"line":209,"column":18,"offset":6852},"end":{"line":209,"column":37,"offset":6871}}},{"type":"raw","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":209,"column":37,"offset":6871},"end":{"line":209,"column":40,"offset":6874}}},{"type":"text","value":" so the first clause is not met, and ","position":{"start":{"line":209,"column":40,"offset":6874},"end":{"line":209,"column":77,"offset":6911}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":209,"column":77,"offset":6911},"end":{"line":209,"column":81,"offset":6915}}},{"type":"text","value":"  does not have a ","position":{"start":{"line":209,"column":81,"offset":6915},"end":{"line":209,"column":99,"offset":6933}}},{"type":"raw","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":209,"column":99,"offset":6933},"end":{"line":209,"column":102,"offset":6936}}},{"type":"text","value":" inside of it so the catch all ","position":{"start":{"line":209,"column":102,"offset":6936},"end":{"line":209,"column":133,"offset":6967}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":209,"column":133,"offset":6967},"end":{"line":209,"column":139,"offset":6973}}},{"type":"text","value":" keyword returns the number ","position":{"start":{"line":209,"column":139,"offset":6973},"end":{"line":209,"column":167,"offset":7001}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":209,"column":167,"offset":7001},"end":{"line":209,"column":171,"offset":7005}}},{"type":"text","value":".\n","position":{"start":{"line":209,"column":171,"offset":7005},"end":{"line":210,"column":1,"offset":7007}}},{"type":"raw","value":"<br>","position":{"start":{"line":210,"column":1,"offset":7007},"end":{"line":210,"column":5,"offset":7011}}},{"type":"text","value":"\n","position":{"start":{"line":210,"column":5,"offset":7011},"end":{"line":211,"column":1,"offset":7012}}},{"type":"raw","value":"<br>","position":{"start":{"line":211,"column":1,"offset":7012},"end":{"line":211,"column":5,"offset":7016}}},{"type":"text","value":"\nImportant to note:\n","position":{"start":{"line":211,"column":5,"offset":7016},"end":{"line":213,"column":1,"offset":7036}}},{"type":"raw","value":"<br>","position":{"start":{"line":213,"column":1,"offset":7036},"end":{"line":213,"column":5,"offset":7040}}},{"type":"text","value":"\nIf a ","position":{"start":{"line":213,"column":5,"offset":7040},"end":{"line":214,"column":6,"offset":7046}}},{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":214,"column":6,"offset":7046},"end":{"line":214,"column":12,"offset":7052}}},{"type":"text","value":" does not have an ","position":{"start":{"line":214,"column":12,"offset":7052},"end":{"line":214,"column":30,"offset":7070}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":214,"column":30,"offset":7070},"end":{"line":214,"column":36,"offset":7076}}},{"type":"text","value":" statement it will return ","position":{"start":{"line":214,"column":36,"offset":7076},"end":{"line":214,"column":62,"offset":7102}}},{"type":"raw","value":"<code class=\"language-text\">unspecified</code>","position":{"start":{"line":214,"column":62,"offset":7102},"end":{"line":214,"column":75,"offset":7115}}},{"type":"text","value":", which can be different depending on interpreted, so always have an else statement.","position":{"start":{"line":214,"column":75,"offset":7115},"end":{"line":214,"column":159,"offset":7199}}}],"position":{"start":{"line":199,"column":1,"offset":6474},"end":{"line":214,"column":159,"offset":7199}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Applicative Order vs Normal Order","position":{"start":{"line":216,"column":8,"offset":7208},"end":{"line":216,"column":41,"offset":7241}}}],"position":{"start":{"line":216,"column":1,"offset":7201},"end":{"line":216,"column":41,"offset":7241}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (f a b) (+ (g a) b))\n(def (g x) (* 3 x))\n\n(f (+ 2 3) (- 15 6))</code></pre></div>","position":{"start":{"line":217,"column":1,"offset":7242},"end":{"line":222,"column":4,"offset":7317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Applicative Order:\n","position":{"start":{"line":223,"column":1,"offset":7318},"end":{"line":224,"column":1,"offset":7337}}},{"type":"raw","value":"<br>","position":{"start":{"line":224,"column":1,"offset":7337},"end":{"line":224,"column":5,"offset":7341}}},{"type":"text","value":"\nevaluates the sub expressions until they are primitive values, then passes the primitive results back up to the parent function.\n","position":{"start":{"line":224,"column":5,"offset":7341},"end":{"line":226,"column":5,"offset":7479}}},{"type":"raw","value":"<br>","position":{"start":{"line":226,"column":5,"offset":7479},"end":{"line":226,"column":9,"offset":7483}}},{"type":"text","value":"\n","position":{"start":{"line":226,"column":9,"offset":7483},"end":{"line":227,"column":5,"offset":7488}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":227,"column":5,"offset":7488},"end":{"line":227,"column":27,"offset":7510}}},{"type":"text","value":"\n","position":{"start":{"line":227,"column":27,"offset":7510},"end":{"line":228,"column":5,"offset":7515}}},{"type":"raw","value":"<br>","position":{"start":{"line":228,"column":5,"offset":7515},"end":{"line":228,"column":9,"offset":7519}}},{"type":"text","value":"\n","position":{"start":{"line":228,"column":9,"offset":7519},"end":{"line":229,"column":5,"offset":7524}}},{"type":"raw","value":"<code class=\"language-text\">2 + 3</code>","position":{"start":{"line":229,"column":5,"offset":7524},"end":{"line":229,"column":12,"offset":7531}}},{"type":"text","value":" and ","position":{"start":{"line":229,"column":12,"offset":7531},"end":{"line":229,"column":17,"offset":7536}}},{"type":"raw","value":"<code class=\"language-text\">15 - 6</code>","position":{"start":{"line":229,"column":17,"offset":7536},"end":{"line":229,"column":25,"offset":7544}}},{"type":"text","value":" will be evaluated before the outside ","position":{"start":{"line":229,"column":25,"offset":7544},"end":{"line":229,"column":63,"offset":7582}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":229,"column":63,"offset":7582},"end":{"line":229,"column":66,"offset":7585}}},{"type":"text","value":" is evaluated. Then ","position":{"start":{"line":229,"column":66,"offset":7585},"end":{"line":229,"column":86,"offset":7605}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":229,"column":86,"offset":7605},"end":{"line":229,"column":89,"offset":7608}}},{"type":"text","value":" will be called with ","position":{"start":{"line":229,"column":89,"offset":7608},"end":{"line":229,"column":110,"offset":7629}}},{"type":"raw","value":"<code class=\"language-text\">(f 5 9)</code>","position":{"start":{"line":229,"column":110,"offset":7629},"end":{"line":229,"column":119,"offset":7638}}},{"type":"text","value":".\n","position":{"start":{"line":229,"column":119,"offset":7638},"end":{"line":230,"column":1,"offset":7640}}},{"type":"raw","value":"<br>","position":{"start":{"line":230,"column":1,"offset":7640},"end":{"line":230,"column":5,"offset":7644}}},{"type":"text","value":"\nNormal Order:\n","position":{"start":{"line":230,"column":5,"offset":7644},"end":{"line":232,"column":1,"offset":7660}}},{"type":"raw","value":"<br>","position":{"start":{"line":232,"column":1,"offset":7660},"end":{"line":232,"column":5,"offset":7664}}},{"type":"text","value":"\nevaluates the outsides first, but instead of passing primitive values it passes the expressions.\n","position":{"start":{"line":232,"column":5,"offset":7664},"end":{"line":234,"column":5,"offset":7771}}},{"type":"raw","value":"<br>","position":{"start":{"line":234,"column":5,"offset":7771},"end":{"line":234,"column":9,"offset":7775}}},{"type":"text","value":"\n","position":{"start":{"line":234,"column":9,"offset":7775},"end":{"line":235,"column":1,"offset":7776}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":235,"column":1,"offset":7776},"end":{"line":235,"column":23,"offset":7798}}},{"type":"text","value":" turns into ","position":{"start":{"line":235,"column":23,"offset":7798},"end":{"line":235,"column":35,"offset":7810}}},{"type":"raw","value":"<code class=\"language-text\">(+ (g (+ 2 3)) (- 15 6))</code>","position":{"start":{"line":235,"column":35,"offset":7810},"end":{"line":235,"column":61,"offset":7836}}},{"type":"text","value":"\n","position":{"start":{"line":235,"column":61,"offset":7836},"end":{"line":236,"column":1,"offset":7837}}},{"type":"raw","value":"<br>","position":{"start":{"line":236,"column":1,"offset":7837},"end":{"line":236,"column":5,"offset":7841}}},{"type":"text","value":"\nNow ","position":{"start":{"line":236,"column":5,"offset":7841},"end":{"line":237,"column":5,"offset":7846}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":237,"column":5,"offset":7846},"end":{"line":237,"column":8,"offset":7849}}},{"type":"text","value":" is done and the next expression can be evaluated.","position":{"start":{"line":237,"column":8,"offset":7849},"end":{"line":237,"column":58,"offset":7899}}}],"position":{"start":{"line":223,"column":1,"offset":7318},"end":{"line":237,"column":58,"offset":7899}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Possible Problem:\n","position":{"start":{"line":239,"column":1,"offset":7901},"end":{"line":240,"column":1,"offset":7919}}},{"type":"raw","value":"<br>","position":{"start":{"line":240,"column":1,"offset":7919},"end":{"line":240,"column":5,"offset":7923}}}],"position":{"start":{"line":239,"column":1,"offset":7901},"end":{"line":240,"column":5,"offset":7923}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (zero z) (- x x))</code></pre></div>","position":{"start":{"line":241,"column":1,"offset":7924},"end":{"line":243,"column":4,"offset":7954}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"applicative ","position":{"start":{"line":244,"column":1,"offset":7955},"end":{"line":244,"column":13,"offset":7967}}}],"position":{"start":{"line":244,"column":1,"offset":7955},"end":{"line":244,"column":13,"offset":7967}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(random 10) ==&gt; 8\n(zero 8) ---&gt;\n(- 8 8) ==&gt; 0\n0</code></pre></div>","position":{"start":{"line":245,"column":1,"offset":7968},"end":{"line":251,"column":4,"offset":8047}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"normal ","position":{"start":{"line":252,"column":1,"offset":8048},"end":{"line":252,"column":8,"offset":8055}}}],"position":{"start":{"line":252,"column":1,"offset":8048},"end":{"line":252,"column":8,"offset":8055}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(+ (random 10) (random 10)) ==&gt; \n    (random 10) ==&gt; 8\n    (random 10) ==&gt; 1\n(- 8 1) ==&gt; 7\n7</code></pre></div>","position":{"start":{"line":253,"column":1,"offset":8056},"end":{"line":260,"column":4,"offset":8180}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":261,"column":1,"offset":8181},"end":{"line":262,"column":5,"offset":8190}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the ","position":{"start":{"line":264,"column":1,"offset":8192},"end":{"line":264,"column":11,"offset":8202}}},{"type":"raw","value":"<code class=\"language-text\">(random 10)</code>","position":{"start":{"line":264,"column":11,"offset":8202},"end":{"line":264,"column":24,"offset":8215}}},{"type":"text","value":" is split into 2 different function alls in normal order you get different results.","position":{"start":{"line":264,"column":24,"offset":8215},"end":{"line":264,"column":107,"offset":8298}}}],"position":{"start":{"line":264,"column":1,"offset":8192},"end":{"line":264,"column":107,"offset":8298}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L03","position":{"start":{"line":266,"column":7,"offset":8306},"end":{"line":266,"column":10,"offset":8309}}}],"position":{"start":{"line":266,"column":1,"offset":8300},"end":{"line":266,"column":10,"offset":8309}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L04","position":{"start":{"line":267,"column":7,"offset":8316},"end":{"line":267,"column":10,"offset":8319}}}],"position":{"start":{"line":267,"column":1,"offset":8310},"end":{"line":267,"column":10,"offset":8319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LABS","position":{"start":{"line":269,"column":6,"offset":8326},"end":{"line":269,"column":10,"offset":8330}}}],"position":{"start":{"line":269,"column":1,"offset":8321},"end":{"line":269,"column":10,"offset":8330}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1A","position":{"start":{"line":270,"column":7,"offset":8337},"end":{"line":270,"column":13,"offset":8343}}}],"position":{"start":{"line":270,"column":1,"offset":8331},"end":{"line":270,"column":13,"offset":8343}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first problem for the lab was to modify the ","position":{"start":{"line":271,"column":1,"offset":8344},"end":{"line":271,"column":49,"offset":8392}}},{"type":"raw","value":"<code class=\"language-text\">plural</code>","position":{"start":{"line":271,"column":49,"offset":8392},"end":{"line":271,"column":57,"offset":8400}}},{"type":"text","value":" program to handle a word ending in y, but has a vowel in front of it (boy).","position":{"start":{"line":271,"column":57,"offset":8400},"end":{"line":271,"column":133,"offset":8476}}}],"position":{"start":{"line":271,"column":1,"offset":8344},"end":{"line":271,"column":133,"offset":8476}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t\t(if (vowel? (last (bl wd)))\n\t\t(word wd &#39;s)\n\t\t(word (bl wd) &#39;ies))\n\t(word wd &#39;s)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":272,"column":1,"offset":8477},"end":{"line":282,"column":4,"offset":8672}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":283,"column":1,"offset":8673},"end":{"line":283,"column":5,"offset":8677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I handled this by adding a conditional that checks for the second to last letter.\n","position":{"start":{"line":286,"column":1,"offset":8680},"end":{"line":287,"column":1,"offset":8762}}},{"type":"raw","value":"<br>","position":{"start":{"line":287,"column":1,"offset":8762},"end":{"line":287,"column":5,"offset":8766}}},{"type":"text","value":"\n","position":{"start":{"line":287,"column":5,"offset":8766},"end":{"line":288,"column":1,"offset":8767}}},{"type":"raw","value":"<br>","position":{"start":{"line":288,"column":1,"offset":8767},"end":{"line":288,"column":5,"offset":8771}}},{"type":"text","value":"\nThe second assgnment was:","position":{"start":{"line":288,"column":5,"offset":8771},"end":{"line":289,"column":26,"offset":8797}}}],"position":{"start":{"line":286,"column":1,"offset":8680},"end":{"line":289,"column":26,"offset":8797}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Define a procedure that takes three numbers as arguments and returns the sum of\nthe squares of the two larger numbers.</code></pre></div>","position":{"start":{"line":290,"column":1,"offset":8798},"end":{"line":295,"column":4,"offset":8926}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My Solution: ","position":{"start":{"line":296,"column":1,"offset":8927},"end":{"line":296,"column":14,"offset":8940}}}],"position":{"start":{"line":296,"column":1,"offset":8927},"end":{"line":296,"column":14,"offset":8940}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (twoLargerSums a b c)\n    (if (&gt;= a b)\n        (if (&gt;= b c)\n            (+ (square a) (square b))\n            (+ (square a) (square c)))\n        (if (&gt;= a c)\n            (+ (square a) (square b))\n            (+ (square b) (square c))))\n)\n\n(define (square x)\n(* x x))</code></pre></div>","position":{"start":{"line":298,"column":1,"offset":8942},"end":{"line":311,"column":4,"offset":9224}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":313,"column":1,"offset":9226},"end":{"line":314,"column":5,"offset":9235}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1B","position":{"start":{"line":317,"column":7,"offset":9244},"end":{"line":317,"column":13,"offset":9250}}}],"position":{"start":{"line":317,"column":1,"offset":9238},"end":{"line":317,"column":13,"offset":9250}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":317,"column":13,"offset":9250}}}}