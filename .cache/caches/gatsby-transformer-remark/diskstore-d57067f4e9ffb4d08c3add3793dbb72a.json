{"expireTime":9007200869000563000,"key":"transformer-remark-markdown-html-ast-77ca35ea28b6dc6ffc55a125156d0480-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":55,"offset":55}}},{"type":"element","tagName":"a","properties":{"href":"https://teachyourselfcs.com/"},"children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":2,"column":56,"offset":56},"end":{"line":2,"column":71,"offset":71}}}],"position":{"start":{"line":2,"column":55,"offset":55},"end":{"line":2,"column":102,"offset":102}}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":2,"column":102,"offset":102},"end":{"line":3,"column":51,"offset":154}}},{"type":"element","tagName":"a","properties":{"href":"https://bpp.dev/articles/teachyourselfcs/programming/00-getting-started/"},"children":[{"type":"text","value":"here","position":{"start":{"line":3,"column":52,"offset":155},"end":{"line":3,"column":56,"offset":159}}}],"position":{"start":{"line":3,"column":51,"offset":154},"end":{"line":3,"column":131,"offset":234}}},{"type":"text","value":".","position":{"start":{"line":3,"column":131,"offset":234},"end":{"line":3,"column":132,"offset":235}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":132,"offset":235}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"INTRO","position":{"start":{"line":5,"column":4,"offset":240},"end":{"line":5,"column":9,"offset":245}}}],"position":{"start":{"line":5,"column":1,"offset":237},"end":{"line":5,"column":9,"offset":245}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I will be following the Summer 2010 ","position":{"start":{"line":7,"column":1,"offset":247},"end":{"line":7,"column":37,"offset":283}}},{"type":"element","tagName":"a","properties":{"href":"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html"},"children":[{"type":"text","value":"Calendar","position":{"start":{"line":7,"column":38,"offset":284},"end":{"line":7,"column":46,"offset":292}}}],"position":{"start":{"line":7,"column":37,"offset":283},"end":{"line":7,"column":101,"offset":347}}},{"type":"text","value":"\nso each week will consist of 4 lectures and 2 labs.","position":{"start":{"line":7,"column":101,"offset":347},"end":{"line":8,"column":52,"offset":399}}}],"position":{"start":{"line":7,"column":1,"offset":247},"end":{"line":8,"column":52,"offset":399}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":10,"column":4,"offset":404},"end":{"line":10,"column":12,"offset":412}}}],"position":{"start":{"line":10,"column":1,"offset":401},"end":{"line":10,"column":12,"offset":412}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"L01","position":{"start":{"line":12,"column":5,"offset":418},"end":{"line":12,"column":8,"offset":421}}}],"position":{"start":{"line":12,"column":1,"offset":414},"end":{"line":12,"column":8,"offset":421}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":14,"column":6,"offset":428},"end":{"line":14,"column":28,"offset":450}}}],"position":{"start":{"line":14,"column":1,"offset":423},"end":{"line":14,"column":28,"offset":450}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":16,"column":1,"offset":452},"end":{"line":17,"column":1,"offset":596}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":1,"offset":596},"end":{"line":17,"column":5,"offset":600}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":17,"column":5,"offset":600},"end":{"line":17,"column":16,"offset":611}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":16,"offset":611},"end":{"line":17,"column":20,"offset":615}}},{"type":"text","value":"\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n","position":{"start":{"line":17,"column":20,"offset":615},"end":{"line":19,"column":1,"offset":757}}},{"type":"raw","value":"<br>","position":{"start":{"line":19,"column":1,"offset":757},"end":{"line":19,"column":5,"offset":761}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":19,"column":5,"offset":761},"end":{"line":19,"column":16,"offset":772}}},{"type":"raw","value":"<br>","position":{"start":{"line":19,"column":16,"offset":772},"end":{"line":19,"column":20,"offset":776}}},{"type":"text","value":"\nNow lets say we want to do something like: ","position":{"start":{"line":19,"column":20,"offset":776},"end":{"line":20,"column":44,"offset":820}}},{"type":"raw","value":"<br>","position":{"start":{"line":20,"column":44,"offset":820},"end":{"line":20,"column":48,"offset":824}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 + 3 - 4</code>","position":{"start":{"line":20,"column":48,"offset":824},"end":{"line":20,"column":63,"offset":839}}},{"type":"raw","value":"<br>","position":{"start":{"line":20,"column":63,"offset":839},"end":{"line":20,"column":67,"offset":843}}},{"type":"text","value":"\nIn Scheme you can simply nest operators:\n","position":{"start":{"line":20,"column":67,"offset":843},"end":{"line":22,"column":1,"offset":885}}},{"type":"raw","value":"<br>","position":{"start":{"line":22,"column":1,"offset":885},"end":{"line":22,"column":5,"offset":889}}},{"type":"raw","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":22,"column":5,"offset":889},"end":{"line":22,"column":22,"offset":906}}},{"type":"raw","value":"<br>","position":{"start":{"line":22,"column":22,"offset":906},"end":{"line":22,"column":26,"offset":910}}},{"type":"text","value":"\n","position":{"start":{"line":22,"column":26,"offset":910},"end":{"line":23,"column":1,"offset":911}}},{"type":"raw","value":"<br>","position":{"start":{"line":23,"column":1,"offset":911},"end":{"line":23,"column":5,"offset":915}}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer.\n","position":{"start":{"line":23,"column":5,"offset":915},"end":{"line":25,"column":1,"offset":1032}}},{"type":"raw","value":"<br>","position":{"start":{"line":25,"column":1,"offset":1032},"end":{"line":25,"column":5,"offset":1036}}},{"type":"text","value":"\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value.\n","position":{"start":{"line":25,"column":5,"offset":1036},"end":{"line":27,"column":1,"offset":1156}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":27,"column":1,"offset":1156},"end":{"line":27,"column":12,"offset":1167}}},{"type":"text","value":" is a expression and not a primitive value, so it calls ","position":{"start":{"line":27,"column":12,"offset":1167},"end":{"line":27,"column":68,"offset":1223}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":27,"column":68,"offset":1223},"end":{"line":27,"column":79,"offset":1234}}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":27,"column":79,"offset":1234},"end":{"line":27,"column":106,"offset":1261}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":27,"column":106,"offset":1261},"end":{"line":27,"column":109,"offset":1264}}},{"type":"text","value":" is now 7 and both arguments are primitive values, meaning it can calculate the ","position":{"start":{"line":27,"column":109,"offset":1264},"end":{"line":27,"column":189,"offset":1344}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":27,"column":189,"offset":1344},"end":{"line":27,"column":192,"offset":1347}}},{"type":"text","value":" to get 3.","position":{"start":{"line":27,"column":192,"offset":1347},"end":{"line":27,"column":202,"offset":1357}}}],"position":{"start":{"line":16,"column":1,"offset":452},"end":{"line":27,"column":202,"offset":1357}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Define","position":{"start":{"line":29,"column":6,"offset":1364},"end":{"line":29,"column":12,"offset":1370}}}],"position":{"start":{"line":29,"column":1,"offset":1359},"end":{"line":29,"column":12,"offset":1370}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":31,"column":1,"offset":1372},"end":{"line":31,"column":9,"offset":1380}}},{"type":"text","value":" is an interesting keyword. It can be used to create functions:","position":{"start":{"line":31,"column":9,"offset":1380},"end":{"line":31,"column":72,"offset":1443}}}],"position":{"start":{"line":31,"column":1,"offset":1372},"end":{"line":31,"column":72,"offset":1443}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":33,"column":1,"offset":1445},"end":{"line":36,"column":4,"offset":1484}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":38,"column":1,"offset":1486},"end":{"line":38,"column":5,"offset":1490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The syntax is very different from other languages, but try to think of ","position":{"start":{"line":40,"column":1,"offset":1492},"end":{"line":40,"column":72,"offset":1563}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":40,"column":72,"offset":1563},"end":{"line":40,"column":80,"offset":1571}}},{"type":"text","value":" as a function itself.\n","position":{"start":{"line":40,"column":80,"offset":1571},"end":{"line":41,"column":1,"offset":1594}}},{"type":"raw","value":"<br>","position":{"start":{"line":41,"column":1,"offset":1594},"end":{"line":41,"column":5,"offset":1598}}},{"type":"text","value":"\n","position":{"start":{"line":41,"column":5,"offset":1598},"end":{"line":42,"column":1,"offset":1599}}},{"type":"raw","value":"<br>","position":{"start":{"line":42,"column":1,"offset":1599},"end":{"line":42,"column":5,"offset":1603}}},{"type":"text","value":"\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case ","position":{"start":{"line":42,"column":5,"offset":1603},"end":{"line":43,"column":184,"offset":1787}}},{"type":"raw","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":43,"column":184,"offset":1787},"end":{"line":43,"column":187,"offset":1790}}},{"type":"text","value":".\n","position":{"start":{"line":43,"column":187,"offset":1790},"end":{"line":44,"column":1,"offset":1792}}},{"type":"raw","value":"<br>","position":{"start":{"line":44,"column":1,"offset":1792},"end":{"line":44,"column":5,"offset":1796}}},{"type":"text","value":"\n","position":{"start":{"line":44,"column":5,"offset":1796},"end":{"line":45,"column":1,"offset":1797}}},{"type":"raw","value":"<br>","position":{"start":{"line":45,"column":1,"offset":1797},"end":{"line":45,"column":5,"offset":1801}}},{"type":"text","value":"\nThe second parameter that ","position":{"start":{"line":45,"column":5,"offset":1801},"end":{"line":46,"column":27,"offset":1828}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":46,"column":27,"offset":1828},"end":{"line":46,"column":35,"offset":1836}}},{"type":"text","value":" takes in is the body that the procedure will call ","position":{"start":{"line":46,"column":35,"offset":1836},"end":{"line":46,"column":86,"offset":1887}}},{"type":"raw","value":"<code class=\"language-text\">(* x x)</code>","position":{"start":{"line":46,"column":86,"offset":1887},"end":{"line":46,"column":95,"offset":1896}}},{"type":"text","value":".","position":{"start":{"line":46,"column":95,"offset":1896},"end":{"line":46,"column":96,"offset":1897}}}],"position":{"start":{"line":40,"column":1,"offset":1492},"end":{"line":46,"column":96,"offset":1897}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":48,"column":1,"offset":1899},"end":{"line":48,"column":5,"offset":1903}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define can also be used to store constants:\n","position":{"start":{"line":50,"column":1,"offset":1905},"end":{"line":51,"column":1,"offset":1949}}},{"type":"raw","value":"<br>","position":{"start":{"line":51,"column":1,"offset":1949},"end":{"line":51,"column":5,"offset":1953}}},{"type":"text","value":"\n","position":{"start":{"line":51,"column":5,"offset":1953},"end":{"line":52,"column":1,"offset":1954}}},{"type":"raw","value":"<code class=\"language-text\">(define pi 3.14159)</code>","position":{"start":{"line":52,"column":1,"offset":1954},"end":{"line":52,"column":22,"offset":1975}}},{"type":"text","value":"\n","position":{"start":{"line":52,"column":22,"offset":1975},"end":{"line":53,"column":1,"offset":1976}}},{"type":"raw","value":"<br>","position":{"start":{"line":53,"column":1,"offset":1976},"end":{"line":53,"column":5,"offset":1980}}}],"position":{"start":{"line":50,"column":1,"offset":1905},"end":{"line":53,"column":5,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.","position":{"start":{"line":55,"column":1,"offset":1982},"end":{"line":55,"column":152,"offset":2133}}}],"position":{"start":{"line":55,"column":1,"offset":1982},"end":{"line":55,"column":152,"offset":2133}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":57,"column":6,"offset":2140},"end":{"line":57,"column":18,"offset":2152}}}],"position":{"start":{"line":57,"column":1,"offset":2135},"end":{"line":57,"column":18,"offset":2152}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the first example of a program we see in class:","position":{"start":{"line":59,"column":1,"offset":2154},"end":{"line":59,"column":56,"offset":2209}}}],"position":{"start":{"line":59,"column":1,"offset":2154},"end":{"line":59,"column":56,"offset":2209}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>","position":{"start":{"line":61,"column":1,"offset":2211},"end":{"line":66,"column":4,"offset":2302}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":68,"column":1,"offset":2304},"end":{"line":68,"column":5,"offset":2308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you’ve probably already guessed, ","position":{"start":{"line":70,"column":1,"offset":2310},"end":{"line":70,"column":37,"offset":2346}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":70,"column":37,"offset":2346},"end":{"line":70,"column":41,"offset":2350}}},{"type":"text","value":" is a function.\n","position":{"start":{"line":70,"column":41,"offset":2350},"end":{"line":71,"column":1,"offset":2366}}},{"type":"raw","value":"<br>","position":{"start":{"line":71,"column":1,"offset":2366},"end":{"line":71,"column":5,"offset":2370}}},{"type":"text","value":"\n","position":{"start":{"line":71,"column":5,"offset":2370},"end":{"line":72,"column":1,"offset":2371}}},{"type":"raw","value":"<br>","position":{"start":{"line":72,"column":1,"offset":2371},"end":{"line":72,"column":5,"offset":2375}}},{"type":"text","value":"\nThe first parameter is the test case for example if we input fly ","position":{"start":{"line":72,"column":5,"offset":2375},"end":{"line":73,"column":66,"offset":2441}}},{"type":"raw","value":"<code class=\"language-text\">(equal? (last wd) &#39;y)</code>","position":{"start":{"line":73,"column":66,"offset":2441},"end":{"line":73,"column":89,"offset":2464}}},{"type":"text","value":" would be true, because fly ends in y.\n","position":{"start":{"line":73,"column":89,"offset":2464},"end":{"line":74,"column":1,"offset":2503}}},{"type":"raw","value":"<br>","position":{"start":{"line":74,"column":1,"offset":2503},"end":{"line":74,"column":5,"offset":2507}}},{"type":"text","value":"\n","position":{"start":{"line":74,"column":5,"offset":2507},"end":{"line":75,"column":1,"offset":2508}}},{"type":"raw","value":"<br>","position":{"start":{"line":75,"column":1,"offset":2508},"end":{"line":75,"column":5,"offset":2512}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":75,"column":5,"offset":2512},"end":{"line":76,"column":21,"offset":2533}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":76,"column":21,"offset":2533},"end":{"line":76,"column":25,"offset":2537}}},{"type":"text","value":" takes in is the expression if the test case is true.\n","position":{"start":{"line":76,"column":25,"offset":2537},"end":{"line":77,"column":1,"offset":2591}}},{"type":"raw","value":"<br>","position":{"start":{"line":77,"column":1,"offset":2591},"end":{"line":77,"column":5,"offset":2595}}},{"type":"text","value":"\n","position":{"start":{"line":77,"column":5,"offset":2595},"end":{"line":78,"column":1,"offset":2596}}},{"type":"raw","value":"<br>","position":{"start":{"line":78,"column":1,"offset":2596},"end":{"line":78,"column":5,"offset":2600}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":78,"column":5,"offset":2600},"end":{"line":79,"column":21,"offset":2621}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":79,"column":21,"offset":2621},"end":{"line":79,"column":25,"offset":2625}}},{"type":"text","value":" takes in is the expression if the test case is false.\n","position":{"start":{"line":79,"column":25,"offset":2625},"end":{"line":80,"column":1,"offset":2680}}},{"type":"raw","value":"<br>","position":{"start":{"line":80,"column":1,"offset":2680},"end":{"line":80,"column":5,"offset":2684}}},{"type":"text","value":"\n","position":{"start":{"line":80,"column":5,"offset":2684},"end":{"line":81,"column":1,"offset":2685}}},{"type":"raw","value":"<br>","position":{"start":{"line":81,"column":1,"offset":2685},"end":{"line":81,"column":5,"offset":2689}}},{"type":"text","value":"\nAlso worth noting that names that return a boolean add a ","position":{"start":{"line":81,"column":5,"offset":2689},"end":{"line":82,"column":58,"offset":2747}}},{"type":"raw","value":"<code class=\"language-text\">?</code>","position":{"start":{"line":82,"column":58,"offset":2747},"end":{"line":82,"column":61,"offset":2750}}},{"type":"text","value":" to the end to show that the primitive returned is true or false. Like how equal is ","position":{"start":{"line":82,"column":61,"offset":2750},"end":{"line":82,"column":145,"offset":2834}}},{"type":"raw","value":"<code class=\"language-text\">equal?</code>","position":{"start":{"line":82,"column":145,"offset":2834},"end":{"line":82,"column":153,"offset":2842}}},{"type":"text","value":" in the code block above.","position":{"start":{"line":82,"column":153,"offset":2842},"end":{"line":82,"column":178,"offset":2867}}}],"position":{"start":{"line":70,"column":1,"offset":2310},"end":{"line":82,"column":178,"offset":2867}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"L02","position":{"start":{"line":84,"column":5,"offset":2873},"end":{"line":84,"column":8,"offset":2876}}}],"position":{"start":{"line":84,"column":1,"offset":2869},"end":{"line":84,"column":8,"offset":2876}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Recursion","position":{"start":{"line":86,"column":6,"offset":2883},"end":{"line":86,"column":15,"offset":2892}}}],"position":{"start":{"line":86,"column":1,"offset":2878},"end":{"line":86,"column":15,"offset":2892}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":88,"column":1,"offset":2894},"end":{"line":99,"column":4,"offset":3093}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":101,"column":1,"offset":3095},"end":{"line":101,"column":5,"offset":3099}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n","position":{"start":{"line":103,"column":1,"offset":3101},"end":{"line":104,"column":1,"offset":3317}}},{"type":"raw","value":"<br>","position":{"start":{"line":104,"column":1,"offset":3317},"end":{"line":104,"column":5,"offset":3321}}},{"type":"text","value":"\n","position":{"start":{"line":104,"column":5,"offset":3321},"end":{"line":105,"column":1,"offset":3322}}},{"type":"raw","value":"<br>","position":{"start":{"line":105,"column":1,"offset":3322},"end":{"line":105,"column":5,"offset":3326}}},{"type":"text","value":"\nNotice in the above example from lecture the function calls pigl until ","position":{"start":{"line":105,"column":5,"offset":3326},"end":{"line":106,"column":72,"offset":3398}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":106,"column":72,"offset":3398},"end":{"line":106,"column":81,"offset":3407}}},{"type":"text","value":" is equal to true.\n","position":{"start":{"line":106,"column":81,"offset":3407},"end":{"line":107,"column":1,"offset":3426}}},{"type":"raw","value":"<br>","position":{"start":{"line":107,"column":1,"offset":3426},"end":{"line":107,"column":5,"offset":3430}}},{"type":"text","value":"\n","position":{"start":{"line":107,"column":5,"offset":3430},"end":{"line":108,"column":1,"offset":3431}}},{"type":"raw","value":"<br>","position":{"start":{"line":108,"column":1,"offset":3431},"end":{"line":108,"column":5,"offset":3435}}},{"type":"text","value":"\nLets say ","position":{"start":{"line":108,"column":5,"offset":3435},"end":{"line":109,"column":10,"offset":3445}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":109,"column":10,"offset":3445},"end":{"line":109,"column":16,"offset":3451}}},{"type":"text","value":" gets called with ","position":{"start":{"line":109,"column":16,"offset":3451},"end":{"line":109,"column":34,"offset":3469}}},{"type":"raw","value":"<code class=\"language-text\">scheme</code>","position":{"start":{"line":109,"column":34,"offset":3469},"end":{"line":109,"column":42,"offset":3477}}},{"type":"text","value":".\nThe conditional checks ","position":{"start":{"line":109,"column":42,"offset":3477},"end":{"line":110,"column":24,"offset":3502}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":110,"column":24,"offset":3502},"end":{"line":110,"column":33,"offset":3511}}},{"type":"text","value":" which checks the first letter in the word to see if it is a vowel. Since ","position":{"start":{"line":110,"column":33,"offset":3511},"end":{"line":110,"column":107,"offset":3585}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":110,"column":107,"offset":3585},"end":{"line":110,"column":116,"offset":3594}}},{"type":"text","value":" is false because ","position":{"start":{"line":110,"column":116,"offset":3594},"end":{"line":110,"column":134,"offset":3612}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":110,"column":134,"offset":3612},"end":{"line":110,"column":137,"offset":3615}}},{"type":"text","value":" isn’t a vowel it calls ","position":{"start":{"line":110,"column":137,"offset":3615},"end":{"line":110,"column":161,"offset":3639}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":110,"column":161,"offset":3639},"end":{"line":110,"column":167,"offset":3645}}},{"type":"text","value":" again with the argument ","position":{"start":{"line":110,"column":167,"offset":3645},"end":{"line":110,"column":192,"offset":3670}}},{"type":"raw","value":"<code class=\"language-text\">chemes</code>","position":{"start":{"line":110,"column":192,"offset":3670},"end":{"line":110,"column":200,"offset":3678}}},{"type":"text","value":". This is because ","position":{"start":{"line":110,"column":200,"offset":3678},"end":{"line":110,"column":218,"offset":3696}}},{"type":"raw","value":"<code class=\"language-text\">word</code>","position":{"start":{"line":110,"column":218,"offset":3696},"end":{"line":110,"column":224,"offset":3702}}},{"type":"text","value":" takes the arguments ","position":{"start":{"line":110,"column":224,"offset":3702},"end":{"line":110,"column":245,"offset":3723}}},{"type":"raw","value":"<code class=\"language-text\">cheme</code>","position":{"start":{"line":110,"column":245,"offset":3723},"end":{"line":110,"column":252,"offset":3730}}},{"type":"text","value":" and ","position":{"start":{"line":110,"column":252,"offset":3730},"end":{"line":110,"column":257,"offset":3735}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":110,"column":257,"offset":3735},"end":{"line":110,"column":260,"offset":3738}}},{"type":"text","value":" and adds them together. ","position":{"start":{"line":110,"column":260,"offset":3738},"end":{"line":110,"column":285,"offset":3763}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":110,"column":285,"offset":3763},"end":{"line":110,"column":291,"offset":3769}}},{"type":"text","value":" gets called repeatedly until\nit is called with a vowel as the first letter. When the first letter is a vowel the expression ","position":{"start":{"line":110,"column":291,"offset":3769},"end":{"line":111,"column":96,"offset":3894}}},{"type":"raw","value":"<code class=\"language-text\">(word wd &#39;ay)</code>","position":{"start":{"line":111,"column":96,"offset":3894},"end":{"line":111,"column":111,"offset":3909}}},{"type":"text","value":" is ran and the result is a primitive which means the procedure stops.","position":{"start":{"line":111,"column":111,"offset":3909},"end":{"line":111,"column":181,"offset":3979}}}],"position":{"start":{"line":103,"column":1,"offset":3101},"end":{"line":111,"column":181,"offset":3979}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":113,"column":6,"offset":3986},"end":{"line":113,"column":17,"offset":3997}}}],"position":{"start":{"line":113,"column":1,"offset":3981},"end":{"line":113,"column":17,"offset":3997}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Big Picture:","position":{"start":{"line":115,"column":1,"offset":3999},"end":{"line":115,"column":13,"offset":4011}}}],"position":{"start":{"line":115,"column":1,"offset":3999},"end":{"line":115,"column":13,"offset":4011}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>","position":{"start":{"line":117,"column":1,"offset":4013},"end":{"line":132,"column":4,"offset":4428}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":134,"column":1,"offset":4430},"end":{"line":134,"column":5,"offset":4434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that can be referenced as a whole.","position":{"start":{"line":136,"column":1,"offset":4436},"end":{"line":136,"column":141,"offset":4576}}}],"position":{"start":{"line":136,"column":1,"offset":4436},"end":{"line":136,"column":141,"offset":4576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Functional Programming","position":{"start":{"line":138,"column":6,"offset":4583},"end":{"line":138,"column":28,"offset":4605}}}],"position":{"start":{"line":138,"column":1,"offset":4578},"end":{"line":138,"column":28,"offset":4605}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the introduction of multi-core processers, parallelism has helped functional programming make a comeback. If everything is a function you won’t run into race conditions created by dependencies.","position":{"start":{"line":140,"column":1,"offset":4607},"end":{"line":140,"column":199,"offset":4805}}}],"position":{"start":{"line":140,"column":1,"offset":4607},"end":{"line":140,"column":199,"offset":4805}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Function vs. Procedure","position":{"start":{"line":142,"column":6,"offset":4812},"end":{"line":142,"column":28,"offset":4834}}}],"position":{"start":{"line":142,"column":1,"offset":4807},"end":{"line":142,"column":28,"offset":4834}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Two functions are the same if they give the same output with given inputs.\n","position":{"start":{"line":144,"column":1,"offset":4836},"end":{"line":145,"column":1,"offset":4911}}},{"type":"raw","value":"<br>","position":{"start":{"line":145,"column":1,"offset":4911},"end":{"line":145,"column":5,"offset":4915}}},{"type":"text","value":"\n","position":{"start":{"line":145,"column":5,"offset":4915},"end":{"line":146,"column":1,"offset":4916}}},{"type":"raw","value":"<br>","position":{"start":{"line":146,"column":1,"offset":4916},"end":{"line":146,"column":5,"offset":4920}}},{"type":"text","value":"\nA procedure is a sequence of steps for computing a function.\n","position":{"start":{"line":146,"column":5,"offset":4920},"end":{"line":148,"column":1,"offset":4982}}},{"type":"raw","value":"<br>","position":{"start":{"line":148,"column":1,"offset":4982},"end":{"line":148,"column":5,"offset":4986}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":148,"column":5,"offset":4986},"end":{"line":149,"column":1,"offset":4989}}},{"type":"text","value":"\n"},{"type":"text","value":"Therefore ","position":{"start":{"line":149,"column":1,"offset":4989},"end":{"line":149,"column":11,"offset":4999}}},{"type":"raw","value":"<code class=\"language-text\">2x + 6</code>","position":{"start":{"line":149,"column":11,"offset":4999},"end":{"line":149,"column":19,"offset":5007}}},{"type":"text","value":" and ","position":{"start":{"line":149,"column":19,"offset":5007},"end":{"line":149,"column":24,"offset":5012}}},{"type":"raw","value":"<code class=\"language-text\">2(x + 3)</code>","position":{"start":{"line":149,"column":24,"offset":5012},"end":{"line":149,"column":34,"offset":5022}}},{"type":"text","value":" are the same function but different procedures.\n","position":{"start":{"line":149,"column":34,"offset":5022},"end":{"line":150,"column":1,"offset":5071}}},{"type":"raw","value":"<br>","position":{"start":{"line":150,"column":1,"offset":5071},"end":{"line":150,"column":5,"offset":5075}}}],"position":{"start":{"line":144,"column":1,"offset":4836},"end":{"line":150,"column":5,"offset":5075}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Cond","position":{"start":{"line":152,"column":6,"offset":5082},"end":{"line":152,"column":10,"offset":5086}}}],"position":{"start":{"line":152,"column":1,"offset":5077},"end":{"line":152,"column":10,"offset":5086}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (buzz n)\n    (cond ((equal? (remainder n 7) 0) &#39;buzz)\n    ((member? 7 n) &#39;buzz)\n    (else n)))</code></pre></div>","position":{"start":{"line":154,"column":1,"offset":5088},"end":{"line":159,"column":4,"offset":5198}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":161,"column":1,"offset":5200},"end":{"line":162,"column":5,"offset":5209}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":164,"column":1,"offset":5211},"end":{"line":164,"column":7,"offset":5217}}},{"type":"text","value":" allows for multiple test cases, and will return\nthe first clause that is true.\n","position":{"start":{"line":164,"column":7,"offset":5217},"end":{"line":166,"column":1,"offset":5297}}},{"type":"raw","value":"<br>","position":{"start":{"line":166,"column":1,"offset":5297},"end":{"line":166,"column":5,"offset":5301}}},{"type":"text","value":"\n","position":{"start":{"line":166,"column":5,"offset":5301},"end":{"line":167,"column":1,"offset":5302}}},{"type":"raw","value":"<br>","position":{"start":{"line":167,"column":1,"offset":5302},"end":{"line":167,"column":5,"offset":5306}}},{"type":"text","value":"\nLets try ","position":{"start":{"line":167,"column":5,"offset":5306},"end":{"line":168,"column":10,"offset":5316}}},{"type":"raw","value":"<code class=\"language-text\">14</code>","position":{"start":{"line":168,"column":10,"offset":5316},"end":{"line":168,"column":14,"offset":5320}}},{"type":"text","value":". Since ","position":{"start":{"line":168,"column":14,"offset":5320},"end":{"line":168,"column":22,"offset":5328}}},{"type":"raw","value":"<code class=\"language-text\">14 / 7</code>","position":{"start":{"line":168,"column":22,"offset":5328},"end":{"line":168,"column":30,"offset":5336}}},{"type":"text","value":" has a remainder of ","position":{"start":{"line":168,"column":30,"offset":5336},"end":{"line":168,"column":50,"offset":5356}}},{"type":"raw","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":168,"column":50,"offset":5356},"end":{"line":168,"column":53,"offset":5359}}},{"type":"text","value":" the first clause is met and returns ","position":{"start":{"line":168,"column":53,"offset":5359},"end":{"line":168,"column":90,"offset":5396}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":168,"column":90,"offset":5396},"end":{"line":168,"column":96,"offset":5402}}},{"type":"text","value":".\n","position":{"start":{"line":168,"column":96,"offset":5402},"end":{"line":169,"column":1,"offset":5404}}},{"type":"raw","value":"<br>","position":{"start":{"line":169,"column":1,"offset":5404},"end":{"line":169,"column":5,"offset":5408}}},{"type":"text","value":"\n","position":{"start":{"line":169,"column":5,"offset":5408},"end":{"line":170,"column":1,"offset":5409}}},{"type":"raw","value":"<br>","position":{"start":{"line":170,"column":1,"offset":5409},"end":{"line":170,"column":5,"offset":5413}}},{"type":"text","value":"\nNow Lets try ","position":{"start":{"line":170,"column":5,"offset":5413},"end":{"line":171,"column":14,"offset":5427}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":171,"column":14,"offset":5427},"end":{"line":171,"column":18,"offset":5431}}},{"type":"text","value":". The first clause is not met, and therefore goes onto the next clause. ","position":{"start":{"line":171,"column":18,"offset":5431},"end":{"line":171,"column":90,"offset":5503}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":171,"column":90,"offset":5503},"end":{"line":171,"column":94,"offset":5507}}},{"type":"text","value":" does have a 7 inside of it so ","position":{"start":{"line":171,"column":94,"offset":5507},"end":{"line":171,"column":125,"offset":5538}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":171,"column":125,"offset":5538},"end":{"line":171,"column":131,"offset":5544}}},{"type":"text","value":" is returned.\n","position":{"start":{"line":171,"column":131,"offset":5544},"end":{"line":172,"column":1,"offset":5558}}},{"type":"raw","value":"<br>","position":{"start":{"line":172,"column":1,"offset":5558},"end":{"line":172,"column":5,"offset":5562}}},{"type":"text","value":"\n","position":{"start":{"line":172,"column":5,"offset":5562},"end":{"line":173,"column":1,"offset":5563}}},{"type":"raw","value":"<br>","position":{"start":{"line":173,"column":1,"offset":5563},"end":{"line":173,"column":5,"offset":5567}}},{"type":"text","value":"\nNow lets try ","position":{"start":{"line":173,"column":5,"offset":5567},"end":{"line":174,"column":14,"offset":5581}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":174,"column":14,"offset":5581},"end":{"line":174,"column":18,"offset":5585}}},{"type":"text","value":". The remainder is ","position":{"start":{"line":174,"column":18,"offset":5585},"end":{"line":174,"column":37,"offset":5604}}},{"type":"raw","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":174,"column":37,"offset":5604},"end":{"line":174,"column":40,"offset":5607}}},{"type":"text","value":" so the first clause is not met, and ","position":{"start":{"line":174,"column":40,"offset":5607},"end":{"line":174,"column":77,"offset":5644}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":174,"column":77,"offset":5644},"end":{"line":174,"column":81,"offset":5648}}},{"type":"text","value":" does not have a ","position":{"start":{"line":174,"column":81,"offset":5648},"end":{"line":174,"column":98,"offset":5665}}},{"type":"raw","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":174,"column":98,"offset":5665},"end":{"line":174,"column":101,"offset":5668}}},{"type":"text","value":" inside of it so the catch all ","position":{"start":{"line":174,"column":101,"offset":5668},"end":{"line":174,"column":132,"offset":5699}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":174,"column":132,"offset":5699},"end":{"line":174,"column":138,"offset":5705}}},{"type":"text","value":" keyword returns the number ","position":{"start":{"line":174,"column":138,"offset":5705},"end":{"line":174,"column":166,"offset":5733}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":174,"column":166,"offset":5733},"end":{"line":174,"column":170,"offset":5737}}},{"type":"text","value":".\n","position":{"start":{"line":174,"column":170,"offset":5737},"end":{"line":175,"column":1,"offset":5739}}},{"type":"raw","value":"<br>","position":{"start":{"line":175,"column":1,"offset":5739},"end":{"line":175,"column":5,"offset":5743}}},{"type":"text","value":"\n","position":{"start":{"line":175,"column":5,"offset":5743},"end":{"line":176,"column":1,"offset":5744}}},{"type":"raw","value":"<br>","position":{"start":{"line":176,"column":1,"offset":5744},"end":{"line":176,"column":5,"offset":5748}}},{"type":"text","value":"\nImportant to note:\n","position":{"start":{"line":176,"column":5,"offset":5748},"end":{"line":178,"column":1,"offset":5768}}},{"type":"raw","value":"<br>","position":{"start":{"line":178,"column":1,"offset":5768},"end":{"line":178,"column":5,"offset":5772}}},{"type":"text","value":"\nIf a ","position":{"start":{"line":178,"column":5,"offset":5772},"end":{"line":179,"column":6,"offset":5778}}},{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":179,"column":6,"offset":5778},"end":{"line":179,"column":12,"offset":5784}}},{"type":"text","value":" does not have an ","position":{"start":{"line":179,"column":12,"offset":5784},"end":{"line":179,"column":30,"offset":5802}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":179,"column":30,"offset":5802},"end":{"line":179,"column":36,"offset":5808}}},{"type":"text","value":" statement it will return ","position":{"start":{"line":179,"column":36,"offset":5808},"end":{"line":179,"column":62,"offset":5834}}},{"type":"raw","value":"<code class=\"language-text\">unspecified</code>","position":{"start":{"line":179,"column":62,"offset":5834},"end":{"line":179,"column":75,"offset":5847}}},{"type":"text","value":", which can be different depending on interpreted, so always have an else statement.","position":{"start":{"line":179,"column":75,"offset":5847},"end":{"line":179,"column":159,"offset":5931}}}],"position":{"start":{"line":164,"column":1,"offset":5211},"end":{"line":179,"column":159,"offset":5931}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Applicative Order vs Normal Order","position":{"start":{"line":181,"column":6,"offset":5938},"end":{"line":181,"column":39,"offset":5971}}}],"position":{"start":{"line":181,"column":1,"offset":5933},"end":{"line":181,"column":39,"offset":5971}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (f a b) (+ (g a) b))\n(def (g x) (* 3 x))\n\n(f (+ 2 3) (- 15 6))</code></pre></div>","position":{"start":{"line":183,"column":1,"offset":5973},"end":{"line":188,"column":4,"offset":6048}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Applicative Order:\n","position":{"start":{"line":190,"column":1,"offset":6050},"end":{"line":191,"column":1,"offset":6069}}},{"type":"raw","value":"<br>","position":{"start":{"line":191,"column":1,"offset":6069},"end":{"line":191,"column":5,"offset":6073}}},{"type":"text","value":"\nevaluates the sub expressions until they are primitive values, then passes the primitive results back up to the parent function.\n","position":{"start":{"line":191,"column":5,"offset":6073},"end":{"line":193,"column":1,"offset":6203}}},{"type":"raw","value":"<br>","position":{"start":{"line":193,"column":1,"offset":6203},"end":{"line":193,"column":5,"offset":6207}}},{"type":"text","value":"\n","position":{"start":{"line":193,"column":5,"offset":6207},"end":{"line":194,"column":1,"offset":6208}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":194,"column":1,"offset":6208},"end":{"line":194,"column":23,"offset":6230}}},{"type":"text","value":"\n","position":{"start":{"line":194,"column":23,"offset":6230},"end":{"line":195,"column":1,"offset":6231}}},{"type":"raw","value":"<br>","position":{"start":{"line":195,"column":1,"offset":6231},"end":{"line":195,"column":5,"offset":6235}}},{"type":"text","value":"\n","position":{"start":{"line":195,"column":5,"offset":6235},"end":{"line":196,"column":1,"offset":6236}}},{"type":"raw","value":"<code class=\"language-text\">2 + 3</code>","position":{"start":{"line":196,"column":1,"offset":6236},"end":{"line":196,"column":8,"offset":6243}}},{"type":"text","value":" and ","position":{"start":{"line":196,"column":8,"offset":6243},"end":{"line":196,"column":13,"offset":6248}}},{"type":"raw","value":"<code class=\"language-text\">15 - 6</code>","position":{"start":{"line":196,"column":13,"offset":6248},"end":{"line":196,"column":21,"offset":6256}}},{"type":"text","value":" will be evaluated before the outside ","position":{"start":{"line":196,"column":21,"offset":6256},"end":{"line":196,"column":59,"offset":6294}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":196,"column":59,"offset":6294},"end":{"line":196,"column":62,"offset":6297}}},{"type":"text","value":" is evaluated. Then ","position":{"start":{"line":196,"column":62,"offset":6297},"end":{"line":196,"column":82,"offset":6317}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":196,"column":82,"offset":6317},"end":{"line":196,"column":85,"offset":6320}}},{"type":"text","value":" will be called with ","position":{"start":{"line":196,"column":85,"offset":6320},"end":{"line":196,"column":106,"offset":6341}}},{"type":"raw","value":"<code class=\"language-text\">(f 5 9)</code>","position":{"start":{"line":196,"column":106,"offset":6341},"end":{"line":196,"column":115,"offset":6350}}},{"type":"text","value":".\n","position":{"start":{"line":196,"column":115,"offset":6350},"end":{"line":197,"column":1,"offset":6352}}},{"type":"raw","value":"<br>","position":{"start":{"line":197,"column":1,"offset":6352},"end":{"line":197,"column":5,"offset":6356}}},{"type":"text","value":"\nNormal Order:\n","position":{"start":{"line":197,"column":5,"offset":6356},"end":{"line":199,"column":1,"offset":6371}}},{"type":"raw","value":"<br>","position":{"start":{"line":199,"column":1,"offset":6371},"end":{"line":199,"column":5,"offset":6375}}},{"type":"text","value":"\nevaluates the outsides first, but instead of passing primitive values it passes the expressions.\n","position":{"start":{"line":199,"column":5,"offset":6375},"end":{"line":201,"column":1,"offset":6473}}},{"type":"raw","value":"<br>","position":{"start":{"line":201,"column":1,"offset":6473},"end":{"line":201,"column":5,"offset":6477}}},{"type":"text","value":"\n","position":{"start":{"line":201,"column":5,"offset":6477},"end":{"line":202,"column":1,"offset":6478}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":202,"column":1,"offset":6478},"end":{"line":202,"column":23,"offset":6500}}},{"type":"text","value":" turns into ","position":{"start":{"line":202,"column":23,"offset":6500},"end":{"line":202,"column":35,"offset":6512}}},{"type":"raw","value":"<code class=\"language-text\">(+ (g (+ 2 3)) (- 15 6))</code>","position":{"start":{"line":202,"column":35,"offset":6512},"end":{"line":202,"column":61,"offset":6538}}},{"type":"text","value":"\n","position":{"start":{"line":202,"column":61,"offset":6538},"end":{"line":203,"column":1,"offset":6539}}},{"type":"raw","value":"<br>","position":{"start":{"line":203,"column":1,"offset":6539},"end":{"line":203,"column":5,"offset":6543}}},{"type":"text","value":"\nNow ","position":{"start":{"line":203,"column":5,"offset":6543},"end":{"line":204,"column":5,"offset":6548}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":204,"column":5,"offset":6548},"end":{"line":204,"column":8,"offset":6551}}},{"type":"text","value":" is done and the next expression can be evaluated.","position":{"start":{"line":204,"column":8,"offset":6551},"end":{"line":204,"column":58,"offset":6601}}}],"position":{"start":{"line":190,"column":1,"offset":6050},"end":{"line":204,"column":58,"offset":6601}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Possible Problem:\n","position":{"start":{"line":206,"column":1,"offset":6603},"end":{"line":207,"column":1,"offset":6621}}},{"type":"raw","value":"<br>","position":{"start":{"line":207,"column":1,"offset":6621},"end":{"line":207,"column":5,"offset":6625}}}],"position":{"start":{"line":206,"column":1,"offset":6603},"end":{"line":207,"column":5,"offset":6625}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (zero z) (- x x))</code></pre></div>","position":{"start":{"line":209,"column":1,"offset":6627},"end":{"line":211,"column":4,"offset":6657}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"applicative","position":{"start":{"line":213,"column":1,"offset":6659},"end":{"line":213,"column":12,"offset":6670}}}],"position":{"start":{"line":213,"column":1,"offset":6659},"end":{"line":213,"column":12,"offset":6670}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(random 10) ==&gt; 8\n(zero 8) ---&gt;\n(- 8 8) ==&gt; 0\n0</code></pre></div>","position":{"start":{"line":215,"column":1,"offset":6672},"end":{"line":221,"column":4,"offset":6751}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"normal","position":{"start":{"line":223,"column":1,"offset":6753},"end":{"line":223,"column":7,"offset":6759}}}],"position":{"start":{"line":223,"column":1,"offset":6753},"end":{"line":223,"column":7,"offset":6759}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(+ (random 10) (random 10)) ==&gt;\n    (random 10) ==&gt; 8\n    (random 10) ==&gt; 1\n(- 8 1) ==&gt; 7\n7</code></pre></div>","position":{"start":{"line":225,"column":1,"offset":6761},"end":{"line":232,"column":4,"offset":6884}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":234,"column":1,"offset":6886},"end":{"line":235,"column":5,"offset":6895}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the ","position":{"start":{"line":237,"column":1,"offset":6897},"end":{"line":237,"column":11,"offset":6907}}},{"type":"raw","value":"<code class=\"language-text\">(random 10)</code>","position":{"start":{"line":237,"column":11,"offset":6907},"end":{"line":237,"column":24,"offset":6920}}},{"type":"text","value":" is split into 2 different function alls in normal order you get different results.","position":{"start":{"line":237,"column":24,"offset":6920},"end":{"line":237,"column":107,"offset":7003}}}],"position":{"start":{"line":237,"column":1,"offset":6897},"end":{"line":237,"column":107,"offset":7003}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"L03","position":{"start":{"line":239,"column":5,"offset":7009},"end":{"line":239,"column":8,"offset":7012}}}],"position":{"start":{"line":239,"column":1,"offset":7005},"end":{"line":239,"column":8,"offset":7012}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Data vs Procedures","position":{"start":{"line":241,"column":6,"offset":7019},"end":{"line":241,"column":24,"offset":7037}}}],"position":{"start":{"line":241,"column":1,"offset":7014},"end":{"line":241,"column":24,"offset":7037}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Data is like a noun. Procedures are like verbs.\n","position":{"start":{"line":243,"column":1,"offset":7039},"end":{"line":244,"column":1,"offset":7087}}},{"type":"raw","value":"<br>","position":{"start":{"line":244,"column":1,"offset":7087},"end":{"line":244,"column":5,"offset":7091}}},{"type":"text","value":"\n","position":{"start":{"line":244,"column":5,"offset":7091},"end":{"line":245,"column":1,"offset":7092}}},{"type":"raw","value":"<br>","position":{"start":{"line":245,"column":1,"offset":7092},"end":{"line":245,"column":5,"offset":7096}}},{"type":"text","value":"\nCapitalization does not matter in scheme.\nAble to take in functions as arguments.\n","position":{"start":{"line":245,"column":5,"offset":7096},"end":{"line":248,"column":1,"offset":7179}}},{"type":"raw","value":"<code class=\"language-text\">se</code>","position":{"start":{"line":248,"column":1,"offset":7179},"end":{"line":248,"column":5,"offset":7183}}},{"type":"text","value":" is the function for creating sentences.","position":{"start":{"line":248,"column":5,"offset":7183},"end":{"line":248,"column":45,"offset":7223}}}],"position":{"start":{"line":243,"column":1,"offset":7039},"end":{"line":248,"column":45,"offset":7223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Lambda","position":{"start":{"line":250,"column":6,"offset":7230},"end":{"line":250,"column":12,"offset":7236}}}],"position":{"start":{"line":250,"column":1,"offset":7225},"end":{"line":250,"column":12,"offset":7236}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The thing that makes a function.\nA thing that creates and can call a function without having to be named.\n","position":{"start":{"line":252,"column":1,"offset":7238},"end":{"line":254,"column":1,"offset":7344}}},{"type":"raw","value":"<br>","position":{"start":{"line":254,"column":1,"offset":7344},"end":{"line":254,"column":5,"offset":7348}}},{"type":"text","value":"\n","position":{"start":{"line":254,"column":5,"offset":7348},"end":{"line":255,"column":1,"offset":7349}}},{"type":"raw","value":"<br>","position":{"start":{"line":255,"column":1,"offset":7349},"end":{"line":255,"column":5,"offset":7353}}},{"type":"text","value":"\nPRED: short for predicate, predicate is a function whose range is a boolean (true or false).\nEvery procedure has a lambda hidden inside of it.","position":{"start":{"line":255,"column":5,"offset":7353},"end":{"line":257,"column":50,"offset":7496}}}],"position":{"start":{"line":252,"column":1,"offset":7238},"end":{"line":257,"column":50,"offset":7496}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"L04","position":{"start":{"line":259,"column":5,"offset":7502},"end":{"line":259,"column":8,"offset":7505}}}],"position":{"start":{"line":259,"column":1,"offset":7498},"end":{"line":259,"column":8,"offset":7505}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using lambdas for control using procedures as data.\nKeep decides whether to keep data or not.","position":{"start":{"line":261,"column":1,"offset":7507},"end":{"line":262,"column":42,"offset":7600}}}],"position":{"start":{"line":261,"column":1,"offset":7507},"end":{"line":262,"column":42,"offset":7600}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"first class datatype","position":{"start":{"line":264,"column":6,"offset":7607},"end":{"line":264,"column":26,"offset":7627}}}],"position":{"start":{"line":264,"column":1,"offset":7602},"end":{"line":264,"column":26,"offset":7627}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Rule of Thumb:\n","position":{"start":{"line":266,"column":1,"offset":7629},"end":{"line":267,"column":1,"offset":7644}}},{"type":"raw","value":"<br>","position":{"start":{"line":267,"column":1,"offset":7644},"end":{"line":267,"column":5,"offset":7648}}},{"type":"text","value":"\nThey can be stored as a variable.\n","position":{"start":{"line":267,"column":5,"offset":7648},"end":{"line":269,"column":1,"offset":7683}}},{"type":"raw","value":"<br>","position":{"start":{"line":269,"column":1,"offset":7683},"end":{"line":269,"column":5,"offset":7687}}},{"type":"text","value":"\nThey can be stored inside a data type like a list.\n","position":{"start":{"line":269,"column":5,"offset":7687},"end":{"line":271,"column":1,"offset":7739}}},{"type":"raw","value":"<br>","position":{"start":{"line":271,"column":1,"offset":7739},"end":{"line":271,"column":5,"offset":7743}}},{"type":"text","value":"\nYou can return function to make other functions.\n","position":{"start":{"line":271,"column":5,"offset":7743},"end":{"line":273,"column":1,"offset":7793}}},{"type":"raw","value":"<br>","position":{"start":{"line":273,"column":1,"offset":7793},"end":{"line":273,"column":5,"offset":7797}}},{"type":"text","value":"\n","position":{"start":{"line":273,"column":5,"offset":7797},"end":{"line":274,"column":1,"offset":7798}}},{"type":"raw","value":"<code class=\"language-text\">(let bindings body)</code>","position":{"start":{"line":274,"column":1,"offset":7798},"end":{"line":274,"column":22,"offset":7819}}},{"type":"text","value":"\nBinding is a name: value expression.","position":{"start":{"line":274,"column":22,"offset":7819},"end":{"line":275,"column":37,"offset":7856}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":275,"column":37,"offset":7856},"end":{"line":276,"column":1,"offset":7859}}},{"type":"text","value":"\n"},{"type":"text","value":"Bindings can’t reference eachother during declaration because of applicative order.\n","position":{"start":{"line":276,"column":1,"offset":7859},"end":{"line":277,"column":1,"offset":7943}}},{"type":"raw","value":"<br>","position":{"start":{"line":277,"column":1,"offset":7943},"end":{"line":277,"column":5,"offset":7947}}},{"type":"text","value":"\n","position":{"start":{"line":277,"column":5,"offset":7947},"end":{"line":278,"column":1,"offset":7948}}},{"type":"raw","value":"<code class=\"language-text\">let*</code>","position":{"start":{"line":278,"column":1,"offset":7948},"end":{"line":278,"column":7,"offset":7954}}},{"type":"text","value":" allows you to reference other bindings during declaration by nesting the ","position":{"start":{"line":278,"column":7,"offset":7954},"end":{"line":278,"column":81,"offset":8028}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":278,"column":81,"offset":8028},"end":{"line":278,"column":86,"offset":8033}}},{"type":"text","value":"s.\n","position":{"start":{"line":278,"column":86,"offset":8033},"end":{"line":279,"column":1,"offset":8036}}},{"type":"raw","value":"<br>","position":{"start":{"line":279,"column":1,"offset":8036},"end":{"line":279,"column":5,"offset":8040}}},{"type":"text","value":"\nWant to keep as many variables local as possible.","position":{"start":{"line":279,"column":5,"offset":8040},"end":{"line":280,"column":50,"offset":8090}}}],"position":{"start":{"line":266,"column":1,"offset":7629},"end":{"line":280,"column":50,"offset":8090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"LABS","position":{"start":{"line":282,"column":4,"offset":8095},"end":{"line":282,"column":8,"offset":8099}}}],"position":{"start":{"line":282,"column":1,"offset":8092},"end":{"line":282,"column":8,"offset":8099}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Lab 1A","position":{"start":{"line":284,"column":5,"offset":8105},"end":{"line":284,"column":11,"offset":8111}}}],"position":{"start":{"line":284,"column":1,"offset":8101},"end":{"line":284,"column":11,"offset":8111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first problem for the lab was to modify the ","position":{"start":{"line":286,"column":1,"offset":8113},"end":{"line":286,"column":49,"offset":8161}}},{"type":"raw","value":"<code class=\"language-text\">plural</code>","position":{"start":{"line":286,"column":49,"offset":8161},"end":{"line":286,"column":57,"offset":8169}}},{"type":"text","value":" program to handle a word ending in y, but has a vowel in front of it (boy).","position":{"start":{"line":286,"column":57,"offset":8169},"end":{"line":286,"column":133,"offset":8245}}}],"position":{"start":{"line":286,"column":1,"offset":8113},"end":{"line":286,"column":133,"offset":8245}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t\t(if (vowel? (last (bl wd)))\n\t\t(word wd &#39;s)\n\t\t(word (bl wd) &#39;ies))\n\t(word wd &#39;s)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":288,"column":1,"offset":8247},"end":{"line":298,"column":4,"offset":8442}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":300,"column":1,"offset":8444},"end":{"line":300,"column":5,"offset":8448}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I handled this by adding a conditional that checks for the second to last letter.\n","position":{"start":{"line":302,"column":1,"offset":8450},"end":{"line":303,"column":1,"offset":8532}}},{"type":"raw","value":"<br>","position":{"start":{"line":303,"column":1,"offset":8532},"end":{"line":303,"column":5,"offset":8536}}},{"type":"text","value":"\n","position":{"start":{"line":303,"column":5,"offset":8536},"end":{"line":304,"column":1,"offset":8537}}},{"type":"raw","value":"<br>","position":{"start":{"line":304,"column":1,"offset":8537},"end":{"line":304,"column":5,"offset":8541}}},{"type":"text","value":"\nThe second assgnment was:","position":{"start":{"line":304,"column":5,"offset":8541},"end":{"line":305,"column":26,"offset":8567}}}],"position":{"start":{"line":302,"column":1,"offset":8450},"end":{"line":305,"column":26,"offset":8567}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Define a procedure that takes three numbers as arguments and returns the sum of\nthe squares of the two larger numbers.</code></pre></div>","position":{"start":{"line":307,"column":1,"offset":8569},"end":{"line":310,"column":4,"offset":8695}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My Solution:","position":{"start":{"line":312,"column":1,"offset":8697},"end":{"line":312,"column":13,"offset":8709}}}],"position":{"start":{"line":312,"column":1,"offset":8697},"end":{"line":312,"column":13,"offset":8709}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (twoLargerSums a b c)\n    (if (&gt;= a b)\n        (if (&gt;= b c)\n            (+ (square a) (square b))\n            (+ (square a) (square c)))\n        (if (&gt;= a c)\n            (+ (square a) (square b))\n            (+ (square b) (square c))))\n)\n\n(define (square x)\n(* x x))</code></pre></div>","position":{"start":{"line":314,"column":1,"offset":8711},"end":{"line":327,"column":4,"offset":8993}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":329,"column":1,"offset":8995},"end":{"line":330,"column":5,"offset":9004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Lab 1B","position":{"start":{"line":332,"column":6,"offset":9011},"end":{"line":332,"column":12,"offset":9017}}}],"position":{"start":{"line":332,"column":1,"offset":9006},"end":{"line":332,"column":12,"offset":9017}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Solution for #3 on lab:\n","position":{"start":{"line":334,"column":1,"offset":9019},"end":{"line":335,"column":1,"offset":9043}}},{"type":"raw","value":"<br>","position":{"start":{"line":335,"column":1,"offset":9043},"end":{"line":335,"column":5,"offset":9047}}}],"position":{"start":{"line":334,"column":1,"offset":9019},"end":{"line":335,"column":5,"offset":9047}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (substitute sent old new)\n    (if (equal? sent &#39;())\n        &#39;()\n        (se (replace (first sent) old new) (substitute (bf sent) old new))))\n\n(define (replace wd old new)\n    (if (equal? wd old)\n        new\n        wd)\n)</code></pre></div>","position":{"start":{"line":337,"column":1,"offset":9049},"end":{"line":348,"column":4,"offset":9285}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":350,"column":1,"offset":9287},"end":{"line":351,"column":5,"offset":9296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note to self, don’t copy and paste function calls to check if your code is right because there might be special characters in there :P.\n","position":{"start":{"line":353,"column":1,"offset":9298},"end":{"line":354,"column":1,"offset":9434}}},{"type":"raw","value":"<br>","position":{"start":{"line":354,"column":1,"offset":9434},"end":{"line":354,"column":5,"offset":9438}}},{"type":"text","value":"\n","position":{"start":{"line":354,"column":5,"offset":9438},"end":{"line":355,"column":1,"offset":9439}}},{"type":"raw","value":"<br>","position":{"start":{"line":355,"column":1,"offset":9439},"end":{"line":355,"column":5,"offset":9443}}},{"type":"text","value":"\nThe replace function here takes in the current word and checks to see if the word should be replaced, then it returns what the word should be.\nSubstitute is a recursive function that iterates the sentence and returns the sentence with the replacements.","position":{"start":{"line":355,"column":5,"offset":9443},"end":{"line":357,"column":110,"offset":9696}}}],"position":{"start":{"line":353,"column":1,"offset":9298},"end":{"line":357,"column":110,"offset":9696}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"READINGS","position":{"start":{"line":359,"column":4,"offset":9701},"end":{"line":359,"column":12,"offset":9709}}}],"position":{"start":{"line":359,"column":1,"offset":9698},"end":{"line":359,"column":12,"offset":9709}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"1.1 The Elements of Programming","position":{"start":{"line":361,"column":5,"offset":9715},"end":{"line":361,"column":36,"offset":9746}}}],"position":{"start":{"line":361,"column":1,"offset":9711},"end":{"line":361,"column":36,"offset":9746}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The section starts off saying that there are 3 mechanisms that languages utilize to simplify complex ideas:\n","position":{"start":{"line":363,"column":1,"offset":9748},"end":{"line":364,"column":1,"offset":9856}}},{"type":"raw","value":"<br>","position":{"start":{"line":364,"column":1,"offset":9856},"end":{"line":364,"column":5,"offset":9860}}},{"type":"text","value":"\nprimitive expressions: simplest entities within a language.\n","position":{"start":{"line":364,"column":5,"offset":9860},"end":{"line":366,"column":1,"offset":9921}}},{"type":"raw","value":"<br>","position":{"start":{"line":366,"column":1,"offset":9921},"end":{"line":366,"column":5,"offset":9925}}},{"type":"text","value":"\n","position":{"start":{"line":366,"column":5,"offset":9925},"end":{"line":367,"column":1,"offset":9926}}},{"type":"raw","value":"<br>","position":{"start":{"line":367,"column":1,"offset":9926},"end":{"line":367,"column":5,"offset":9930}}},{"type":"text","value":"\nmeans of combination: The ability to combine simple entities.\n","position":{"start":{"line":367,"column":5,"offset":9930},"end":{"line":369,"column":1,"offset":9993}}},{"type":"raw","value":"<br>","position":{"start":{"line":369,"column":1,"offset":9993},"end":{"line":369,"column":5,"offset":9997}}},{"type":"text","value":"\n","position":{"start":{"line":369,"column":5,"offset":9997},"end":{"line":370,"column":1,"offset":9998}}},{"type":"raw","value":"<br>","position":{"start":{"line":370,"column":1,"offset":9998},"end":{"line":370,"column":5,"offset":10002}}},{"type":"text","value":"\nmeans of abstraction: The ability to name and manipulate combined elements.\n","position":{"start":{"line":370,"column":5,"offset":10002},"end":{"line":372,"column":1,"offset":10079}}},{"type":"raw","value":"<br>","position":{"start":{"line":372,"column":1,"offset":10079},"end":{"line":372,"column":5,"offset":10083}}},{"type":"text","value":"\n","position":{"start":{"line":372,"column":5,"offset":10083},"end":{"line":373,"column":1,"offset":10084}}},{"type":"raw","value":"<br>","position":{"start":{"line":373,"column":1,"offset":10084},"end":{"line":373,"column":5,"offset":10088}}},{"type":"text","value":"\nBreaking down a compound expression:\n","position":{"start":{"line":373,"column":5,"offset":10088},"end":{"line":375,"column":1,"offset":10126}}},{"type":"raw","value":"<br>","position":{"start":{"line":375,"column":1,"offset":10126},"end":{"line":375,"column":5,"offset":10130}}},{"type":"text","value":"\ncombination: ","position":{"start":{"line":375,"column":5,"offset":10130},"end":{"line":376,"column":14,"offset":10144}}},{"type":"raw","value":"<code class=\"language-text\">(+ 137 349)</code>","position":{"start":{"line":376,"column":14,"offset":10144},"end":{"line":376,"column":27,"offset":10157}}},{"type":"text","value":"\n","position":{"start":{"line":376,"column":27,"offset":10157},"end":{"line":377,"column":1,"offset":10158}}},{"type":"raw","value":"<br>","position":{"start":{"line":377,"column":1,"offset":10158},"end":{"line":377,"column":5,"offset":10162}}},{"type":"text","value":"\noperator: ","position":{"start":{"line":377,"column":5,"offset":10162},"end":{"line":378,"column":11,"offset":10173}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":378,"column":11,"offset":10173},"end":{"line":378,"column":14,"offset":10176}}},{"type":"text","value":"\n","position":{"start":{"line":378,"column":14,"offset":10176},"end":{"line":379,"column":1,"offset":10177}}},{"type":"raw","value":"<br>","position":{"start":{"line":379,"column":1,"offset":10177},"end":{"line":379,"column":5,"offset":10181}}},{"type":"text","value":"\noperands: ","position":{"start":{"line":379,"column":5,"offset":10181},"end":{"line":380,"column":11,"offset":10192}}},{"type":"raw","value":"<code class=\"language-text\">137</code>","position":{"start":{"line":380,"column":11,"offset":10192},"end":{"line":380,"column":16,"offset":10197}}},{"type":"text","value":" ","position":{"start":{"line":380,"column":16,"offset":10197},"end":{"line":380,"column":17,"offset":10198}}},{"type":"raw","value":"<code class=\"language-text\">349</code>","position":{"start":{"line":380,"column":17,"offset":10198},"end":{"line":380,"column":22,"offset":10203}}},{"type":"text","value":"\n","position":{"start":{"line":380,"column":22,"offset":10203},"end":{"line":381,"column":1,"offset":10204}}},{"type":"raw","value":"<br>","position":{"start":{"line":381,"column":1,"offset":10204},"end":{"line":381,"column":5,"offset":10208}}},{"type":"text","value":"\n","position":{"start":{"line":381,"column":5,"offset":10208},"end":{"line":382,"column":1,"offset":10209}}},{"type":"raw","value":"<br>","position":{"start":{"line":382,"column":1,"offset":10209},"end":{"line":382,"column":5,"offset":10213}}},{"type":"text","value":"\nThe interpreter runs in a “read-eval-print” loop. That is why it is not necessary to print stuff out like in other languages.\n","position":{"start":{"line":382,"column":5,"offset":10213},"end":{"line":384,"column":1,"offset":10340}}},{"type":"raw","value":"<br>","position":{"start":{"line":384,"column":1,"offset":10340},"end":{"line":384,"column":5,"offset":10344}}},{"type":"text","value":"\n","position":{"start":{"line":384,"column":5,"offset":10344},"end":{"line":385,"column":1,"offset":10345}}},{"type":"raw","value":"<br>","position":{"start":{"line":385,"column":1,"offset":10345},"end":{"line":385,"column":5,"offset":10349}}},{"type":"text","value":"\nEnvironment: The name-object pairs the interpreter keeps in memory.\n","position":{"start":{"line":385,"column":5,"offset":10349},"end":{"line":387,"column":1,"offset":10418}}},{"type":"raw","value":"<br>","position":{"start":{"line":387,"column":1,"offset":10418},"end":{"line":387,"column":5,"offset":10422}}},{"type":"text","value":"\n","position":{"start":{"line":387,"column":5,"offset":10422},"end":{"line":388,"column":1,"offset":10423}}},{"type":"raw","value":"<br>","position":{"start":{"line":388,"column":1,"offset":10423},"end":{"line":388,"column":5,"offset":10427}}}],"position":{"start":{"line":363,"column":1,"offset":9748},"end":{"line":388,"column":5,"offset":10427}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedures can be used to build on top of other Compound Procedures:\n","position":{"start":{"line":390,"column":1,"offset":10429},"end":{"line":391,"column":1,"offset":10507}}},{"type":"raw","value":"<br>","position":{"start":{"line":391,"column":1,"offset":10507},"end":{"line":391,"column":5,"offset":10511}}}],"position":{"start":{"line":390,"column":1,"offset":10429},"end":{"line":391,"column":5,"offset":10511}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (sum-of-squares x y)\n(+ (square x) (square y))</code></pre></div>","position":{"start":{"line":393,"column":1,"offset":10513},"end":{"line":396,"column":4,"offset":10575}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":398,"column":1,"offset":10577},"end":{"line":398,"column":5,"offset":10581}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedure: procedure that you make out of other procedures.","position":{"start":{"line":400,"column":1,"offset":10583},"end":{"line":400,"column":69,"offset":10651}}}],"position":{"start":{"line":400,"column":1,"offset":10583},"end":{"line":400,"column":69,"offset":10651}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Primitive Procedure: procedure built into the language ex: ","position":{"start":{"line":402,"column":1,"offset":10653},"end":{"line":402,"column":60,"offset":10712}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":402,"column":60,"offset":10712},"end":{"line":402,"column":63,"offset":10715}}},{"type":"text","value":"\n","position":{"start":{"line":402,"column":63,"offset":10715},"end":{"line":403,"column":1,"offset":10716}}},{"type":"raw","value":"<br>","position":{"start":{"line":403,"column":1,"offset":10716},"end":{"line":403,"column":5,"offset":10720}}},{"type":"text","value":"\n","position":{"start":{"line":403,"column":5,"offset":10720},"end":{"line":404,"column":1,"offset":10721}}},{"type":"raw","value":"<br>","position":{"start":{"line":404,"column":1,"offset":10721},"end":{"line":404,"column":5,"offset":10725}}},{"type":"text","value":"\nBoth are used exactly the same.\n","position":{"start":{"line":404,"column":5,"offset":10725},"end":{"line":406,"column":1,"offset":10758}}},{"type":"raw","value":"<br>","position":{"start":{"line":406,"column":1,"offset":10758},"end":{"line":406,"column":5,"offset":10762}}},{"type":"text","value":"\n","position":{"start":{"line":406,"column":5,"offset":10762},"end":{"line":407,"column":1,"offset":10763}}},{"type":"raw","value":"<br>","position":{"start":{"line":407,"column":1,"offset":10763},"end":{"line":407,"column":5,"offset":10767}}},{"type":"text","value":"\nWhen writing programs it is important to write modular code that doesn’t care how the other things are computed, only what is computed. This is known as a Black-Box abstraction.\n","position":{"start":{"line":407,"column":5,"offset":10767},"end":{"line":409,"column":1,"offset":10946}}},{"type":"raw","value":"<br>","position":{"start":{"line":409,"column":1,"offset":10946},"end":{"line":409,"column":5,"offset":10950}}}],"position":{"start":{"line":402,"column":1,"offset":10653},"end":{"line":409,"column":5,"offset":10950}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lisp allows for block structure so you can nest a define in another define, and only the parent will have access to the nested define.\n","position":{"start":{"line":411,"column":1,"offset":10952},"end":{"line":412,"column":1,"offset":11087}}},{"type":"raw","value":"<br>","position":{"start":{"line":412,"column":1,"offset":11087},"end":{"line":412,"column":5,"offset":11091}}},{"type":"text","value":"\nLisp also allows the sub define functions to have access to parameters in the parents scope. This is called lexical scoping.\n","position":{"start":{"line":412,"column":5,"offset":11091},"end":{"line":414,"column":1,"offset":11217}}},{"type":"raw","value":"<br>","position":{"start":{"line":414,"column":1,"offset":11217},"end":{"line":414,"column":5,"offset":11221}}}],"position":{"start":{"line":411,"column":1,"offset":10952},"end":{"line":414,"column":5,"offset":11221}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.2 Procedures and the processes they generate","position":{"start":{"line":416,"column":7,"offset":11229},"end":{"line":416,"column":53,"offset":11275}}}],"position":{"start":{"line":416,"column":1,"offset":11223},"end":{"line":416,"column":53,"offset":11275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Linear Recursion vs linear interative","position":{"start":{"line":418,"column":8,"offset":11284},"end":{"line":418,"column":45,"offset":11321}}}],"position":{"start":{"line":418,"column":1,"offset":11277},"end":{"line":418,"column":45,"offset":11321}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursive calls itself, interative uses a helper iterator function to loop through the possibilities.\n","position":{"start":{"line":420,"column":1,"offset":11323},"end":{"line":421,"column":1,"offset":11425}}},{"type":"raw","value":"<br>","position":{"start":{"line":421,"column":1,"offset":11425},"end":{"line":421,"column":5,"offset":11429}}},{"type":"text","value":"\n","position":{"start":{"line":421,"column":5,"offset":11429},"end":{"line":422,"column":1,"offset":11430}}},{"type":"raw","value":"<br>","position":{"start":{"line":422,"column":1,"offset":11430},"end":{"line":422,"column":5,"offset":11434}}},{"type":"text","value":"\nTail-recursive: an iterative process in constant space.\n","position":{"start":{"line":422,"column":5,"offset":11434},"end":{"line":424,"column":1,"offset":11491}}},{"type":"raw","value":"<br>","position":{"start":{"line":424,"column":1,"offset":11491},"end":{"line":424,"column":5,"offset":11495}}},{"type":"text","value":"\n","position":{"start":{"line":424,"column":5,"offset":11495},"end":{"line":425,"column":1,"offset":11496}}},{"type":"raw","value":"<br>","position":{"start":{"line":425,"column":1,"offset":11496},"end":{"line":425,"column":5,"offset":11500}}},{"type":"text","value":"\nTree-recursive: think fibonacci where it uses recursion multiple times.\nTree recursive procedures are easy to identify, but not very efficient. It is possible one day a “smart compiler” could find these procedures and make them efficient.","position":{"start":{"line":425,"column":5,"offset":11500},"end":{"line":427,"column":167,"offset":11739}}}],"position":{"start":{"line":420,"column":1,"offset":11323},"end":{"line":427,"column":167,"offset":11739}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.3 Formulating Abstractions with Higher Order Procedures","position":{"start":{"line":429,"column":7,"offset":11747},"end":{"line":429,"column":64,"offset":11804}}}],"position":{"start":{"line":429,"column":1,"offset":11741},"end":{"line":429,"column":64,"offset":11804}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sigma Notation: The sum of numbers between A and B.\nThis can be abstracted to create a procedure that handles all needs for doing a procedure to calculate a sum.\n","position":{"start":{"line":431,"column":1,"offset":11806},"end":{"line":433,"column":1,"offset":11968}}},{"type":"raw","value":"<br>","position":{"start":{"line":433,"column":1,"offset":11968},"end":{"line":433,"column":5,"offset":11972}}},{"type":"text","value":"\n","position":{"start":{"line":433,"column":5,"offset":11972},"end":{"line":434,"column":1,"offset":11973}}},{"type":"raw","value":"<br>","position":{"start":{"line":434,"column":1,"offset":11973},"end":{"line":434,"column":5,"offset":11977}}},{"type":"text","value":"\nArguments for a Summation function:\n","position":{"start":{"line":434,"column":5,"offset":11977},"end":{"line":436,"column":1,"offset":12014}}},{"type":"raw","value":"<br>","position":{"start":{"line":436,"column":1,"offset":12014},"end":{"line":436,"column":5,"offset":12018}}},{"type":"text","value":"\n","position":{"start":{"line":436,"column":5,"offset":12018},"end":{"line":437,"column":1,"offset":12019}}},{"type":"raw","value":"<br>","position":{"start":{"line":437,"column":1,"offset":12019},"end":{"line":437,"column":5,"offset":12023}}},{"type":"text","value":"\nTerm: Procedure for the sum.\n","position":{"start":{"line":437,"column":5,"offset":12023},"end":{"line":439,"column":1,"offset":12053}}},{"type":"raw","value":"<br>","position":{"start":{"line":439,"column":1,"offset":12053},"end":{"line":439,"column":5,"offset":12057}}},{"type":"text","value":"\na: start point\n","position":{"start":{"line":439,"column":5,"offset":12057},"end":{"line":441,"column":1,"offset":12073}}},{"type":"raw","value":"<br>","position":{"start":{"line":441,"column":1,"offset":12073},"end":{"line":441,"column":5,"offset":12077}}},{"type":"text","value":"\nb: end point\n","position":{"start":{"line":441,"column":5,"offset":12077},"end":{"line":443,"column":1,"offset":12091}}},{"type":"raw","value":"<br>","position":{"start":{"line":443,"column":1,"offset":12091},"end":{"line":443,"column":5,"offset":12095}}},{"type":"text","value":"\nnext: The increment function ex: + 1 + 2 + 3\n","position":{"start":{"line":443,"column":5,"offset":12095},"end":{"line":445,"column":1,"offset":12141}}},{"type":"raw","value":"<br>","position":{"start":{"line":445,"column":1,"offset":12141},"end":{"line":445,"column":5,"offset":12145}}},{"type":"text","value":"\n","position":{"start":{"line":445,"column":5,"offset":12145},"end":{"line":446,"column":1,"offset":12146}}},{"type":"raw","value":"<br>","position":{"start":{"line":446,"column":1,"offset":12146},"end":{"line":446,"column":5,"offset":12150}}}],"position":{"start":{"line":431,"column":1,"offset":11806},"end":{"line":446,"column":5,"offset":12150}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can use binary search like logic to find points within a function. By splitting the length repeatedly then checking accuracy you can continually get closer to the point you are looking for in the function. The calculated runtime for these functions are:\n","position":{"start":{"line":448,"column":1,"offset":12152},"end":{"line":449,"column":1,"offset":12410}}},{"type":"raw","value":"<br>","position":{"start":{"line":449,"column":1,"offset":12410},"end":{"line":449,"column":5,"offset":12414}}},{"type":"text","value":"\n","position":{"start":{"line":449,"column":5,"offset":12414},"end":{"line":450,"column":1,"offset":12415}}},{"type":"raw","value":"<br>","position":{"start":{"line":450,"column":1,"offset":12415},"end":{"line":450,"column":5,"offset":12419}}}],"position":{"start":{"line":448,"column":1,"offset":12152},"end":{"line":450,"column":5,"offset":12419}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">L = length of the functions start to end points\nT = tolerance, the distance from the given point that will return a result\nruntime:\nlog(L/T)</code></pre></div>","position":{"start":{"line":452,"column":1,"offset":12421},"end":{"line":457,"column":4,"offset":12569}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Think of L/T as the possibilties between the two points.","position":{"start":{"line":459,"column":1,"offset":12571},"end":{"line":459,"column":57,"offset":12627}}}],"position":{"start":{"line":459,"column":1,"offset":12571},"end":{"line":459,"column":57,"offset":12627}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":460,"column":1,"offset":12628}}}}