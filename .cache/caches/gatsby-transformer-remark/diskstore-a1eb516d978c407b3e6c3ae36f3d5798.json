{"expireTime":9007200848858532000,"key":"transformer-remark-markdown-html-ast-40474b1938d89bff130e62909fc6ed65-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54}}},{"type":"element","tagName":"a","properties":{"href":"https://teachyourselfcs.com/"},"children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70}}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101}}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153}}},{"type":"element","tagName":"a","properties":{"href":"https://bpp.dev/articles/teachyourselfcs/programming/00:getting-started/"},"children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158}}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":131,"offset":233}}},{"type":"text","value":".","position":{"start":{"line":2,"column":131,"offset":233},"end":{"line":2,"column":132,"offset":234}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":132,"offset":234}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"INTRO","position":{"start":{"line":4,"column":6,"offset":241},"end":{"line":4,"column":11,"offset":246}}}],"position":{"start":{"line":4,"column":1,"offset":236},"end":{"line":4,"column":11,"offset":246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I will be following the Summer 2010 ","position":{"start":{"line":5,"column":1,"offset":247},"end":{"line":5,"column":37,"offset":283}}},{"type":"element","tagName":"a","properties":{"href":"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html"},"children":[{"type":"text","value":"Calendar","position":{"start":{"line":5,"column":38,"offset":284},"end":{"line":5,"column":46,"offset":292}}}],"position":{"start":{"line":5,"column":37,"offset":283},"end":{"line":5,"column":101,"offset":347}}},{"type":"text","value":"\nso each week will consist of 4 lectures and 2 labs.","position":{"start":{"line":5,"column":101,"offset":347},"end":{"line":6,"column":52,"offset":399}}}],"position":{"start":{"line":5,"column":1,"offset":247},"end":{"line":6,"column":52,"offset":399}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":8,"column":6,"offset":406},"end":{"line":8,"column":14,"offset":414}}}],"position":{"start":{"line":8,"column":1,"offset":401},"end":{"line":8,"column":14,"offset":414}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L01","position":{"start":{"line":9,"column":7,"offset":421},"end":{"line":9,"column":10,"offset":424}}}],"position":{"start":{"line":9,"column":1,"offset":415},"end":{"line":9,"column":10,"offset":424}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":11,"column":8,"offset":433},"end":{"line":11,"column":30,"offset":455}}}],"position":{"start":{"line":11,"column":1,"offset":426},"end":{"line":11,"column":30,"offset":455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":13,"column":1,"offset":457},"end":{"line":14,"column":1,"offset":601}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":1,"offset":601},"end":{"line":14,"column":5,"offset":605}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":14,"column":5,"offset":605},"end":{"line":14,"column":16,"offset":616}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":16,"offset":616},"end":{"line":14,"column":20,"offset":620}}},{"type":"text","value":"\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n","position":{"start":{"line":14,"column":20,"offset":620},"end":{"line":16,"column":1,"offset":764}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":1,"offset":764},"end":{"line":16,"column":5,"offset":768}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":16,"column":5,"offset":768},"end":{"line":16,"column":16,"offset":779}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":16,"offset":779},"end":{"line":16,"column":20,"offset":783}}},{"type":"text","value":"\nNow lets say we want to do something like:  ","position":{"start":{"line":16,"column":20,"offset":783},"end":{"line":17,"column":45,"offset":828}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":45,"offset":828},"end":{"line":17,"column":49,"offset":832}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 +  3 - 4</code>","position":{"start":{"line":17,"column":49,"offset":832},"end":{"line":17,"column":65,"offset":848}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":65,"offset":848},"end":{"line":17,"column":69,"offset":852}}},{"type":"text","value":"\nIn Scheme you can simply nest operators:\n","position":{"start":{"line":17,"column":69,"offset":852},"end":{"line":19,"column":1,"offset":895}}},{"type":"raw","value":"<br>","position":{"start":{"line":19,"column":1,"offset":895},"end":{"line":19,"column":5,"offset":899}}},{"type":"raw","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":19,"column":5,"offset":899},"end":{"line":19,"column":22,"offset":916}}},{"type":"raw","value":"<br>","position":{"start":{"line":19,"column":22,"offset":916},"end":{"line":19,"column":26,"offset":920}}},{"type":"text","value":"\n","position":{"start":{"line":19,"column":26,"offset":920},"end":{"line":20,"column":1,"offset":921}}},{"type":"raw","value":"<br>","position":{"start":{"line":20,"column":1,"offset":921},"end":{"line":20,"column":5,"offset":925}}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer.\n","position":{"start":{"line":20,"column":5,"offset":925},"end":{"line":22,"column":1,"offset":1043}}},{"type":"raw","value":"<br>","position":{"start":{"line":22,"column":1,"offset":1043},"end":{"line":22,"column":5,"offset":1047}}},{"type":"text","value":"\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value.\n","position":{"start":{"line":22,"column":5,"offset":1047},"end":{"line":24,"column":1,"offset":1168}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":24,"column":1,"offset":1168},"end":{"line":24,"column":12,"offset":1179}}},{"type":"text","value":" is a expression and not a primitive value, so it calls ","position":{"start":{"line":24,"column":12,"offset":1179},"end":{"line":24,"column":68,"offset":1235}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":24,"column":68,"offset":1235},"end":{"line":24,"column":79,"offset":1246}}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":24,"column":79,"offset":1246},"end":{"line":24,"column":106,"offset":1273}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":24,"column":106,"offset":1273},"end":{"line":24,"column":109,"offset":1276}}},{"type":"text","value":" is now 7 and both arguments are primitive values, meaning it can calculate the ","position":{"start":{"line":24,"column":109,"offset":1276},"end":{"line":24,"column":189,"offset":1356}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":24,"column":189,"offset":1356},"end":{"line":24,"column":192,"offset":1359}}},{"type":"text","value":" to get 3.","position":{"start":{"line":24,"column":192,"offset":1359},"end":{"line":24,"column":202,"offset":1369}}}],"position":{"start":{"line":13,"column":1,"offset":457},"end":{"line":24,"column":202,"offset":1369}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Define","position":{"start":{"line":26,"column":8,"offset":1378},"end":{"line":26,"column":14,"offset":1384}}}],"position":{"start":{"line":26,"column":1,"offset":1371},"end":{"line":26,"column":14,"offset":1384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":27,"column":1,"offset":1385},"end":{"line":27,"column":9,"offset":1393}}},{"type":"text","value":" is an interesting keyword. It can be used to create functions: ","position":{"start":{"line":27,"column":9,"offset":1393},"end":{"line":27,"column":73,"offset":1457}}}],"position":{"start":{"line":27,"column":1,"offset":1385},"end":{"line":27,"column":73,"offset":1457}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":28,"column":1,"offset":1458},"end":{"line":31,"column":4,"offset":1497}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":32,"column":1,"offset":1498},"end":{"line":32,"column":5,"offset":1502}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The syntax is very different from other languages, but try to think of ","position":{"start":{"line":34,"column":1,"offset":1504},"end":{"line":34,"column":72,"offset":1575}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":34,"column":72,"offset":1575},"end":{"line":34,"column":80,"offset":1583}}},{"type":"text","value":" as a function itself.\n","position":{"start":{"line":34,"column":80,"offset":1583},"end":{"line":35,"column":1,"offset":1607}}},{"type":"raw","value":"<br>","position":{"start":{"line":35,"column":1,"offset":1607},"end":{"line":35,"column":5,"offset":1611}}},{"type":"text","value":"\n","position":{"start":{"line":35,"column":5,"offset":1611},"end":{"line":36,"column":1,"offset":1612}}},{"type":"raw","value":"<br>","position":{"start":{"line":36,"column":1,"offset":1612},"end":{"line":36,"column":5,"offset":1616}}},{"type":"text","value":"\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case ","position":{"start":{"line":36,"column":5,"offset":1616},"end":{"line":37,"column":184,"offset":1800}}},{"type":"raw","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":37,"column":184,"offset":1800},"end":{"line":37,"column":187,"offset":1803}}},{"type":"text","value":".\n","position":{"start":{"line":37,"column":187,"offset":1803},"end":{"line":38,"column":1,"offset":1806}}},{"type":"raw","value":"<br>","position":{"start":{"line":38,"column":1,"offset":1806},"end":{"line":38,"column":5,"offset":1810}}},{"type":"text","value":"\n","position":{"start":{"line":38,"column":5,"offset":1810},"end":{"line":39,"column":1,"offset":1811}}},{"type":"raw","value":"<br>","position":{"start":{"line":39,"column":1,"offset":1811},"end":{"line":39,"column":5,"offset":1815}}},{"type":"text","value":"\nThe second parameter that ","position":{"start":{"line":39,"column":5,"offset":1815},"end":{"line":40,"column":27,"offset":1842}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":40,"column":27,"offset":1842},"end":{"line":40,"column":35,"offset":1850}}},{"type":"text","value":" takes in is the body that the procedure will call ","position":{"start":{"line":40,"column":35,"offset":1850},"end":{"line":40,"column":86,"offset":1901}}},{"type":"raw","value":"<code class=\"language-text\">(* x x)</code>","position":{"start":{"line":40,"column":86,"offset":1901},"end":{"line":40,"column":95,"offset":1910}}},{"type":"text","value":". ","position":{"start":{"line":40,"column":95,"offset":1910},"end":{"line":40,"column":97,"offset":1912}}}],"position":{"start":{"line":34,"column":1,"offset":1504},"end":{"line":40,"column":97,"offset":1912}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br> ","position":{"start":{"line":42,"column":1,"offset":1914},"end":{"line":42,"column":6,"offset":1919}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define can also be used to store constants:\n","position":{"start":{"line":44,"column":1,"offset":1921},"end":{"line":45,"column":1,"offset":1965}}},{"type":"raw","value":"<br>","position":{"start":{"line":45,"column":1,"offset":1965},"end":{"line":45,"column":5,"offset":1969}}},{"type":"text","value":"\n","position":{"start":{"line":45,"column":5,"offset":1969},"end":{"line":46,"column":1,"offset":1970}}},{"type":"raw","value":"<code class=\"language-text\">(define pi 3.14159)</code>","position":{"start":{"line":46,"column":1,"offset":1970},"end":{"line":46,"column":22,"offset":1991}}},{"type":"text","value":"\n","position":{"start":{"line":46,"column":22,"offset":1991},"end":{"line":47,"column":1,"offset":1992}}},{"type":"raw","value":"<br>","position":{"start":{"line":47,"column":1,"offset":1992},"end":{"line":47,"column":5,"offset":1996}}}],"position":{"start":{"line":44,"column":1,"offset":1921},"end":{"line":47,"column":5,"offset":1996}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.","position":{"start":{"line":49,"column":1,"offset":1998},"end":{"line":49,"column":152,"offset":2149}}}],"position":{"start":{"line":49,"column":1,"offset":1998},"end":{"line":49,"column":152,"offset":2149}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":51,"column":8,"offset":2158},"end":{"line":51,"column":20,"offset":2170}}}],"position":{"start":{"line":51,"column":1,"offset":2151},"end":{"line":51,"column":20,"offset":2170}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the first example of a program we see in class:","position":{"start":{"line":53,"column":1,"offset":2172},"end":{"line":53,"column":56,"offset":2227}}}],"position":{"start":{"line":53,"column":1,"offset":2172},"end":{"line":53,"column":56,"offset":2227}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>","position":{"start":{"line":54,"column":1,"offset":2228},"end":{"line":59,"column":4,"offset":2319}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":60,"column":1,"offset":2320},"end":{"line":60,"column":5,"offset":2324}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you’ve probably already guessed, ","position":{"start":{"line":62,"column":1,"offset":2326},"end":{"line":62,"column":37,"offset":2362}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":62,"column":37,"offset":2362},"end":{"line":62,"column":41,"offset":2366}}},{"type":"text","value":" is a function.\n","position":{"start":{"line":62,"column":41,"offset":2366},"end":{"line":63,"column":1,"offset":2383}}},{"type":"raw","value":"<br>","position":{"start":{"line":63,"column":1,"offset":2383},"end":{"line":63,"column":5,"offset":2387}}},{"type":"text","value":"\n","position":{"start":{"line":63,"column":5,"offset":2387},"end":{"line":64,"column":1,"offset":2388}}},{"type":"raw","value":"<br>","position":{"start":{"line":64,"column":1,"offset":2388},"end":{"line":64,"column":5,"offset":2392}}},{"type":"text","value":"\nThe first parameter is the test case for example if we input fly ","position":{"start":{"line":64,"column":5,"offset":2392},"end":{"line":65,"column":66,"offset":2458}}},{"type":"raw","value":"<code class=\"language-text\">(equal? (last wd) &#39;y)</code>","position":{"start":{"line":65,"column":66,"offset":2458},"end":{"line":65,"column":89,"offset":2481}}},{"type":"text","value":" would be true, because fly ends in y.\n","position":{"start":{"line":65,"column":89,"offset":2481},"end":{"line":66,"column":1,"offset":2521}}},{"type":"raw","value":"<br>","position":{"start":{"line":66,"column":1,"offset":2521},"end":{"line":66,"column":5,"offset":2525}}},{"type":"text","value":"\n","position":{"start":{"line":66,"column":5,"offset":2525},"end":{"line":67,"column":1,"offset":2526}}},{"type":"raw","value":"<br>","position":{"start":{"line":67,"column":1,"offset":2526},"end":{"line":67,"column":5,"offset":2530}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":67,"column":5,"offset":2530},"end":{"line":68,"column":21,"offset":2551}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":68,"column":21,"offset":2551},"end":{"line":68,"column":25,"offset":2555}}},{"type":"text","value":" takes in is the expression if the test case is true.\n","position":{"start":{"line":68,"column":25,"offset":2555},"end":{"line":69,"column":1,"offset":2609}}},{"type":"raw","value":"<br>","position":{"start":{"line":69,"column":1,"offset":2609},"end":{"line":69,"column":5,"offset":2613}}},{"type":"text","value":"\n","position":{"start":{"line":69,"column":5,"offset":2613},"end":{"line":70,"column":1,"offset":2614}}},{"type":"raw","value":"<br>","position":{"start":{"line":70,"column":1,"offset":2614},"end":{"line":70,"column":5,"offset":2618}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":70,"column":5,"offset":2618},"end":{"line":71,"column":21,"offset":2639}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":71,"column":21,"offset":2639},"end":{"line":71,"column":25,"offset":2643}}},{"type":"text","value":" takes in is the expression if the test case is false.\n","position":{"start":{"line":71,"column":25,"offset":2643},"end":{"line":72,"column":1,"offset":2698}}},{"type":"raw","value":"<br>","position":{"start":{"line":72,"column":1,"offset":2698},"end":{"line":72,"column":5,"offset":2702}}},{"type":"text","value":"\n","position":{"start":{"line":72,"column":5,"offset":2702},"end":{"line":73,"column":1,"offset":2703}}},{"type":"raw","value":"<br>","position":{"start":{"line":73,"column":1,"offset":2703},"end":{"line":73,"column":5,"offset":2707}}},{"type":"text","value":"\nAlso worth noting that names that return a boolean add a ","position":{"start":{"line":73,"column":5,"offset":2707},"end":{"line":74,"column":58,"offset":2765}}},{"type":"raw","value":"<code class=\"language-text\">?</code>","position":{"start":{"line":74,"column":58,"offset":2765},"end":{"line":74,"column":61,"offset":2768}}},{"type":"text","value":" to the end to show that the primitive returned is true or false. Like how equal is ","position":{"start":{"line":74,"column":61,"offset":2768},"end":{"line":74,"column":145,"offset":2852}}},{"type":"raw","value":"<code class=\"language-text\">equal?</code>","position":{"start":{"line":74,"column":145,"offset":2852},"end":{"line":74,"column":153,"offset":2860}}},{"type":"text","value":" in the code block above.","position":{"start":{"line":74,"column":153,"offset":2860},"end":{"line":74,"column":178,"offset":2885}}}],"position":{"start":{"line":62,"column":1,"offset":2326},"end":{"line":74,"column":178,"offset":2885}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L02","position":{"start":{"line":76,"column":7,"offset":2893},"end":{"line":76,"column":10,"offset":2896}}}],"position":{"start":{"line":76,"column":1,"offset":2887},"end":{"line":76,"column":10,"offset":2896}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Recursion","position":{"start":{"line":78,"column":8,"offset":2905},"end":{"line":78,"column":17,"offset":2914}}}],"position":{"start":{"line":78,"column":1,"offset":2898},"end":{"line":78,"column":17,"offset":2914}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":79,"column":1,"offset":2915},"end":{"line":90,"column":4,"offset":3114}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":91,"column":1,"offset":3115},"end":{"line":91,"column":5,"offset":3119}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n","position":{"start":{"line":93,"column":1,"offset":3121},"end":{"line":94,"column":1,"offset":3337}}},{"type":"raw","value":"<br>","position":{"start":{"line":94,"column":1,"offset":3337},"end":{"line":94,"column":5,"offset":3341}}},{"type":"text","value":"\n","position":{"start":{"line":94,"column":5,"offset":3341},"end":{"line":95,"column":1,"offset":3342}}},{"type":"raw","value":"<br>","position":{"start":{"line":95,"column":1,"offset":3342},"end":{"line":95,"column":5,"offset":3346}}},{"type":"text","value":"\nNotice in the above example from lecture the function calls pigl until ","position":{"start":{"line":95,"column":5,"offset":3346},"end":{"line":96,"column":72,"offset":3418}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":96,"column":72,"offset":3418},"end":{"line":96,"column":81,"offset":3427}}},{"type":"text","value":" is equal to true.\n","position":{"start":{"line":96,"column":81,"offset":3427},"end":{"line":97,"column":1,"offset":3446}}},{"type":"raw","value":"<br>","position":{"start":{"line":97,"column":1,"offset":3446},"end":{"line":97,"column":5,"offset":3450}}},{"type":"text","value":"\n","position":{"start":{"line":97,"column":5,"offset":3450},"end":{"line":98,"column":1,"offset":3451}}},{"type":"raw","value":"<br>","position":{"start":{"line":98,"column":1,"offset":3451},"end":{"line":98,"column":5,"offset":3455}}},{"type":"text","value":"\nLets say ","position":{"start":{"line":98,"column":5,"offset":3455},"end":{"line":99,"column":10,"offset":3465}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":99,"column":10,"offset":3465},"end":{"line":99,"column":16,"offset":3471}}},{"type":"text","value":" gets called with ","position":{"start":{"line":99,"column":16,"offset":3471},"end":{"line":99,"column":34,"offset":3489}}},{"type":"raw","value":"<code class=\"language-text\">scheme</code>","position":{"start":{"line":99,"column":34,"offset":3489},"end":{"line":99,"column":42,"offset":3497}}},{"type":"text","value":".\nThe conditional checks ","position":{"start":{"line":99,"column":42,"offset":3497},"end":{"line":100,"column":24,"offset":3522}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":100,"column":24,"offset":3522},"end":{"line":100,"column":33,"offset":3531}}},{"type":"text","value":" which checks the first letter in the word to see if it is a vowel. Since ","position":{"start":{"line":100,"column":33,"offset":3531},"end":{"line":100,"column":107,"offset":3605}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":100,"column":107,"offset":3605},"end":{"line":100,"column":116,"offset":3614}}},{"type":"text","value":" is false because ","position":{"start":{"line":100,"column":116,"offset":3614},"end":{"line":100,"column":134,"offset":3632}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":100,"column":134,"offset":3632},"end":{"line":100,"column":137,"offset":3635}}},{"type":"text","value":" isn’t a vowel it calls ","position":{"start":{"line":100,"column":137,"offset":3635},"end":{"line":100,"column":161,"offset":3659}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":100,"column":161,"offset":3659},"end":{"line":100,"column":167,"offset":3665}}},{"type":"text","value":" again with the argument ","position":{"start":{"line":100,"column":167,"offset":3665},"end":{"line":100,"column":192,"offset":3690}}},{"type":"raw","value":"<code class=\"language-text\">chemes</code>","position":{"start":{"line":100,"column":192,"offset":3690},"end":{"line":100,"column":200,"offset":3698}}},{"type":"text","value":". This is because ","position":{"start":{"line":100,"column":200,"offset":3698},"end":{"line":100,"column":218,"offset":3716}}},{"type":"raw","value":"<code class=\"language-text\">word</code>","position":{"start":{"line":100,"column":218,"offset":3716},"end":{"line":100,"column":224,"offset":3722}}},{"type":"text","value":" takes the arguments ","position":{"start":{"line":100,"column":224,"offset":3722},"end":{"line":100,"column":245,"offset":3743}}},{"type":"raw","value":"<code class=\"language-text\">cheme</code>","position":{"start":{"line":100,"column":245,"offset":3743},"end":{"line":100,"column":252,"offset":3750}}},{"type":"text","value":" and ","position":{"start":{"line":100,"column":252,"offset":3750},"end":{"line":100,"column":257,"offset":3755}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":100,"column":257,"offset":3755},"end":{"line":100,"column":260,"offset":3758}}},{"type":"text","value":" and adds them together. ","position":{"start":{"line":100,"column":260,"offset":3758},"end":{"line":100,"column":285,"offset":3783}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":100,"column":285,"offset":3783},"end":{"line":100,"column":291,"offset":3789}}},{"type":"text","value":" gets called repeatedly until\nit is called with a vowel as the first letter. When the first letter is a vowel the expression ","position":{"start":{"line":100,"column":291,"offset":3789},"end":{"line":101,"column":96,"offset":3915}}},{"type":"raw","value":"<code class=\"language-text\">(word wd &#39;ay)</code>","position":{"start":{"line":101,"column":96,"offset":3915},"end":{"line":101,"column":111,"offset":3930}}},{"type":"text","value":" is ran and the result is a primitive which means the procedure stops. ","position":{"start":{"line":101,"column":111,"offset":3930},"end":{"line":101,"column":182,"offset":4001}}}],"position":{"start":{"line":93,"column":1,"offset":3121},"end":{"line":101,"column":182,"offset":4001}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":103,"column":8,"offset":4010},"end":{"line":103,"column":19,"offset":4021}}}],"position":{"start":{"line":103,"column":1,"offset":4003},"end":{"line":103,"column":19,"offset":4021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Big Picture: ","position":{"start":{"line":104,"column":1,"offset":4022},"end":{"line":104,"column":14,"offset":4035}}}],"position":{"start":{"line":104,"column":1,"offset":4022},"end":{"line":104,"column":14,"offset":4035}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>","position":{"start":{"line":105,"column":1,"offset":4036},"end":{"line":120,"column":4,"offset":4451}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":121,"column":1,"offset":4452},"end":{"line":121,"column":5,"offset":4456}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that can be referenced as a whole.","position":{"start":{"line":123,"column":1,"offset":4458},"end":{"line":123,"column":141,"offset":4598}}}],"position":{"start":{"line":123,"column":1,"offset":4458},"end":{"line":123,"column":141,"offset":4598}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Functional Programming","position":{"start":{"line":125,"column":8,"offset":4607},"end":{"line":125,"column":30,"offset":4629}}}],"position":{"start":{"line":125,"column":1,"offset":4600},"end":{"line":125,"column":30,"offset":4629}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the introduction of multi-core processers, parallelism has helped functional programming make a comeback. If everything is a function you won’t run into race conditions created by dependencies.","position":{"start":{"line":126,"column":1,"offset":4630},"end":{"line":126,"column":199,"offset":4828}}}],"position":{"start":{"line":126,"column":1,"offset":4630},"end":{"line":126,"column":199,"offset":4828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Function vs. Procedure","position":{"start":{"line":128,"column":8,"offset":4837},"end":{"line":128,"column":30,"offset":4859}}}],"position":{"start":{"line":128,"column":1,"offset":4830},"end":{"line":128,"column":30,"offset":4859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Two functions are the same if they give the same output with given inputs.\n","position":{"start":{"line":130,"column":1,"offset":4861},"end":{"line":131,"column":1,"offset":4936}}},{"type":"raw","value":"<br>","position":{"start":{"line":131,"column":1,"offset":4936},"end":{"line":131,"column":5,"offset":4940}}},{"type":"text","value":"\n","position":{"start":{"line":131,"column":5,"offset":4940},"end":{"line":132,"column":1,"offset":4941}}},{"type":"raw","value":"<br>","position":{"start":{"line":132,"column":1,"offset":4941},"end":{"line":132,"column":5,"offset":4945}}},{"type":"text","value":"\nA procedure is a sequence of steps for computing a function.\n","position":{"start":{"line":132,"column":5,"offset":4945},"end":{"line":134,"column":1,"offset":5007}}},{"type":"raw","value":"<br>","position":{"start":{"line":134,"column":1,"offset":5007},"end":{"line":134,"column":5,"offset":5011}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":134,"column":5,"offset":5011},"end":{"line":135,"column":1,"offset":5014}}},{"type":"text","value":"\n"},{"type":"text","value":"Therefore ","position":{"start":{"line":135,"column":1,"offset":5014},"end":{"line":135,"column":11,"offset":5024}}},{"type":"raw","value":"<code class=\"language-text\">2x + 6</code>","position":{"start":{"line":135,"column":11,"offset":5024},"end":{"line":135,"column":19,"offset":5032}}},{"type":"text","value":" and ","position":{"start":{"line":135,"column":19,"offset":5032},"end":{"line":135,"column":24,"offset":5037}}},{"type":"raw","value":"<code class=\"language-text\">2(x + 3)</code>","position":{"start":{"line":135,"column":24,"offset":5037},"end":{"line":135,"column":34,"offset":5047}}},{"type":"text","value":" are the same function but different procedures.\n","position":{"start":{"line":135,"column":34,"offset":5047},"end":{"line":136,"column":1,"offset":5096}}},{"type":"raw","value":"<br>","position":{"start":{"line":136,"column":1,"offset":5096},"end":{"line":136,"column":5,"offset":5100}}}],"position":{"start":{"line":130,"column":1,"offset":4861},"end":{"line":136,"column":5,"offset":5100}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Cond","position":{"start":{"line":138,"column":8,"offset":5109},"end":{"line":138,"column":12,"offset":5113}}}],"position":{"start":{"line":138,"column":1,"offset":5102},"end":{"line":138,"column":12,"offset":5113}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (buzz n) \n    (cond ((equal? (remainder n 7) 0) &#39;buzz)\n    ((member? 7 n) &#39;buzz)\n    (else n)))</code></pre></div>","position":{"start":{"line":139,"column":1,"offset":5114},"end":{"line":144,"column":4,"offset":5225}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":145,"column":1,"offset":5226},"end":{"line":146,"column":5,"offset":5235}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":148,"column":1,"offset":5237},"end":{"line":148,"column":7,"offset":5243}}},{"type":"text","value":" allows for multiple test cases, and will return\nthe first clause that is true.\n","position":{"start":{"line":148,"column":7,"offset":5243},"end":{"line":150,"column":1,"offset":5325}}},{"type":"raw","value":"<br>","position":{"start":{"line":150,"column":1,"offset":5325},"end":{"line":150,"column":5,"offset":5329}}},{"type":"text","value":"\n","position":{"start":{"line":150,"column":5,"offset":5329},"end":{"line":151,"column":1,"offset":5330}}},{"type":"raw","value":"<br>","position":{"start":{"line":151,"column":1,"offset":5330},"end":{"line":151,"column":5,"offset":5334}}},{"type":"text","value":"\nLets try ","position":{"start":{"line":151,"column":5,"offset":5334},"end":{"line":152,"column":10,"offset":5344}}},{"type":"raw","value":"<code class=\"language-text\">14</code>","position":{"start":{"line":152,"column":10,"offset":5344},"end":{"line":152,"column":14,"offset":5348}}},{"type":"text","value":". Since ","position":{"start":{"line":152,"column":14,"offset":5348},"end":{"line":152,"column":22,"offset":5356}}},{"type":"raw","value":"<code class=\"language-text\">14 / 7</code>","position":{"start":{"line":152,"column":22,"offset":5356},"end":{"line":152,"column":30,"offset":5364}}},{"type":"text","value":" has a remainder of ","position":{"start":{"line":152,"column":30,"offset":5364},"end":{"line":152,"column":50,"offset":5384}}},{"type":"raw","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":152,"column":50,"offset":5384},"end":{"line":152,"column":53,"offset":5387}}},{"type":"text","value":" the first clause is met and returns ","position":{"start":{"line":152,"column":53,"offset":5387},"end":{"line":152,"column":90,"offset":5424}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":152,"column":90,"offset":5424},"end":{"line":152,"column":96,"offset":5430}}},{"type":"text","value":".\n","position":{"start":{"line":152,"column":96,"offset":5430},"end":{"line":153,"column":1,"offset":5433}}},{"type":"raw","value":"<br>","position":{"start":{"line":153,"column":1,"offset":5433},"end":{"line":153,"column":5,"offset":5437}}},{"type":"text","value":"\n","position":{"start":{"line":153,"column":5,"offset":5437},"end":{"line":154,"column":1,"offset":5438}}},{"type":"raw","value":"<br>","position":{"start":{"line":154,"column":1,"offset":5438},"end":{"line":154,"column":5,"offset":5442}}},{"type":"text","value":"\nNow Lets try ","position":{"start":{"line":154,"column":5,"offset":5442},"end":{"line":155,"column":14,"offset":5456}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":155,"column":14,"offset":5456},"end":{"line":155,"column":18,"offset":5460}}},{"type":"text","value":". The first clause is not met, and therefore goes onto the next clause. ","position":{"start":{"line":155,"column":18,"offset":5460},"end":{"line":155,"column":90,"offset":5532}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":155,"column":90,"offset":5532},"end":{"line":155,"column":94,"offset":5536}}},{"type":"text","value":" does have a 7 inside of it so ","position":{"start":{"line":155,"column":94,"offset":5536},"end":{"line":155,"column":125,"offset":5567}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":155,"column":125,"offset":5567},"end":{"line":155,"column":131,"offset":5573}}},{"type":"text","value":" is returned.\n","position":{"start":{"line":155,"column":131,"offset":5573},"end":{"line":156,"column":1,"offset":5588}}},{"type":"raw","value":"<br>","position":{"start":{"line":156,"column":1,"offset":5588},"end":{"line":156,"column":5,"offset":5592}}},{"type":"text","value":"\n","position":{"start":{"line":156,"column":5,"offset":5592},"end":{"line":157,"column":1,"offset":5593}}},{"type":"raw","value":"<br>","position":{"start":{"line":157,"column":1,"offset":5593},"end":{"line":157,"column":5,"offset":5597}}},{"type":"text","value":"\nNow lets try ","position":{"start":{"line":157,"column":5,"offset":5597},"end":{"line":158,"column":14,"offset":5611}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":158,"column":14,"offset":5611},"end":{"line":158,"column":18,"offset":5615}}},{"type":"text","value":". The remainder is ","position":{"start":{"line":158,"column":18,"offset":5615},"end":{"line":158,"column":37,"offset":5634}}},{"type":"raw","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":158,"column":37,"offset":5634},"end":{"line":158,"column":40,"offset":5637}}},{"type":"text","value":" so the first clause is not met, and ","position":{"start":{"line":158,"column":40,"offset":5637},"end":{"line":158,"column":77,"offset":5674}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":158,"column":77,"offset":5674},"end":{"line":158,"column":81,"offset":5678}}},{"type":"text","value":"  does not have a ","position":{"start":{"line":158,"column":81,"offset":5678},"end":{"line":158,"column":99,"offset":5696}}},{"type":"raw","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":158,"column":99,"offset":5696},"end":{"line":158,"column":102,"offset":5699}}},{"type":"text","value":" inside of it so the catch all ","position":{"start":{"line":158,"column":102,"offset":5699},"end":{"line":158,"column":133,"offset":5730}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":158,"column":133,"offset":5730},"end":{"line":158,"column":139,"offset":5736}}},{"type":"text","value":" keyword returns the number ","position":{"start":{"line":158,"column":139,"offset":5736},"end":{"line":158,"column":167,"offset":5764}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":158,"column":167,"offset":5764},"end":{"line":158,"column":171,"offset":5768}}},{"type":"text","value":".\n","position":{"start":{"line":158,"column":171,"offset":5768},"end":{"line":159,"column":1,"offset":5770}}},{"type":"raw","value":"<br>","position":{"start":{"line":159,"column":1,"offset":5770},"end":{"line":159,"column":5,"offset":5774}}},{"type":"text","value":"\n","position":{"start":{"line":159,"column":5,"offset":5774},"end":{"line":160,"column":1,"offset":5775}}},{"type":"raw","value":"<br>","position":{"start":{"line":160,"column":1,"offset":5775},"end":{"line":160,"column":5,"offset":5779}}},{"type":"text","value":"\nImportant to note:\n","position":{"start":{"line":160,"column":5,"offset":5779},"end":{"line":162,"column":1,"offset":5799}}},{"type":"raw","value":"<br>","position":{"start":{"line":162,"column":1,"offset":5799},"end":{"line":162,"column":5,"offset":5803}}},{"type":"text","value":"\nIf a ","position":{"start":{"line":162,"column":5,"offset":5803},"end":{"line":163,"column":6,"offset":5809}}},{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":163,"column":6,"offset":5809},"end":{"line":163,"column":12,"offset":5815}}},{"type":"text","value":" does not have an ","position":{"start":{"line":163,"column":12,"offset":5815},"end":{"line":163,"column":30,"offset":5833}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":163,"column":30,"offset":5833},"end":{"line":163,"column":36,"offset":5839}}},{"type":"text","value":" statement it will return ","position":{"start":{"line":163,"column":36,"offset":5839},"end":{"line":163,"column":62,"offset":5865}}},{"type":"raw","value":"<code class=\"language-text\">unspecified</code>","position":{"start":{"line":163,"column":62,"offset":5865},"end":{"line":163,"column":75,"offset":5878}}},{"type":"text","value":", which can be different depending on interpreted, so always have an else statement.","position":{"start":{"line":163,"column":75,"offset":5878},"end":{"line":163,"column":159,"offset":5962}}}],"position":{"start":{"line":148,"column":1,"offset":5237},"end":{"line":163,"column":159,"offset":5962}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Applicative Order vs Normal Order","position":{"start":{"line":165,"column":8,"offset":5971},"end":{"line":165,"column":41,"offset":6004}}}],"position":{"start":{"line":165,"column":1,"offset":5964},"end":{"line":165,"column":41,"offset":6004}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (f a b) (+ (g a) b))\n(def (g x) (* 3 x))\n\n(f (+ 2 3) (- 15 6))</code></pre></div>","position":{"start":{"line":166,"column":1,"offset":6005},"end":{"line":171,"column":4,"offset":6080}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Applicative Order:\n","position":{"start":{"line":172,"column":1,"offset":6081},"end":{"line":173,"column":1,"offset":6100}}},{"type":"raw","value":"<br>","position":{"start":{"line":173,"column":1,"offset":6100},"end":{"line":173,"column":5,"offset":6104}}},{"type":"text","value":"\nevaluates the sub expressions until they are primitive values, then passes the primitive results back up to the parent function.\n","position":{"start":{"line":173,"column":5,"offset":6104},"end":{"line":175,"column":5,"offset":6242}}},{"type":"raw","value":"<br>","position":{"start":{"line":175,"column":5,"offset":6242},"end":{"line":175,"column":9,"offset":6246}}},{"type":"text","value":"\n","position":{"start":{"line":175,"column":9,"offset":6246},"end":{"line":176,"column":5,"offset":6251}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":176,"column":5,"offset":6251},"end":{"line":176,"column":27,"offset":6273}}},{"type":"text","value":"\n","position":{"start":{"line":176,"column":27,"offset":6273},"end":{"line":177,"column":5,"offset":6278}}},{"type":"raw","value":"<br>","position":{"start":{"line":177,"column":5,"offset":6278},"end":{"line":177,"column":9,"offset":6282}}},{"type":"text","value":"\n","position":{"start":{"line":177,"column":9,"offset":6282},"end":{"line":178,"column":5,"offset":6287}}},{"type":"raw","value":"<code class=\"language-text\">2 + 3</code>","position":{"start":{"line":178,"column":5,"offset":6287},"end":{"line":178,"column":12,"offset":6294}}},{"type":"text","value":" and ","position":{"start":{"line":178,"column":12,"offset":6294},"end":{"line":178,"column":17,"offset":6299}}},{"type":"raw","value":"<code class=\"language-text\">15 - 6</code>","position":{"start":{"line":178,"column":17,"offset":6299},"end":{"line":178,"column":25,"offset":6307}}},{"type":"text","value":" will be evaluated before the outside ","position":{"start":{"line":178,"column":25,"offset":6307},"end":{"line":178,"column":63,"offset":6345}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":178,"column":63,"offset":6345},"end":{"line":178,"column":66,"offset":6348}}},{"type":"text","value":" is evaluated. Then ","position":{"start":{"line":178,"column":66,"offset":6348},"end":{"line":178,"column":86,"offset":6368}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":178,"column":86,"offset":6368},"end":{"line":178,"column":89,"offset":6371}}},{"type":"text","value":" will be called with ","position":{"start":{"line":178,"column":89,"offset":6371},"end":{"line":178,"column":110,"offset":6392}}},{"type":"raw","value":"<code class=\"language-text\">(f 5 9)</code>","position":{"start":{"line":178,"column":110,"offset":6392},"end":{"line":178,"column":119,"offset":6401}}},{"type":"text","value":".\n","position":{"start":{"line":178,"column":119,"offset":6401},"end":{"line":179,"column":1,"offset":6403}}},{"type":"raw","value":"<br>","position":{"start":{"line":179,"column":1,"offset":6403},"end":{"line":179,"column":5,"offset":6407}}},{"type":"text","value":"\nNormal Order:\n","position":{"start":{"line":179,"column":5,"offset":6407},"end":{"line":181,"column":1,"offset":6423}}},{"type":"raw","value":"<br>","position":{"start":{"line":181,"column":1,"offset":6423},"end":{"line":181,"column":5,"offset":6427}}},{"type":"text","value":"\nevaluates the outsides first, but instead of passing primitive values it passes the expressions.\n","position":{"start":{"line":181,"column":5,"offset":6427},"end":{"line":183,"column":5,"offset":6534}}},{"type":"raw","value":"<br>","position":{"start":{"line":183,"column":5,"offset":6534},"end":{"line":183,"column":9,"offset":6538}}},{"type":"text","value":"\n","position":{"start":{"line":183,"column":9,"offset":6538},"end":{"line":184,"column":1,"offset":6539}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":184,"column":1,"offset":6539},"end":{"line":184,"column":23,"offset":6561}}},{"type":"text","value":" turns into ","position":{"start":{"line":184,"column":23,"offset":6561},"end":{"line":184,"column":35,"offset":6573}}},{"type":"raw","value":"<code class=\"language-text\">(+ (g (+ 2 3)) (- 15 6))</code>","position":{"start":{"line":184,"column":35,"offset":6573},"end":{"line":184,"column":61,"offset":6599}}},{"type":"text","value":"\n","position":{"start":{"line":184,"column":61,"offset":6599},"end":{"line":185,"column":1,"offset":6600}}},{"type":"raw","value":"<br>","position":{"start":{"line":185,"column":1,"offset":6600},"end":{"line":185,"column":5,"offset":6604}}},{"type":"text","value":"\nNow ","position":{"start":{"line":185,"column":5,"offset":6604},"end":{"line":186,"column":5,"offset":6609}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":186,"column":5,"offset":6609},"end":{"line":186,"column":8,"offset":6612}}},{"type":"text","value":" is done and the next expression can be evaluated.","position":{"start":{"line":186,"column":8,"offset":6612},"end":{"line":186,"column":58,"offset":6662}}}],"position":{"start":{"line":172,"column":1,"offset":6081},"end":{"line":186,"column":58,"offset":6662}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Possible Problem:\n","position":{"start":{"line":188,"column":1,"offset":6664},"end":{"line":189,"column":1,"offset":6682}}},{"type":"raw","value":"<br>","position":{"start":{"line":189,"column":1,"offset":6682},"end":{"line":189,"column":5,"offset":6686}}}],"position":{"start":{"line":188,"column":1,"offset":6664},"end":{"line":189,"column":5,"offset":6686}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (zero z) (- x x))</code></pre></div>","position":{"start":{"line":190,"column":1,"offset":6687},"end":{"line":192,"column":4,"offset":6717}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"applicative ","position":{"start":{"line":193,"column":1,"offset":6718},"end":{"line":193,"column":13,"offset":6730}}}],"position":{"start":{"line":193,"column":1,"offset":6718},"end":{"line":193,"column":13,"offset":6730}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(random 10) ==&gt; 8\n(zero 8) ---&gt;\n(- 8 8) ==&gt; 0\n0</code></pre></div>","position":{"start":{"line":194,"column":1,"offset":6731},"end":{"line":200,"column":4,"offset":6810}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"normal ","position":{"start":{"line":201,"column":1,"offset":6811},"end":{"line":201,"column":8,"offset":6818}}}],"position":{"start":{"line":201,"column":1,"offset":6811},"end":{"line":201,"column":8,"offset":6818}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(+ (random 10) (random 10)) ==&gt; \n    (random 10) ==&gt; 8\n    (random 10) ==&gt; 1\n(- 8 1) ==&gt; 7\n7</code></pre></div>","position":{"start":{"line":202,"column":1,"offset":6819},"end":{"line":209,"column":4,"offset":6943}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":210,"column":1,"offset":6944},"end":{"line":211,"column":5,"offset":6953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the ","position":{"start":{"line":213,"column":1,"offset":6955},"end":{"line":213,"column":11,"offset":6965}}},{"type":"raw","value":"<code class=\"language-text\">(random 10)</code>","position":{"start":{"line":213,"column":11,"offset":6965},"end":{"line":213,"column":24,"offset":6978}}},{"type":"text","value":" is split into 2 different function alls in normal order you get different results.","position":{"start":{"line":213,"column":24,"offset":6978},"end":{"line":213,"column":107,"offset":7061}}}],"position":{"start":{"line":213,"column":1,"offset":6955},"end":{"line":213,"column":107,"offset":7061}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L03","position":{"start":{"line":215,"column":7,"offset":7069},"end":{"line":215,"column":10,"offset":7072}}}],"position":{"start":{"line":215,"column":1,"offset":7063},"end":{"line":215,"column":10,"offset":7072}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Data vs Procedures","position":{"start":{"line":216,"column":8,"offset":7080},"end":{"line":216,"column":26,"offset":7098}}}],"position":{"start":{"line":216,"column":1,"offset":7073},"end":{"line":216,"column":26,"offset":7098}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Data is like a noun. Procedures are like verbs.\n","position":{"start":{"line":217,"column":1,"offset":7099},"end":{"line":218,"column":1,"offset":7147}}},{"type":"raw","value":"<br>","position":{"start":{"line":218,"column":1,"offset":7147},"end":{"line":218,"column":5,"offset":7151}}},{"type":"text","value":"\n","position":{"start":{"line":218,"column":5,"offset":7151},"end":{"line":219,"column":1,"offset":7152}}},{"type":"raw","value":"<br>","position":{"start":{"line":219,"column":1,"offset":7152},"end":{"line":219,"column":5,"offset":7156}}},{"type":"text","value":"\nCapitalization does not matter in scheme.\nAble to take in functions as arguments.\n","position":{"start":{"line":219,"column":5,"offset":7156},"end":{"line":222,"column":1,"offset":7239}}},{"type":"raw","value":"<code class=\"language-text\">se</code>","position":{"start":{"line":222,"column":1,"offset":7239},"end":{"line":222,"column":5,"offset":7243}}},{"type":"text","value":" is the function for creating sentences. ","position":{"start":{"line":222,"column":5,"offset":7243},"end":{"line":222,"column":46,"offset":7284}}}],"position":{"start":{"line":217,"column":1,"offset":7099},"end":{"line":222,"column":46,"offset":7284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Lambda","position":{"start":{"line":224,"column":8,"offset":7293},"end":{"line":224,"column":14,"offset":7299}}}],"position":{"start":{"line":224,"column":1,"offset":7286},"end":{"line":224,"column":14,"offset":7299}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The thing that makes a function.\nA thing that creates and can call a function without having to be named.\n","position":{"start":{"line":226,"column":1,"offset":7301},"end":{"line":228,"column":1,"offset":7407}}},{"type":"raw","value":"<br>","position":{"start":{"line":228,"column":1,"offset":7407},"end":{"line":228,"column":5,"offset":7411}}},{"type":"text","value":"\n","position":{"start":{"line":228,"column":5,"offset":7411},"end":{"line":229,"column":1,"offset":7412}}},{"type":"raw","value":"<br>","position":{"start":{"line":229,"column":1,"offset":7412},"end":{"line":229,"column":5,"offset":7416}}},{"type":"text","value":"\nPRED: short for predicate, predicate is a function whose range is a boolean (true or false).\nEvery procedure has a lambda hidden inside of it.","position":{"start":{"line":229,"column":5,"offset":7416},"end":{"line":231,"column":50,"offset":7559}}}],"position":{"start":{"line":226,"column":1,"offset":7301},"end":{"line":231,"column":50,"offset":7559}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L04","position":{"start":{"line":233,"column":7,"offset":7567},"end":{"line":233,"column":10,"offset":7570}}}],"position":{"start":{"line":233,"column":1,"offset":7561},"end":{"line":233,"column":10,"offset":7570}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using lambdas for control using procedures as data.\nKeep decides whether to keep data or not.","position":{"start":{"line":235,"column":1,"offset":7572},"end":{"line":236,"column":42,"offset":7665}}}],"position":{"start":{"line":235,"column":1,"offset":7572},"end":{"line":236,"column":42,"offset":7665}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"first class datatype","position":{"start":{"line":238,"column":7,"offset":7673},"end":{"line":238,"column":27,"offset":7693}}}],"position":{"start":{"line":238,"column":1,"offset":7667},"end":{"line":238,"column":27,"offset":7693}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Rule of Thumb:\n","position":{"start":{"line":240,"column":1,"offset":7695},"end":{"line":241,"column":1,"offset":7711}}},{"type":"raw","value":"<br>","position":{"start":{"line":241,"column":1,"offset":7711},"end":{"line":241,"column":5,"offset":7715}}},{"type":"text","value":"\nThey can be stored as a variable.\n","position":{"start":{"line":241,"column":5,"offset":7715},"end":{"line":243,"column":1,"offset":7750}}},{"type":"raw","value":"<br>","position":{"start":{"line":243,"column":1,"offset":7750},"end":{"line":243,"column":5,"offset":7754}}},{"type":"text","value":"\nThey can be stored inside a data type like a list.\n","position":{"start":{"line":243,"column":5,"offset":7754},"end":{"line":245,"column":1,"offset":7806}}},{"type":"raw","value":"<br>","position":{"start":{"line":245,"column":1,"offset":7806},"end":{"line":245,"column":5,"offset":7810}}},{"type":"text","value":"\nYou can return function  to make other functions.\n","position":{"start":{"line":245,"column":5,"offset":7810},"end":{"line":247,"column":1,"offset":7861}}},{"type":"raw","value":"<br>","position":{"start":{"line":247,"column":1,"offset":7861},"end":{"line":247,"column":5,"offset":7865}}},{"type":"text","value":"\n","position":{"start":{"line":247,"column":5,"offset":7865},"end":{"line":248,"column":1,"offset":7866}}},{"type":"raw","value":"<code class=\"language-text\">(let bindings body)</code>","position":{"start":{"line":248,"column":1,"offset":7866},"end":{"line":248,"column":22,"offset":7887}}},{"type":"text","value":"\nBinding is a name: value expression.","position":{"start":{"line":248,"column":22,"offset":7887},"end":{"line":249,"column":37,"offset":7924}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":249,"column":37,"offset":7924},"end":{"line":250,"column":1,"offset":7927}}},{"type":"text","value":"\n"},{"type":"text","value":"Bindings can’t reference eachother during declaration because of applicative order.\n","position":{"start":{"line":250,"column":1,"offset":7927},"end":{"line":251,"column":1,"offset":8011}}},{"type":"raw","value":"<br>","position":{"start":{"line":251,"column":1,"offset":8011},"end":{"line":251,"column":5,"offset":8015}}},{"type":"text","value":"\n","position":{"start":{"line":251,"column":5,"offset":8015},"end":{"line":252,"column":1,"offset":8016}}},{"type":"raw","value":"<code class=\"language-text\">let*</code>","position":{"start":{"line":252,"column":1,"offset":8016},"end":{"line":252,"column":7,"offset":8022}}},{"type":"text","value":" allows you to reference other bindings during declaration by nesting the ","position":{"start":{"line":252,"column":7,"offset":8022},"end":{"line":252,"column":81,"offset":8096}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":252,"column":81,"offset":8096},"end":{"line":252,"column":86,"offset":8101}}},{"type":"text","value":"s.\n","position":{"start":{"line":252,"column":86,"offset":8101},"end":{"line":253,"column":1,"offset":8104}}},{"type":"raw","value":"<br>","position":{"start":{"line":253,"column":1,"offset":8104},"end":{"line":253,"column":5,"offset":8108}}},{"type":"text","value":"\nWant to keep as many variables local as possible.","position":{"start":{"line":253,"column":5,"offset":8108},"end":{"line":254,"column":50,"offset":8158}}}],"position":{"start":{"line":240,"column":1,"offset":7695},"end":{"line":254,"column":50,"offset":8158}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LABS","position":{"start":{"line":256,"column":6,"offset":8165},"end":{"line":256,"column":10,"offset":8169}}}],"position":{"start":{"line":256,"column":1,"offset":8160},"end":{"line":256,"column":10,"offset":8169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1A","position":{"start":{"line":257,"column":7,"offset":8176},"end":{"line":257,"column":13,"offset":8182}}}],"position":{"start":{"line":257,"column":1,"offset":8170},"end":{"line":257,"column":13,"offset":8182}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first problem for the lab was to modify the ","position":{"start":{"line":258,"column":1,"offset":8183},"end":{"line":258,"column":49,"offset":8231}}},{"type":"raw","value":"<code class=\"language-text\">plural</code>","position":{"start":{"line":258,"column":49,"offset":8231},"end":{"line":258,"column":57,"offset":8239}}},{"type":"text","value":" program to handle a word ending in y, but has a vowel in front of it (boy).","position":{"start":{"line":258,"column":57,"offset":8239},"end":{"line":258,"column":133,"offset":8315}}}],"position":{"start":{"line":258,"column":1,"offset":8183},"end":{"line":258,"column":133,"offset":8315}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t\t(if (vowel? (last (bl wd)))\n\t\t(word wd &#39;s)\n\t\t(word (bl wd) &#39;ies))\n\t(word wd &#39;s)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":259,"column":1,"offset":8316},"end":{"line":269,"column":4,"offset":8511}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":270,"column":1,"offset":8512},"end":{"line":270,"column":5,"offset":8516}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I handled this by adding a conditional that checks for the second to last letter.\n","position":{"start":{"line":273,"column":1,"offset":8519},"end":{"line":274,"column":1,"offset":8601}}},{"type":"raw","value":"<br>","position":{"start":{"line":274,"column":1,"offset":8601},"end":{"line":274,"column":5,"offset":8605}}},{"type":"text","value":"\n","position":{"start":{"line":274,"column":5,"offset":8605},"end":{"line":275,"column":1,"offset":8606}}},{"type":"raw","value":"<br>","position":{"start":{"line":275,"column":1,"offset":8606},"end":{"line":275,"column":5,"offset":8610}}},{"type":"text","value":"\nThe second assgnment was:","position":{"start":{"line":275,"column":5,"offset":8610},"end":{"line":276,"column":26,"offset":8636}}}],"position":{"start":{"line":273,"column":1,"offset":8519},"end":{"line":276,"column":26,"offset":8636}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Define a procedure that takes three numbers as arguments and returns the sum of\nthe squares of the two larger numbers.</code></pre></div>","position":{"start":{"line":277,"column":1,"offset":8637},"end":{"line":280,"column":4,"offset":8763}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My Solution: ","position":{"start":{"line":282,"column":1,"offset":8765},"end":{"line":282,"column":14,"offset":8778}}}],"position":{"start":{"line":282,"column":1,"offset":8765},"end":{"line":282,"column":14,"offset":8778}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (twoLargerSums a b c)\n    (if (&gt;= a b)\n        (if (&gt;= b c)\n            (+ (square a) (square b))\n            (+ (square a) (square c)))\n        (if (&gt;= a c)\n            (+ (square a) (square b))\n            (+ (square b) (square c))))\n)\n\n(define (square x)\n(* x x))</code></pre></div>","position":{"start":{"line":284,"column":1,"offset":8780},"end":{"line":297,"column":4,"offset":9062}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":299,"column":1,"offset":9064},"end":{"line":300,"column":5,"offset":9073}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1B","position":{"start":{"line":302,"column":7,"offset":9081},"end":{"line":302,"column":13,"offset":9087}}}],"position":{"start":{"line":302,"column":1,"offset":9075},"end":{"line":302,"column":13,"offset":9087}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Solution for #3 on lab:\n","position":{"start":{"line":303,"column":1,"offset":9088},"end":{"line":304,"column":1,"offset":9113}}},{"type":"raw","value":"<br>","position":{"start":{"line":304,"column":1,"offset":9113},"end":{"line":304,"column":5,"offset":9117}}}],"position":{"start":{"line":303,"column":1,"offset":9088},"end":{"line":304,"column":5,"offset":9117}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (substitute sent old new)\n    (if (equal? sent &#39;())\n        &#39;()\n        (se (replace (first sent) old new) (substitute (bf sent) old new))))\n\n(define (replace wd old new)\n    (if (equal? wd old)\n        new\n        wd)\n)</code></pre></div>","position":{"start":{"line":306,"column":1,"offset":9119},"end":{"line":317,"column":4,"offset":9355}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":318,"column":1,"offset":9356},"end":{"line":319,"column":5,"offset":9365}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note to self, don’t copy and paste function calls to check if your code is right because there might be special characters in there :P.\n","position":{"start":{"line":321,"column":1,"offset":9367},"end":{"line":322,"column":1,"offset":9503}}},{"type":"raw","value":"<br>","position":{"start":{"line":322,"column":1,"offset":9503},"end":{"line":322,"column":5,"offset":9507}}},{"type":"text","value":"\n","position":{"start":{"line":322,"column":5,"offset":9507},"end":{"line":323,"column":1,"offset":9508}}},{"type":"raw","value":"<br>","position":{"start":{"line":323,"column":1,"offset":9508},"end":{"line":323,"column":5,"offset":9512}}},{"type":"text","value":"\nThe replace function here takes in the current word and checks to see if the word should be replaced, then it returns what the word should be.\nSubstitute is a recursive function that iterates the sentence and returns the sentence with the replacements. ","position":{"start":{"line":323,"column":5,"offset":9512},"end":{"line":325,"column":111,"offset":9766}}}],"position":{"start":{"line":321,"column":1,"offset":9367},"end":{"line":325,"column":111,"offset":9766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"READINGS","position":{"start":{"line":327,"column":6,"offset":9773},"end":{"line":327,"column":14,"offset":9781}}}],"position":{"start":{"line":327,"column":1,"offset":9768},"end":{"line":327,"column":14,"offset":9781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.1 The Elements of Programming","position":{"start":{"line":328,"column":7,"offset":9788},"end":{"line":328,"column":38,"offset":9819}}}],"position":{"start":{"line":328,"column":1,"offset":9782},"end":{"line":328,"column":38,"offset":9819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The section starts off saying that there are 3 mechanisms that languages utilize to simplify complex ideas:\n","position":{"start":{"line":329,"column":1,"offset":9820},"end":{"line":330,"column":1,"offset":9928}}},{"type":"raw","value":"<br>","position":{"start":{"line":330,"column":1,"offset":9928},"end":{"line":330,"column":5,"offset":9932}}},{"type":"text","value":"\nprimitive expressions: simplest entities within a language.\n","position":{"start":{"line":330,"column":5,"offset":9932},"end":{"line":332,"column":1,"offset":9993}}},{"type":"raw","value":"<br>","position":{"start":{"line":332,"column":1,"offset":9993},"end":{"line":332,"column":5,"offset":9997}}},{"type":"text","value":"\n","position":{"start":{"line":332,"column":5,"offset":9997},"end":{"line":333,"column":1,"offset":9998}}},{"type":"raw","value":"<br>","position":{"start":{"line":333,"column":1,"offset":9998},"end":{"line":333,"column":5,"offset":10002}}},{"type":"text","value":"\nmeans of combination: The ability to combine simple entities.\n","position":{"start":{"line":333,"column":5,"offset":10002},"end":{"line":335,"column":1,"offset":10066}}},{"type":"raw","value":"<br>","position":{"start":{"line":335,"column":1,"offset":10066},"end":{"line":335,"column":5,"offset":10070}}},{"type":"text","value":"\n","position":{"start":{"line":335,"column":5,"offset":10070},"end":{"line":336,"column":1,"offset":10071}}},{"type":"raw","value":"<br>","position":{"start":{"line":336,"column":1,"offset":10071},"end":{"line":336,"column":5,"offset":10075}}},{"type":"text","value":"\nmeans of abstraction: The ability to name and manipulate combined elements.\n","position":{"start":{"line":336,"column":5,"offset":10075},"end":{"line":338,"column":1,"offset":10152}}},{"type":"raw","value":"<br>","position":{"start":{"line":338,"column":1,"offset":10152},"end":{"line":338,"column":5,"offset":10156}}},{"type":"text","value":"\n","position":{"start":{"line":338,"column":5,"offset":10156},"end":{"line":339,"column":1,"offset":10157}}},{"type":"raw","value":"<br>","position":{"start":{"line":339,"column":1,"offset":10157},"end":{"line":339,"column":5,"offset":10161}}},{"type":"text","value":"\nBreaking down a compound expression:\n","position":{"start":{"line":339,"column":5,"offset":10161},"end":{"line":341,"column":1,"offset":10199}}},{"type":"raw","value":"<br>","position":{"start":{"line":341,"column":1,"offset":10199},"end":{"line":341,"column":5,"offset":10203}}},{"type":"text","value":"\ncombination: ","position":{"start":{"line":341,"column":5,"offset":10203},"end":{"line":342,"column":14,"offset":10217}}},{"type":"raw","value":"<code class=\"language-text\">(+ 137 349)</code>","position":{"start":{"line":342,"column":14,"offset":10217},"end":{"line":342,"column":27,"offset":10230}}},{"type":"text","value":"\n","position":{"start":{"line":342,"column":27,"offset":10230},"end":{"line":343,"column":1,"offset":10231}}},{"type":"raw","value":"<br>","position":{"start":{"line":343,"column":1,"offset":10231},"end":{"line":343,"column":5,"offset":10235}}},{"type":"text","value":"\noperator: ","position":{"start":{"line":343,"column":5,"offset":10235},"end":{"line":344,"column":11,"offset":10246}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":344,"column":11,"offset":10246},"end":{"line":344,"column":14,"offset":10249}}},{"type":"text","value":"\n","position":{"start":{"line":344,"column":14,"offset":10249},"end":{"line":345,"column":1,"offset":10250}}},{"type":"raw","value":"<br>","position":{"start":{"line":345,"column":1,"offset":10250},"end":{"line":345,"column":5,"offset":10254}}},{"type":"text","value":"\noperands: ","position":{"start":{"line":345,"column":5,"offset":10254},"end":{"line":346,"column":11,"offset":10265}}},{"type":"raw","value":"<code class=\"language-text\">137</code>","position":{"start":{"line":346,"column":11,"offset":10265},"end":{"line":346,"column":16,"offset":10270}}},{"type":"text","value":" ","position":{"start":{"line":346,"column":16,"offset":10270},"end":{"line":346,"column":17,"offset":10271}}},{"type":"raw","value":"<code class=\"language-text\">349</code>","position":{"start":{"line":346,"column":17,"offset":10271},"end":{"line":346,"column":22,"offset":10276}}},{"type":"text","value":"\n","position":{"start":{"line":346,"column":22,"offset":10276},"end":{"line":347,"column":1,"offset":10277}}},{"type":"raw","value":"<br>","position":{"start":{"line":347,"column":1,"offset":10277},"end":{"line":347,"column":5,"offset":10281}}},{"type":"text","value":"\n","position":{"start":{"line":347,"column":5,"offset":10281},"end":{"line":348,"column":1,"offset":10282}}},{"type":"raw","value":"<br>","position":{"start":{"line":348,"column":1,"offset":10282},"end":{"line":348,"column":5,"offset":10286}}},{"type":"text","value":"\nThe interpreter runs in a “read-eval-print” loop. That is why it is not necessary to print stuff out like in other languages.\n","position":{"start":{"line":348,"column":5,"offset":10286},"end":{"line":350,"column":1,"offset":10413}}},{"type":"raw","value":"<br>","position":{"start":{"line":350,"column":1,"offset":10413},"end":{"line":350,"column":5,"offset":10417}}},{"type":"text","value":"\n","position":{"start":{"line":350,"column":5,"offset":10417},"end":{"line":351,"column":1,"offset":10418}}},{"type":"raw","value":"<br>","position":{"start":{"line":351,"column":1,"offset":10418},"end":{"line":351,"column":5,"offset":10422}}},{"type":"text","value":"\nEnvironment: The name-object pairs the interpreter keeps in memory.\n","position":{"start":{"line":351,"column":5,"offset":10422},"end":{"line":353,"column":1,"offset":10491}}},{"type":"raw","value":"<br>","position":{"start":{"line":353,"column":1,"offset":10491},"end":{"line":353,"column":5,"offset":10495}}},{"type":"text","value":"\n","position":{"start":{"line":353,"column":5,"offset":10495},"end":{"line":354,"column":1,"offset":10496}}},{"type":"raw","value":"<br>","position":{"start":{"line":354,"column":1,"offset":10496},"end":{"line":354,"column":5,"offset":10500}}}],"position":{"start":{"line":329,"column":1,"offset":9820},"end":{"line":354,"column":5,"offset":10500}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedures can be used to build on top of other Compound Procedures:\n","position":{"start":{"line":356,"column":1,"offset":10502},"end":{"line":357,"column":1,"offset":10580}}},{"type":"raw","value":"<br>","position":{"start":{"line":357,"column":1,"offset":10580},"end":{"line":357,"column":5,"offset":10584}}}],"position":{"start":{"line":356,"column":1,"offset":10502},"end":{"line":357,"column":5,"offset":10584}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (sum-of-squares x y)\n(+ (square x) (square y))</code></pre></div>","position":{"start":{"line":358,"column":1,"offset":10585},"end":{"line":361,"column":4,"offset":10647}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":362,"column":1,"offset":10648},"end":{"line":362,"column":5,"offset":10652}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compound Procedure: procedure that you make out of other procedures.","position":{"start":{"line":364,"column":1,"offset":10654},"end":{"line":364,"column":69,"offset":10722}}}],"position":{"start":{"line":364,"column":1,"offset":10654},"end":{"line":364,"column":69,"offset":10722}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Primitive Procedure: procedure built into the language ex: ","position":{"start":{"line":366,"column":1,"offset":10724},"end":{"line":366,"column":60,"offset":10783}}},{"type":"raw","value":"<code class=\"language-text\">+</code>","position":{"start":{"line":366,"column":60,"offset":10783},"end":{"line":366,"column":63,"offset":10786}}},{"type":"text","value":"\n","position":{"start":{"line":366,"column":63,"offset":10786},"end":{"line":367,"column":1,"offset":10787}}},{"type":"raw","value":"<br>","position":{"start":{"line":367,"column":1,"offset":10787},"end":{"line":367,"column":5,"offset":10791}}},{"type":"text","value":"\n","position":{"start":{"line":367,"column":5,"offset":10791},"end":{"line":368,"column":1,"offset":10792}}},{"type":"raw","value":"<br>","position":{"start":{"line":368,"column":1,"offset":10792},"end":{"line":368,"column":5,"offset":10796}}},{"type":"text","value":"\nBoth are used exactly the same.\n","position":{"start":{"line":368,"column":5,"offset":10796},"end":{"line":370,"column":1,"offset":10829}}},{"type":"raw","value":"<br>","position":{"start":{"line":370,"column":1,"offset":10829},"end":{"line":370,"column":5,"offset":10833}}},{"type":"text","value":"\n","position":{"start":{"line":370,"column":5,"offset":10833},"end":{"line":371,"column":1,"offset":10834}}},{"type":"raw","value":"<br>","position":{"start":{"line":371,"column":1,"offset":10834},"end":{"line":371,"column":5,"offset":10838}}},{"type":"text","value":"\nWhen writing programs it is important to write modular code that doesn’t care how the other things are computed, only what is computed. This is known as a Black-Box abstraction.\n","position":{"start":{"line":371,"column":5,"offset":10838},"end":{"line":373,"column":1,"offset":11017}}},{"type":"raw","value":"<br>","position":{"start":{"line":373,"column":1,"offset":11017},"end":{"line":373,"column":5,"offset":11021}}}],"position":{"start":{"line":366,"column":1,"offset":10724},"end":{"line":373,"column":5,"offset":11021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lisp allows for block structure so you can nest a define in another define, and only the parent will have access to the nested define.\n","position":{"start":{"line":375,"column":1,"offset":11023},"end":{"line":376,"column":1,"offset":11158}}},{"type":"raw","value":"<br>","position":{"start":{"line":376,"column":1,"offset":11158},"end":{"line":376,"column":5,"offset":11162}}},{"type":"text","value":"\nLisp also allows the sub define functions to have access to parameters in the parents scope. This is called lexical scoping.\n","position":{"start":{"line":376,"column":5,"offset":11162},"end":{"line":378,"column":1,"offset":11288}}},{"type":"raw","value":"<br>","position":{"start":{"line":378,"column":1,"offset":11288},"end":{"line":378,"column":5,"offset":11292}}}],"position":{"start":{"line":375,"column":1,"offset":11023},"end":{"line":378,"column":5,"offset":11292}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.2 Procedures and the processes they generate","position":{"start":{"line":380,"column":7,"offset":11300},"end":{"line":380,"column":53,"offset":11346}}}],"position":{"start":{"line":380,"column":1,"offset":11294},"end":{"line":380,"column":53,"offset":11346}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Linear Recursion vs linear interative","position":{"start":{"line":381,"column":8,"offset":11354},"end":{"line":381,"column":45,"offset":11391}}}],"position":{"start":{"line":381,"column":1,"offset":11347},"end":{"line":381,"column":45,"offset":11391}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursive calls itself, interative uses a helper iterator function to loop through the possibilities.\n","position":{"start":{"line":383,"column":1,"offset":11393},"end":{"line":384,"column":1,"offset":11495}}},{"type":"raw","value":"<br>","position":{"start":{"line":384,"column":1,"offset":11495},"end":{"line":384,"column":5,"offset":11499}}},{"type":"text","value":"\n","position":{"start":{"line":384,"column":5,"offset":11499},"end":{"line":385,"column":1,"offset":11500}}},{"type":"raw","value":"<br>","position":{"start":{"line":385,"column":1,"offset":11500},"end":{"line":385,"column":5,"offset":11504}}},{"type":"text","value":"\nTail-recursive: an iterative process in constant space.\n","position":{"start":{"line":385,"column":5,"offset":11504},"end":{"line":387,"column":1,"offset":11561}}},{"type":"raw","value":"<br>","position":{"start":{"line":387,"column":1,"offset":11561},"end":{"line":387,"column":5,"offset":11565}}},{"type":"text","value":"\n","position":{"start":{"line":387,"column":5,"offset":11565},"end":{"line":388,"column":1,"offset":11566}}},{"type":"raw","value":"<br>","position":{"start":{"line":388,"column":1,"offset":11566},"end":{"line":388,"column":5,"offset":11570}}},{"type":"text","value":"\nTree-recursive: think fibonacci where it uses recursion multiple times.\nTree recursive procedures are easy to identify, but not very efficient. It is possible one day a “smart compiler” could find these procedures and make them efficient.","position":{"start":{"line":388,"column":5,"offset":11570},"end":{"line":390,"column":167,"offset":11809}}}],"position":{"start":{"line":383,"column":1,"offset":11393},"end":{"line":390,"column":167,"offset":11809}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.3 Formulating Abstractions with Higher Order Procedures","position":{"start":{"line":395,"column":7,"offset":11820},"end":{"line":395,"column":64,"offset":11877}}}],"position":{"start":{"line":395,"column":1,"offset":11814},"end":{"line":395,"column":64,"offset":11877}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sigma Notation: The sum of numbers between A and B.\nThis can be abstracted to create a procedure that handles all needs for doing a procedure to calculate a sum.\n","position":{"start":{"line":397,"column":1,"offset":11879},"end":{"line":399,"column":1,"offset":12041}}},{"type":"raw","value":"<br>","position":{"start":{"line":399,"column":1,"offset":12041},"end":{"line":399,"column":5,"offset":12045}}},{"type":"text","value":"\n","position":{"start":{"line":399,"column":5,"offset":12045},"end":{"line":400,"column":1,"offset":12046}}},{"type":"raw","value":"<br>","position":{"start":{"line":400,"column":1,"offset":12046},"end":{"line":400,"column":5,"offset":12050}}},{"type":"text","value":"\nArguments for a Summation function:\n","position":{"start":{"line":400,"column":5,"offset":12050},"end":{"line":402,"column":1,"offset":12087}}},{"type":"raw","value":"<br>","position":{"start":{"line":402,"column":1,"offset":12087},"end":{"line":402,"column":5,"offset":12091}}},{"type":"text","value":"\n","position":{"start":{"line":402,"column":5,"offset":12091},"end":{"line":403,"column":1,"offset":12092}}},{"type":"raw","value":"<br>","position":{"start":{"line":403,"column":1,"offset":12092},"end":{"line":403,"column":5,"offset":12096}}},{"type":"text","value":"\nTerm: Procedure for the sum.\n","position":{"start":{"line":403,"column":5,"offset":12096},"end":{"line":405,"column":1,"offset":12126}}},{"type":"raw","value":"<br>","position":{"start":{"line":405,"column":1,"offset":12126},"end":{"line":405,"column":5,"offset":12130}}},{"type":"text","value":"\na: start point\n","position":{"start":{"line":405,"column":5,"offset":12130},"end":{"line":407,"column":1,"offset":12146}}},{"type":"raw","value":"<br>","position":{"start":{"line":407,"column":1,"offset":12146},"end":{"line":407,"column":5,"offset":12150}}},{"type":"text","value":"\nb: end point\n","position":{"start":{"line":407,"column":5,"offset":12150},"end":{"line":409,"column":1,"offset":12164}}},{"type":"raw","value":"<br>","position":{"start":{"line":409,"column":1,"offset":12164},"end":{"line":409,"column":5,"offset":12168}}},{"type":"text","value":"\nnext: The increment function ex: + 1 + 2 + 3\n","position":{"start":{"line":409,"column":5,"offset":12168},"end":{"line":411,"column":1,"offset":12214}}},{"type":"raw","value":"<br>","position":{"start":{"line":411,"column":1,"offset":12214},"end":{"line":411,"column":5,"offset":12218}}},{"type":"text","value":"\n","position":{"start":{"line":411,"column":5,"offset":12218},"end":{"line":412,"column":1,"offset":12219}}},{"type":"raw","value":"<br>","position":{"start":{"line":412,"column":1,"offset":12219},"end":{"line":412,"column":5,"offset":12223}}}],"position":{"start":{"line":397,"column":1,"offset":11879},"end":{"line":412,"column":5,"offset":12223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can use binary search like logic to find points within a function. By splitting the length repeatedly then checking accuracy you can continually get closer to the point you are looking for in the function. The calculated runtime for these functions are:\n","position":{"start":{"line":414,"column":1,"offset":12225},"end":{"line":415,"column":1,"offset":12483}}},{"type":"raw","value":"<br>","position":{"start":{"line":415,"column":1,"offset":12483},"end":{"line":415,"column":5,"offset":12487}}},{"type":"text","value":"\n","position":{"start":{"line":415,"column":5,"offset":12487},"end":{"line":416,"column":1,"offset":12488}}},{"type":"raw","value":"<br>","position":{"start":{"line":416,"column":1,"offset":12488},"end":{"line":416,"column":5,"offset":12492}}}],"position":{"start":{"line":414,"column":1,"offset":12225},"end":{"line":416,"column":5,"offset":12492}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">L = length of the functions start to end points\nT = tolerance, the distance from the given point that will return a result\nruntime:\nlog(L/T)</code></pre></div>","position":{"start":{"line":417,"column":1,"offset":12493},"end":{"line":422,"column":4,"offset":12641}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Think of L/T as the possibilties between the two points.","position":{"start":{"line":423,"column":1,"offset":12642},"end":{"line":423,"column":57,"offset":12698}}}],"position":{"start":{"line":423,"column":1,"offset":12642},"end":{"line":423,"column":57,"offset":12698}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":425,"column":1,"offset":12700}}}}