{"expireTime":9007200868583969000,"key":"transformer-remark-markdown-html-c7f9e62d893182a4d1d2655905c49e79-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>This article is a part of a series where I go through <a href=\"https://teachyourselfcs.com/\">teachyourselfcs</a>.\nIf you would like to start at the beginning start <a href=\"https://bpp.dev/articles/teachyourselfcs/programming/00-getting-started/\">here</a>.</p>\n<h2>LECTURES</h2>\n<h3>L5</h3>\n<p>Assembly language below high level language (MIPS)\n<br>\nAssebler turns assembly code into machine code\n<br>\njob of cpu: execute lost of instructions (primitive operations that the cpu can execute)\n<br>\nExample instruction set architectures:\n<br></p>\n<ul>\n<li>ARM</li>\n<li>x86</li>\n<li>mips</li>\n<li>risc-v</li>\n<li>ibm/motorola powerPC</li>\n<li>intel IA64</li>\n</ul>\n<br>\n<p>Assembly Variables: Registers\n<br>\nsince registers are in hardware there is a limited number, 32 registers in MIPS</p>\n<br>\n<p>32 bits in a register, groups of 32 bits called a word in mips.</p>\n<p>Number refererences: ($0, $1, $2)</p>\n<p>or</p>\n<p>name references: ($s0-$s7, $t0-\\$t7) c variables and temporary variables (preffered because easier to debug)</p>\n<br>\n<p>add in assembly\n<br>\n<code class=\"language-text\">add $s0, $s1, $s2</code> = <code class=\"language-text\">a = b + c</code>\n<br></p>\n<p>subtract in assembly\n<br>\n<code class=\"language-text\">sub $s3, $s4, $s5</code> = <code class=\"language-text\">d = e - f</code>\n<br></p>\n<p>how to do a = b + c + d - e</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  add $t0, $s1, $s2 # temp = b + c\n  add $t0, $t0, $s3 # temp = temp + d\n  sub $s0, $t0, $s4 # a = temp - e</code></pre></div>\n<br>\n<p>Immediates:\n<br>\nImmediates are numerical constants, they appear often in code, so there are special instructions for them.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  addi $s0, $s1, -10 #mips\n  f =  g - 10 #c</code></pre></div>\n<p>you have a special register for zero cases</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  add $s0, $s1, $zero #mips\n  f = g #c</code></pre></div>\n<p>Overflow handling in mips:\n<br>\nDetect overflow:</p>\n<ul>\n<li>add</li>\n<li>add immediate</li>\n<li>subtract</li>\n</ul>\n<p>do not detect overflow:</p>\n<ul>\n<li>add unsigned</li>\n<li>add immediate unsigned</li>\n<li>subtract unsigned</li>\n</ul>\n<br>\n<p>only 32 registers, if you dont have space in registers you have to go to memory.\n<br></p>\n<p>transfer from memory to register:</p>\n<p>C code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  int A[100];\n  g = h + A[3];</code></pre></div>\n<p>mips:</p>\n<p>lw = load word</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  lw $t0, 12 ($s3) #Temp reg $t0 gets A[3]\n  add $s1, $s2, $t0 # g = h + A[3]</code></pre></div>\n<br>\n<p>s3 is a pointer to the beginning of the A array</p>\n<p>offset is 12 (offset is in bytes) so it fast fowards 12 bytes in array or 96 bits 96/32 = 3 (32 is size of int) , have to increment base by the size of the datatype.</p>\n<br>\n<p>transfer from register to memory:</p>\n<p>C code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  int A[100];\n  A[10] = h + A[3];</code></pre></div>\n<p>mips:\nsw = store word</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  lw $t0, 12 ($s3) #Temp reg $t0 gets A[3]\n  add $t0, $s2, $t0 # temp reg $t0 gets h + A[3]\n  sw $t0, 40 ($s3) # A[10] = h + A[3]</code></pre></div>\n<br>\n<p>In addition to word data transfers\nmips has byte data transfers:</p>\n<p>-load byte: lb\n-store byte: sb</p>\n<p>same format as lw, sw</p>\n<p>lbu for unsigned.</p>\n<br>\n<p>speed of registers vs. memory</p>\n<p>smaller is faster with registers.\nregisters are 100-500 times faster than memory.</p>\n<p>mips if statement:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  beq register1, register2, L1</code></pre></div>\n<p>means: go to statement L1 if value in register1 == value in register2</p>\n<p>otherwise got to next statement</p>\n<p>beq = branch if equal</p>\n<br>\n<p>branch - change of control flow</p>\n<p>conditional branch - change control flow depending on outcome of comparison</p>\n<br>\n<p>branch if equal (beq) or branch if not equal (bne)</p>\n<br>\n<p>unconditional branch - always branch</p>\n<p>jump (j)</p>\n<h3>L6</h3>\n<p>Machine code is lowest level of software.</p>\n<p>words and vocabulary are called instructions and instruction sets respectively</p>\n<p>mips is example RISC instruction set</p>\n<p>rigid format 1 operation, 2 operands, 1 destination</p>\n<p>example operations:</p>\n<ul>\n<li>add</li>\n<li>sub</li>\n<li>mul</li>\n<li>div</li>\n<li>and</li>\n<li>or</li>\n<li>sll</li>\n<li>srl</li>\n<li>sra</li>\n</ul>\n<p>operations to move data around registers and memory:</p>\n<ul>\n<li>lw</li>\n<li>sw</li>\n<li>lb</li>\n<li>sb</li>\n</ul>\n<p>operations for decision/ flow control:</p>\n<ul>\n<li>beq</li>\n<li>bne</li>\n<li>j</li>\n<li>slt</li>\n<li>slti</li>\n</ul>\n<p>program is stored as a bunch of bytes</p>\n<p>mips instruction 32 bits or 4 bytes</p>\n<p>Assembler converts assembly to machine code.</p>\n<p>assembly code has .S extension machine code object has .o extension</p>\n<p>machine code executable file has a .out extension</p>\n<p>if a branch is false you go to next instruction else you jump to the given instruction (conditional branch).</p>\n<p>unconditional branch: Always go to the “label”</p>\n<p>C code</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  if (i == j)\n    f = g + h;</code></pre></div>\n<p>mips code</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  bne $s3, $s4, Exit # notice this is not equal, if false this goes to next line which is add\n  add $s0, $s1, $s2</code></pre></div>\n<p>C code</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if (i == j)\n  f = g + h;\nelse\n  f = g - h;</code></pre></div>\n<p>mips code</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  bne $s3, $s4, Else\n  add $s0, $s1, $s2\n  j Exit\n  Else: sub $s0, $s1, $s2\n  Exit:</code></pre></div>\n<p>The jump is needed to jump over the else code.</p>\n<h3>L7</h3>\n<h3>L8</h3>\n<h2>LABS</h2>\n<h3>LAB 2</h3>\n<h3>LAB 3</h3>\n<h3>HW 1</h3>\n<h3>HW 2</h3>\n<h3>READINGS</h3>\n<h4>2.1</h4>\n<h3>2.2</h3>\n<h3>2.3</h3>\n<h3>2.5</h3>\n<h3>2.6</h3>\n<h3>2.7</h3>\n<h3>2.8</h3>\n<h3>2.9</h3>\n<h3>2.10</h3>\n<h3>2.12</h3>\n<h3>A.1-A.4</h3>\n<h3>A.6</h3>"}