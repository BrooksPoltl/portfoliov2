{"expireTime":9007200868480498000,"key":"transformer-remark-markdown-html-bfa88f3b19b9bddd97983a229084725b-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>This article is a part of a series where I go through <a href=\"https://teachyourselfcs.com/\">teachyourselfcs</a>.\nIf you would like to start at the beginning start <a href=\"https://bpp.dev/articles/teachyourselfcs/programming/00-getting-started/\">here</a>.</p>\n<h4>LECTURES</h4>\n<h5>L5</h5>\n<p>Assembly language below high level language (MIPS)\n<br>\nAssebler turns assembly code into machine code\n<br>\njob of cpu: execute lost of instructions (primitive operations that the cpu can execute)\n<br>\nExample instruction set architectures:\n<br></p>\n<ul>\n<li>ARM</li>\n<li>x86</li>\n<li>mips</li>\n<li>risc-v</li>\n<li>ibm/motorola powerPC</li>\n<li>intel IA64</li>\n</ul>\n<br>\nAssembly Variables: Registers\n<br>\nsince registers are in hardware there is a limited number, 32 registers in MIPS\n<br>\n<p>32 bits in a register, groups of 32 bits called a word in mips.</p>\n<p>Number refererences: ($0, $1, $2)\nor\nname references: ($s0-$s7, $t0-$t7) c variables and temporary variiables</p>\n<h5>L6</h5>\n<h5>L7</h5>\n<h5>L8</h5>\n<h4>LABS</h4>\n<h5>LAB 2</h5>\n<h5>LAB 3</h5>\n<h4>HW 1</h4>\n<h4>HW 2</h4>\n<h4>READINGS</h4>\n<h5>2.1</h5>\n<h5>2.2</h5>\n<h5>2.3</h5>\n<h5>2.5</h5>\n<h5>2.6</h5>\n<h5>2.7</h5>\n<h5>2.8</h5>\n<h5>2.9</h5>\n<h5>2.10</h5>\n<h5>2.12</h5>\n<h5>A.1-A.4</h5>\n<h5>A.6</h5>"}