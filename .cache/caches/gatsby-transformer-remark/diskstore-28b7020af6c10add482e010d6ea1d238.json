{"expireTime":9007200876335774000,"key":"transformer-remark-markdown-ast-f63fa1584ee4a1c39f01e75db77db096-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Functional Programming Concepts","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":35,"offset":35},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":35,"offset":35},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Pure Functions","position":{"start":{"line":4,"column":5,"offset":41},"end":{"line":4,"column":19,"offset":55},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":37},"end":{"line":4,"column":19,"offset":55},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Pure functions are functions that will get the same return value given the same inputs.\n","position":{"start":{"line":6,"column":1,"offset":57},"end":{"line":7,"column":1,"offset":145},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":7,"column":1,"offset":145},"end":{"line":7,"column":5,"offset":149},"indent":[]}},{"type":"text","value":"\nfor example:","position":{"start":{"line":7,"column":5,"offset":149},"end":{"line":8,"column":13,"offset":162},"indent":[1]}}],"position":{"start":{"line":6,"column":1,"offset":57},"end":{"line":8,"column":13,"offset":162},"indent":[1,1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  function square(a) {\n    return a ** 2\n  }</code></pre></div>","position":{"start":{"line":10,"column":1,"offset":164},"end":{"line":14,"column":4,"offset":216},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we call ","position":{"start":{"line":16,"column":1,"offset":218},"end":{"line":16,"column":12,"offset":229},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">square(2)</code>","position":{"start":{"line":16,"column":12,"offset":229},"end":{"line":16,"column":23,"offset":240},"indent":[]}},{"type":"text","value":" we will always get back 4. Pure functions are easily testable because they don’t require any dependencies and we can just throw things into the input and test the output with very low overhead. The low overhead makes it really easy to test for multiple edge cases and also makes the test faster and scalable.","position":{"start":{"line":16,"column":23,"offset":240},"end":{"line":16,"column":332,"offset":549},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":218},"end":{"line":16,"column":332,"offset":549},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Side Effects","position":{"start":{"line":18,"column":6,"offset":556},"end":{"line":18,"column":18,"offset":568},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":551},"end":{"line":18,"column":18,"offset":568},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Side effects are things that prevent a function from returning the same output, these are “dependencies” that the function needs to know for the output.\n","position":{"start":{"line":20,"column":1,"offset":570},"end":{"line":21,"column":1,"offset":723},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":21,"column":1,"offset":723},"end":{"line":21,"column":5,"offset":727},"indent":[]}},{"type":"text","value":"\nfor example:","position":{"start":{"line":21,"column":5,"offset":727},"end":{"line":22,"column":13,"offset":740},"indent":[1]}}],"position":{"start":{"line":20,"column":1,"offset":570},"end":{"line":22,"column":13,"offset":740},"indent":[1,1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  function square() {\n    const a = getNumberFromTheDatabase();\n    return a ** 2\n  }</code></pre></div>","position":{"start":{"line":24,"column":1,"offset":742},"end":{"line":29,"column":4,"offset":835},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are calling square and the output is dependent on the number we get back from the database, if that number changes our output changes despite having the same input.\nIf we wanted to test the logic in this case (squaring) we would have to stub out the function call to the database.","position":{"start":{"line":31,"column":1,"offset":837},"end":{"line":32,"column":116,"offset":1125},"indent":[1]}}],"position":{"start":{"line":31,"column":1,"offset":837},"end":{"line":32,"column":116,"offset":1125},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Mutability","position":{"start":{"line":34,"column":5,"offset":1131},"end":{"line":34,"column":15,"offset":1141},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1127},"end":{"line":34,"column":15,"offset":1141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Mutability in programming is the ability to change the data.","position":{"start":{"line":36,"column":1,"offset":1143},"end":{"line":36,"column":61,"offset":1203},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1143},"end":{"line":36,"column":61,"offset":1203},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"for example:","position":{"start":{"line":38,"column":1,"offset":1205},"end":{"line":38,"column":13,"offset":1217},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1205},"end":{"line":38,"column":13,"offset":1217},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  let i = 0;\n  i = 1;</code></pre></div>","position":{"start":{"line":40,"column":1,"offset":1219},"end":{"line":43,"column":4,"offset":1248},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second line reassigns the variable i. Reassignment should be avoided as much as possible because it makes the code a lot harder to read. When code has a lot of reassignment its hard for the programmer to tell what a variable is at a given point.","position":{"start":{"line":45,"column":1,"offset":1250},"end":{"line":45,"column":250,"offset":1499},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1250},"end":{"line":45,"column":250,"offset":1499},"indent":[]}},{"type":"html","value":"<br>","position":{"start":{"line":47,"column":1,"offset":1501},"end":{"line":47,"column":5,"offset":1505},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example of how to avoid reassignment:","position":{"start":{"line":49,"column":1,"offset":1507},"end":{"line":49,"column":38,"offset":1544},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1507},"end":{"line":49,"column":38,"offset":1544},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lets say you have an object of an article and you want to publish it.","position":{"start":{"line":51,"column":1,"offset":1546},"end":{"line":51,"column":70,"offset":1615},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1546},"end":{"line":51,"column":70,"offset":1615},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  const article = {\n    text: &#39;&#39;,\n    isPublished: false\n  }</code></pre></div>","position":{"start":{"line":53,"column":1,"offset":1617},"end":{"line":58,"column":4,"offset":1685},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You might want to use reassignment here to modify the article object, but trying to avoid reassignment how can we do this functionally?","position":{"start":{"line":60,"column":1,"offset":1687},"end":{"line":60,"column":136,"offset":1822},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1687},"end":{"line":60,"column":136,"offset":1822},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  const article = {\n    text: &#39;&#39;,\n    isPublished: false\n  }\n\n  function publishArticle(a) {\n    return {...a, isPublished: true }\n  }\n\n  const publishedArticle = publishArticle(article);</code></pre></div>","position":{"start":{"line":62,"column":1,"offset":1824},"end":{"line":73,"column":4,"offset":2019},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here instead of modifying the article object we are creating a new object with isPublished set to true. Creating new data to change data is very common in functional programming. Elixir does\nthis a lot since it is immutable.","position":{"start":{"line":75,"column":1,"offset":2021},"end":{"line":76,"column":34,"offset":2245},"indent":[1]}}],"position":{"start":{"line":75,"column":1,"offset":2021},"end":{"line":76,"column":34,"offset":2245},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"First Class Functions","position":{"start":{"line":78,"column":5,"offset":2251},"end":{"line":78,"column":26,"offset":2272},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2247},"end":{"line":78,"column":26,"offset":2272},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First class functions are when functions are treated just like any other variable.","position":{"start":{"line":80,"column":1,"offset":2274},"end":{"line":80,"column":83,"offset":2356},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2274},"end":{"line":80,"column":83,"offset":2356},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"for example lets look at the new arrow syntax.","position":{"start":{"line":82,"column":1,"offset":2358},"end":{"line":82,"column":47,"offset":2404},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2358},"end":{"line":82,"column":47,"offset":2404},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  const square = (a) =&gt; {\n    return a ** 2\n  }</code></pre></div>","position":{"start":{"line":84,"column":1,"offset":2406},"end":{"line":88,"column":4,"offset":2461},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The left side of this assignment looks just like any other assignment we would do for a number or an array.\nFirst class functions also means that you can pass functions as variables to other functions.","position":{"start":{"line":90,"column":1,"offset":2463},"end":{"line":91,"column":94,"offset":2664},"indent":[1]}}],"position":{"start":{"line":90,"column":1,"offset":2463},"end":{"line":91,"column":94,"offset":2664},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"For Example:","position":{"start":{"line":93,"column":1,"offset":2666},"end":{"line":93,"column":13,"offset":2678},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2666},"end":{"line":93,"column":13,"offset":2678},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  const callback = () =&gt; {\n    console.log(&#39;Hi&#39;);\n  }\n\n  const greet = (name, cb) =&gt; {\n    cb();\n    console.log(name);\n  }\n  greet(&#39;you&#39;, callback);</code></pre></div>","position":{"start":{"line":95,"column":1,"offset":2680},"end":{"line":105,"column":4,"offset":2837},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are passing in the callback function as a parameter to the greet function just like any other variable.","position":{"start":{"line":107,"column":1,"offset":2839},"end":{"line":107,"column":112,"offset":2950},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":2839},"end":{"line":107,"column":112,"offset":2950},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Lambda","position":{"start":{"line":109,"column":5,"offset":2956},"end":{"line":109,"column":11,"offset":2962},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":2952},"end":{"line":109,"column":11,"offset":2962},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Object Oriented Programming","position":{"start":{"line":111,"column":4,"offset":2967},"end":{"line":111,"column":31,"offset":2994},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":2964},"end":{"line":111,"column":31,"offset":2994},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":112,"column":1,"offset":2995}}}}