{"expireTime":9007200842248534000,"key":"transformer-remark-markdown-html-ast-138e69fb0f7acb5c11bfbf3067776476-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54}}},{"type":"element","tagName":"a","properties":{"href":"https://teachyourselfcs.com/"},"children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70}}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101}}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153}}},{"type":"element","tagName":"a","properties":{"href":"http://localhost:8000/teachyourselfcs/programming/00:getting-started/"},"children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158}}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":128,"offset":230}}},{"type":"text","value":".","position":{"start":{"line":2,"column":128,"offset":230},"end":{"line":2,"column":129,"offset":231}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":129,"offset":231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"INTRO","position":{"start":{"line":4,"column":6,"offset":238},"end":{"line":4,"column":11,"offset":243}}}],"position":{"start":{"line":4,"column":1,"offset":233},"end":{"line":4,"column":11,"offset":243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I will be following the Summer 2010 ","position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":5,"column":37,"offset":280}}},{"type":"element","tagName":"a","properties":{"href":"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html"},"children":[{"type":"text","value":"Calendar","position":{"start":{"line":5,"column":38,"offset":281},"end":{"line":5,"column":46,"offset":289}}}],"position":{"start":{"line":5,"column":37,"offset":280},"end":{"line":5,"column":101,"offset":344}}},{"type":"text","value":"\nso each week will consist of 4 lectures and 2 labs.","position":{"start":{"line":5,"column":101,"offset":344},"end":{"line":6,"column":52,"offset":396}}}],"position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":6,"column":52,"offset":396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"READINGS","position":{"start":{"line":8,"column":6,"offset":403},"end":{"line":8,"column":14,"offset":411}}}],"position":{"start":{"line":8,"column":1,"offset":398},"end":{"line":8,"column":14,"offset":411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.1 The Elements of Programming","position":{"start":{"line":9,"column":7,"offset":418},"end":{"line":9,"column":38,"offset":449}}}],"position":{"start":{"line":9,"column":1,"offset":412},"end":{"line":9,"column":38,"offset":449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The section starts off saying that there are 3 mechanisms that languages utilize to simplify complex ideas:\n","position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":11,"column":1,"offset":558}}},{"type":"raw","value":"<br>","position":{"start":{"line":11,"column":1,"offset":558},"end":{"line":11,"column":5,"offset":562}}},{"type":"text","value":"\nprimitive expressions: simplest entities within a language.\n","position":{"start":{"line":11,"column":5,"offset":562},"end":{"line":13,"column":1,"offset":623}}},{"type":"raw","value":"<br>","position":{"start":{"line":13,"column":1,"offset":623},"end":{"line":13,"column":5,"offset":627}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":5,"offset":627},"end":{"line":14,"column":1,"offset":628}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":1,"offset":628},"end":{"line":14,"column":5,"offset":632}}}],"position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":14,"column":5,"offset":632}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"means of combination: The ability to combine simplest entities.\n","position":{"start":{"line":15,"column":3,"offset":635},"end":{"line":16,"column":1,"offset":700}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":1,"offset":700},"end":{"line":16,"column":5,"offset":704}}},{"type":"text","value":"\n","position":{"start":{"line":16,"column":5,"offset":704},"end":{"line":17,"column":1,"offset":705}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":1,"offset":705},"end":{"line":17,"column":5,"offset":709}}}],"position":{"start":{"line":15,"column":1,"offset":633},"end":{"line":17,"column":5,"offset":709}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"means of abstraction","position":{"start":{"line":18,"column":3,"offset":712},"end":{"line":18,"column":23,"offset":732}}}],"position":{"start":{"line":18,"column":3,"offset":712},"end":{"line":18,"column":23,"offset":732}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.2","position":{"start":{"line":19,"column":7,"offset":739},"end":{"line":19,"column":10,"offset":742}}}],"position":{"start":{"line":19,"column":1,"offset":733},"end":{"line":19,"column":10,"offset":742}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.3","position":{"start":{"line":20,"column":7,"offset":749},"end":{"line":20,"column":10,"offset":752}}}],"position":{"start":{"line":20,"column":1,"offset":743},"end":{"line":20,"column":10,"offset":752}}},{"type":"text","value":"\n"}],"position":{"start":{"line":18,"column":1,"offset":710},"end":{"line":20,"column":10,"offset":752}}},{"type":"text","value":"\n"}],"position":{"start":{"line":15,"column":1,"offset":633},"end":{"line":20,"column":10,"offset":752}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":22,"column":6,"offset":759},"end":{"line":22,"column":14,"offset":767}}}],"position":{"start":{"line":22,"column":1,"offset":754},"end":{"line":22,"column":14,"offset":767}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L01","position":{"start":{"line":23,"column":7,"offset":774},"end":{"line":23,"column":10,"offset":777}}}],"position":{"start":{"line":23,"column":1,"offset":768},"end":{"line":23,"column":10,"offset":777}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":25,"column":8,"offset":786},"end":{"line":25,"column":30,"offset":808}}}],"position":{"start":{"line":25,"column":1,"offset":779},"end":{"line":25,"column":30,"offset":808}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":27,"column":1,"offset":810},"end":{"line":28,"column":1,"offset":954}}},{"type":"raw","value":"<br>","position":{"start":{"line":28,"column":1,"offset":954},"end":{"line":28,"column":5,"offset":958}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":28,"column":5,"offset":958},"end":{"line":28,"column":16,"offset":969}}},{"type":"raw","value":"<br>","position":{"start":{"line":28,"column":16,"offset":969},"end":{"line":28,"column":20,"offset":973}}},{"type":"text","value":"\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n","position":{"start":{"line":28,"column":20,"offset":973},"end":{"line":30,"column":1,"offset":1117}}},{"type":"raw","value":"<br>","position":{"start":{"line":30,"column":1,"offset":1117},"end":{"line":30,"column":5,"offset":1121}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":30,"column":5,"offset":1121},"end":{"line":30,"column":16,"offset":1132}}},{"type":"raw","value":"<br>","position":{"start":{"line":30,"column":16,"offset":1132},"end":{"line":30,"column":20,"offset":1136}}},{"type":"text","value":"\nNow lets say we want to do something like:  ","position":{"start":{"line":30,"column":20,"offset":1136},"end":{"line":31,"column":45,"offset":1181}}},{"type":"raw","value":"<br>","position":{"start":{"line":31,"column":45,"offset":1181},"end":{"line":31,"column":49,"offset":1185}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 +  3 - 4</code>","position":{"start":{"line":31,"column":49,"offset":1185},"end":{"line":31,"column":65,"offset":1201}}},{"type":"raw","value":"<br>","position":{"start":{"line":31,"column":65,"offset":1201},"end":{"line":31,"column":69,"offset":1205}}},{"type":"text","value":"\nIn Scheme you can simply nest operators:\n","position":{"start":{"line":31,"column":69,"offset":1205},"end":{"line":33,"column":1,"offset":1248}}},{"type":"raw","value":"<br>","position":{"start":{"line":33,"column":1,"offset":1248},"end":{"line":33,"column":5,"offset":1252}}},{"type":"raw","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":33,"column":5,"offset":1252},"end":{"line":33,"column":22,"offset":1269}}},{"type":"raw","value":"<br>","position":{"start":{"line":33,"column":22,"offset":1269},"end":{"line":33,"column":26,"offset":1273}}},{"type":"text","value":"\n","position":{"start":{"line":33,"column":26,"offset":1273},"end":{"line":34,"column":1,"offset":1274}}},{"type":"raw","value":"<br>","position":{"start":{"line":34,"column":1,"offset":1274},"end":{"line":34,"column":5,"offset":1278}}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer.\n","position":{"start":{"line":34,"column":5,"offset":1278},"end":{"line":36,"column":1,"offset":1396}}},{"type":"raw","value":"<br>","position":{"start":{"line":36,"column":1,"offset":1396},"end":{"line":36,"column":5,"offset":1400}}},{"type":"text","value":"\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value.\n","position":{"start":{"line":36,"column":5,"offset":1400},"end":{"line":38,"column":1,"offset":1521}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":38,"column":1,"offset":1521},"end":{"line":38,"column":12,"offset":1532}}},{"type":"text","value":" is a expression and not a primitive value, so it calls ","position":{"start":{"line":38,"column":12,"offset":1532},"end":{"line":38,"column":68,"offset":1588}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":38,"column":68,"offset":1588},"end":{"line":38,"column":79,"offset":1599}}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":38,"column":79,"offset":1599},"end":{"line":38,"column":106,"offset":1626}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":38,"column":106,"offset":1626},"end":{"line":38,"column":109,"offset":1629}}},{"type":"text","value":" is now 7 and both arguments are primitive values, meaning it can calculate the ","position":{"start":{"line":38,"column":109,"offset":1629},"end":{"line":38,"column":189,"offset":1709}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":38,"column":189,"offset":1709},"end":{"line":38,"column":192,"offset":1712}}},{"type":"text","value":" to get 3.","position":{"start":{"line":38,"column":192,"offset":1712},"end":{"line":38,"column":202,"offset":1722}}}],"position":{"start":{"line":27,"column":1,"offset":810},"end":{"line":38,"column":202,"offset":1722}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Define","position":{"start":{"line":40,"column":8,"offset":1731},"end":{"line":40,"column":14,"offset":1737}}}],"position":{"start":{"line":40,"column":1,"offset":1724},"end":{"line":40,"column":14,"offset":1737}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":41,"column":1,"offset":1738},"end":{"line":41,"column":9,"offset":1746}}},{"type":"text","value":" is an interesting keyword. It can be used to create functions: ","position":{"start":{"line":41,"column":9,"offset":1746},"end":{"line":41,"column":73,"offset":1810}}}],"position":{"start":{"line":41,"column":1,"offset":1738},"end":{"line":41,"column":73,"offset":1810}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":42,"column":1,"offset":1811},"end":{"line":45,"column":4,"offset":1850}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":46,"column":1,"offset":1851},"end":{"line":46,"column":5,"offset":1855}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The syntax is very different from other languages, but try to think of ","position":{"start":{"line":48,"column":1,"offset":1857},"end":{"line":48,"column":72,"offset":1928}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":48,"column":72,"offset":1928},"end":{"line":48,"column":80,"offset":1936}}},{"type":"text","value":" as a function itself.\n","position":{"start":{"line":48,"column":80,"offset":1936},"end":{"line":49,"column":1,"offset":1960}}},{"type":"raw","value":"<br>","position":{"start":{"line":49,"column":1,"offset":1960},"end":{"line":49,"column":5,"offset":1964}}},{"type":"text","value":"\n","position":{"start":{"line":49,"column":5,"offset":1964},"end":{"line":50,"column":1,"offset":1965}}},{"type":"raw","value":"<br>","position":{"start":{"line":50,"column":1,"offset":1965},"end":{"line":50,"column":5,"offset":1969}}},{"type":"text","value":"\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case ","position":{"start":{"line":50,"column":5,"offset":1969},"end":{"line":51,"column":184,"offset":2153}}},{"type":"raw","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":51,"column":184,"offset":2153},"end":{"line":51,"column":187,"offset":2156}}},{"type":"text","value":".\n","position":{"start":{"line":51,"column":187,"offset":2156},"end":{"line":52,"column":1,"offset":2159}}},{"type":"raw","value":"<br>","position":{"start":{"line":52,"column":1,"offset":2159},"end":{"line":52,"column":5,"offset":2163}}},{"type":"text","value":"\n","position":{"start":{"line":52,"column":5,"offset":2163},"end":{"line":53,"column":1,"offset":2164}}},{"type":"raw","value":"<br>","position":{"start":{"line":53,"column":1,"offset":2164},"end":{"line":53,"column":5,"offset":2168}}},{"type":"text","value":"\nThe second parameter that ","position":{"start":{"line":53,"column":5,"offset":2168},"end":{"line":54,"column":27,"offset":2195}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":54,"column":27,"offset":2195},"end":{"line":54,"column":35,"offset":2203}}},{"type":"text","value":" takes in is the body that the procedure will call ","position":{"start":{"line":54,"column":35,"offset":2203},"end":{"line":54,"column":86,"offset":2254}}},{"type":"raw","value":"<code class=\"language-text\">(* x x)</code>","position":{"start":{"line":54,"column":86,"offset":2254},"end":{"line":54,"column":95,"offset":2263}}},{"type":"text","value":". ","position":{"start":{"line":54,"column":95,"offset":2263},"end":{"line":54,"column":97,"offset":2265}}}],"position":{"start":{"line":48,"column":1,"offset":1857},"end":{"line":54,"column":97,"offset":2265}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br> ","position":{"start":{"line":56,"column":1,"offset":2267},"end":{"line":56,"column":6,"offset":2272}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define can also be used to store constants:\n","position":{"start":{"line":58,"column":1,"offset":2274},"end":{"line":59,"column":1,"offset":2318}}},{"type":"raw","value":"<br>","position":{"start":{"line":59,"column":1,"offset":2318},"end":{"line":59,"column":5,"offset":2322}}},{"type":"text","value":"\n","position":{"start":{"line":59,"column":5,"offset":2322},"end":{"line":60,"column":1,"offset":2323}}},{"type":"raw","value":"<code class=\"language-text\">(define pi 3.14159)</code>","position":{"start":{"line":60,"column":1,"offset":2323},"end":{"line":60,"column":22,"offset":2344}}},{"type":"text","value":"\n","position":{"start":{"line":60,"column":22,"offset":2344},"end":{"line":61,"column":1,"offset":2345}}},{"type":"raw","value":"<br>","position":{"start":{"line":61,"column":1,"offset":2345},"end":{"line":61,"column":5,"offset":2349}}}],"position":{"start":{"line":58,"column":1,"offset":2274},"end":{"line":61,"column":5,"offset":2349}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.","position":{"start":{"line":63,"column":1,"offset":2351},"end":{"line":63,"column":152,"offset":2502}}}],"position":{"start":{"line":63,"column":1,"offset":2351},"end":{"line":63,"column":152,"offset":2502}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":65,"column":8,"offset":2511},"end":{"line":65,"column":20,"offset":2523}}}],"position":{"start":{"line":65,"column":1,"offset":2504},"end":{"line":65,"column":20,"offset":2523}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the first example of a program we see in class:","position":{"start":{"line":67,"column":1,"offset":2525},"end":{"line":67,"column":56,"offset":2580}}}],"position":{"start":{"line":67,"column":1,"offset":2525},"end":{"line":67,"column":56,"offset":2580}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>","position":{"start":{"line":68,"column":1,"offset":2581},"end":{"line":73,"column":4,"offset":2672}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":74,"column":1,"offset":2673},"end":{"line":74,"column":5,"offset":2677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you’ve probably already guessed, ","position":{"start":{"line":76,"column":1,"offset":2679},"end":{"line":76,"column":37,"offset":2715}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":76,"column":37,"offset":2715},"end":{"line":76,"column":41,"offset":2719}}},{"type":"text","value":" is a function.\n","position":{"start":{"line":76,"column":41,"offset":2719},"end":{"line":77,"column":1,"offset":2736}}},{"type":"raw","value":"<br>","position":{"start":{"line":77,"column":1,"offset":2736},"end":{"line":77,"column":5,"offset":2740}}},{"type":"text","value":"\n","position":{"start":{"line":77,"column":5,"offset":2740},"end":{"line":78,"column":1,"offset":2741}}},{"type":"raw","value":"<br>","position":{"start":{"line":78,"column":1,"offset":2741},"end":{"line":78,"column":5,"offset":2745}}},{"type":"text","value":"\nThe first parameter is the test case for example if we input fly ","position":{"start":{"line":78,"column":5,"offset":2745},"end":{"line":79,"column":66,"offset":2811}}},{"type":"raw","value":"<code class=\"language-text\">(equal? (last wd) &#39;y)</code>","position":{"start":{"line":79,"column":66,"offset":2811},"end":{"line":79,"column":89,"offset":2834}}},{"type":"text","value":" would be true, because fly ends in y.\n","position":{"start":{"line":79,"column":89,"offset":2834},"end":{"line":80,"column":1,"offset":2874}}},{"type":"raw","value":"<br>","position":{"start":{"line":80,"column":1,"offset":2874},"end":{"line":80,"column":5,"offset":2878}}},{"type":"text","value":"\n","position":{"start":{"line":80,"column":5,"offset":2878},"end":{"line":81,"column":1,"offset":2879}}},{"type":"raw","value":"<br>","position":{"start":{"line":81,"column":1,"offset":2879},"end":{"line":81,"column":5,"offset":2883}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":81,"column":5,"offset":2883},"end":{"line":82,"column":21,"offset":2904}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":82,"column":21,"offset":2904},"end":{"line":82,"column":25,"offset":2908}}},{"type":"text","value":" takes in is the expression if the test case is true.\n","position":{"start":{"line":82,"column":25,"offset":2908},"end":{"line":83,"column":1,"offset":2962}}},{"type":"raw","value":"<br>","position":{"start":{"line":83,"column":1,"offset":2962},"end":{"line":83,"column":5,"offset":2966}}},{"type":"text","value":"\n","position":{"start":{"line":83,"column":5,"offset":2966},"end":{"line":84,"column":1,"offset":2967}}},{"type":"raw","value":"<br>","position":{"start":{"line":84,"column":1,"offset":2967},"end":{"line":84,"column":5,"offset":2971}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":84,"column":5,"offset":2971},"end":{"line":85,"column":21,"offset":2992}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":85,"column":21,"offset":2992},"end":{"line":85,"column":25,"offset":2996}}},{"type":"text","value":" takes in is the expression if the test case is false.\n","position":{"start":{"line":85,"column":25,"offset":2996},"end":{"line":86,"column":1,"offset":3051}}},{"type":"raw","value":"<br>","position":{"start":{"line":86,"column":1,"offset":3051},"end":{"line":86,"column":5,"offset":3055}}},{"type":"text","value":"\n","position":{"start":{"line":86,"column":5,"offset":3055},"end":{"line":87,"column":1,"offset":3056}}},{"type":"raw","value":"<br>","position":{"start":{"line":87,"column":1,"offset":3056},"end":{"line":87,"column":5,"offset":3060}}},{"type":"text","value":"\nAlso worth noting that names that return a boolean add a ","position":{"start":{"line":87,"column":5,"offset":3060},"end":{"line":88,"column":58,"offset":3118}}},{"type":"raw","value":"<code class=\"language-text\">?</code>","position":{"start":{"line":88,"column":58,"offset":3118},"end":{"line":88,"column":61,"offset":3121}}},{"type":"text","value":" to the end to show that the primitive returned is true or false. Like how equal is ","position":{"start":{"line":88,"column":61,"offset":3121},"end":{"line":88,"column":145,"offset":3205}}},{"type":"raw","value":"<code class=\"language-text\">equal?</code>","position":{"start":{"line":88,"column":145,"offset":3205},"end":{"line":88,"column":153,"offset":3213}}},{"type":"text","value":" in the code block above.","position":{"start":{"line":88,"column":153,"offset":3213},"end":{"line":88,"column":178,"offset":3238}}}],"position":{"start":{"line":76,"column":1,"offset":2679},"end":{"line":88,"column":178,"offset":3238}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L02","position":{"start":{"line":90,"column":7,"offset":3246},"end":{"line":90,"column":10,"offset":3249}}}],"position":{"start":{"line":90,"column":1,"offset":3240},"end":{"line":90,"column":10,"offset":3249}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Recursion","position":{"start":{"line":92,"column":8,"offset":3258},"end":{"line":92,"column":17,"offset":3267}}}],"position":{"start":{"line":92,"column":1,"offset":3251},"end":{"line":92,"column":17,"offset":3267}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":93,"column":1,"offset":3268},"end":{"line":104,"column":4,"offset":3467}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":105,"column":1,"offset":3468},"end":{"line":105,"column":5,"offset":3472}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n","position":{"start":{"line":107,"column":1,"offset":3474},"end":{"line":108,"column":1,"offset":3690}}},{"type":"raw","value":"<br>","position":{"start":{"line":108,"column":1,"offset":3690},"end":{"line":108,"column":5,"offset":3694}}},{"type":"text","value":"\n","position":{"start":{"line":108,"column":5,"offset":3694},"end":{"line":109,"column":1,"offset":3695}}},{"type":"raw","value":"<br>","position":{"start":{"line":109,"column":1,"offset":3695},"end":{"line":109,"column":5,"offset":3699}}},{"type":"text","value":"\nNotice in the above example from lecture the function calls pigl until ","position":{"start":{"line":109,"column":5,"offset":3699},"end":{"line":110,"column":72,"offset":3771}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":110,"column":72,"offset":3771},"end":{"line":110,"column":81,"offset":3780}}},{"type":"text","value":" is equal to true.\n","position":{"start":{"line":110,"column":81,"offset":3780},"end":{"line":111,"column":1,"offset":3799}}},{"type":"raw","value":"<br>","position":{"start":{"line":111,"column":1,"offset":3799},"end":{"line":111,"column":5,"offset":3803}}},{"type":"text","value":"\n","position":{"start":{"line":111,"column":5,"offset":3803},"end":{"line":112,"column":1,"offset":3804}}},{"type":"raw","value":"<br>","position":{"start":{"line":112,"column":1,"offset":3804},"end":{"line":112,"column":5,"offset":3808}}},{"type":"text","value":"\nLets say ","position":{"start":{"line":112,"column":5,"offset":3808},"end":{"line":113,"column":10,"offset":3818}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":113,"column":10,"offset":3818},"end":{"line":113,"column":16,"offset":3824}}},{"type":"text","value":" gets called with ","position":{"start":{"line":113,"column":16,"offset":3824},"end":{"line":113,"column":34,"offset":3842}}},{"type":"raw","value":"<code class=\"language-text\">scheme</code>","position":{"start":{"line":113,"column":34,"offset":3842},"end":{"line":113,"column":42,"offset":3850}}},{"type":"text","value":".\nThe conditional checks ","position":{"start":{"line":113,"column":42,"offset":3850},"end":{"line":114,"column":24,"offset":3875}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":114,"column":24,"offset":3875},"end":{"line":114,"column":33,"offset":3884}}},{"type":"text","value":" which checks the first letter in the word to see if it is a vowel. Since ","position":{"start":{"line":114,"column":33,"offset":3884},"end":{"line":114,"column":107,"offset":3958}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":114,"column":107,"offset":3958},"end":{"line":114,"column":116,"offset":3967}}},{"type":"text","value":" is false because ","position":{"start":{"line":114,"column":116,"offset":3967},"end":{"line":114,"column":134,"offset":3985}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":114,"column":134,"offset":3985},"end":{"line":114,"column":137,"offset":3988}}},{"type":"text","value":" isn’t a vowel it calls ","position":{"start":{"line":114,"column":137,"offset":3988},"end":{"line":114,"column":161,"offset":4012}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":114,"column":161,"offset":4012},"end":{"line":114,"column":167,"offset":4018}}},{"type":"text","value":" again with the argument ","position":{"start":{"line":114,"column":167,"offset":4018},"end":{"line":114,"column":192,"offset":4043}}},{"type":"raw","value":"<code class=\"language-text\">chemes</code>","position":{"start":{"line":114,"column":192,"offset":4043},"end":{"line":114,"column":200,"offset":4051}}},{"type":"text","value":". This is because ","position":{"start":{"line":114,"column":200,"offset":4051},"end":{"line":114,"column":218,"offset":4069}}},{"type":"raw","value":"<code class=\"language-text\">word</code>","position":{"start":{"line":114,"column":218,"offset":4069},"end":{"line":114,"column":224,"offset":4075}}},{"type":"text","value":" takes the arguments ","position":{"start":{"line":114,"column":224,"offset":4075},"end":{"line":114,"column":245,"offset":4096}}},{"type":"raw","value":"<code class=\"language-text\">cheme</code>","position":{"start":{"line":114,"column":245,"offset":4096},"end":{"line":114,"column":252,"offset":4103}}},{"type":"text","value":" and ","position":{"start":{"line":114,"column":252,"offset":4103},"end":{"line":114,"column":257,"offset":4108}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":114,"column":257,"offset":4108},"end":{"line":114,"column":260,"offset":4111}}},{"type":"text","value":" and adds them together. ","position":{"start":{"line":114,"column":260,"offset":4111},"end":{"line":114,"column":285,"offset":4136}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":114,"column":285,"offset":4136},"end":{"line":114,"column":291,"offset":4142}}},{"type":"text","value":" gets called repeatedly until\nit is called with a vowel as the first letter. When the first letter is a vowel the expression ","position":{"start":{"line":114,"column":291,"offset":4142},"end":{"line":115,"column":96,"offset":4268}}},{"type":"raw","value":"<code class=\"language-text\">(word wd &#39;ay)</code>","position":{"start":{"line":115,"column":96,"offset":4268},"end":{"line":115,"column":111,"offset":4283}}},{"type":"text","value":" is ran and the result is a primitive which means the procedure stops. ","position":{"start":{"line":115,"column":111,"offset":4283},"end":{"line":115,"column":182,"offset":4354}}}],"position":{"start":{"line":107,"column":1,"offset":3474},"end":{"line":115,"column":182,"offset":4354}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":117,"column":8,"offset":4363},"end":{"line":117,"column":19,"offset":4374}}}],"position":{"start":{"line":117,"column":1,"offset":4356},"end":{"line":117,"column":19,"offset":4374}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Big Picture: ","position":{"start":{"line":118,"column":1,"offset":4375},"end":{"line":118,"column":14,"offset":4388}}}],"position":{"start":{"line":118,"column":1,"offset":4375},"end":{"line":118,"column":14,"offset":4388}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>","position":{"start":{"line":119,"column":1,"offset":4389},"end":{"line":134,"column":4,"offset":4804}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":135,"column":1,"offset":4805},"end":{"line":135,"column":5,"offset":4809}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that can be referenced as a whole.","position":{"start":{"line":137,"column":1,"offset":4811},"end":{"line":137,"column":141,"offset":4951}}}],"position":{"start":{"line":137,"column":1,"offset":4811},"end":{"line":137,"column":141,"offset":4951}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Functional Programming","position":{"start":{"line":139,"column":8,"offset":4960},"end":{"line":139,"column":30,"offset":4982}}}],"position":{"start":{"line":139,"column":1,"offset":4953},"end":{"line":139,"column":30,"offset":4982}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the introduction of multi-core processers, parallelism has helped functional programming make a comeback. If everything is a function you won’t run into race conditions created by dependencies.","position":{"start":{"line":140,"column":1,"offset":4983},"end":{"line":140,"column":199,"offset":5181}}}],"position":{"start":{"line":140,"column":1,"offset":4983},"end":{"line":140,"column":199,"offset":5181}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Function vs. Procedure","position":{"start":{"line":142,"column":8,"offset":5190},"end":{"line":142,"column":30,"offset":5212}}}],"position":{"start":{"line":142,"column":1,"offset":5183},"end":{"line":142,"column":30,"offset":5212}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Two functions are the same if they give the same output with given inputs.\n","position":{"start":{"line":144,"column":1,"offset":5214},"end":{"line":145,"column":1,"offset":5289}}},{"type":"raw","value":"<br>","position":{"start":{"line":145,"column":1,"offset":5289},"end":{"line":145,"column":5,"offset":5293}}},{"type":"text","value":"\n","position":{"start":{"line":145,"column":5,"offset":5293},"end":{"line":146,"column":1,"offset":5294}}},{"type":"raw","value":"<br>","position":{"start":{"line":146,"column":1,"offset":5294},"end":{"line":146,"column":5,"offset":5298}}},{"type":"text","value":"\nA procedure is a sequence of steps for computing a function.\n","position":{"start":{"line":146,"column":5,"offset":5298},"end":{"line":148,"column":1,"offset":5360}}},{"type":"raw","value":"<br>","position":{"start":{"line":148,"column":1,"offset":5360},"end":{"line":148,"column":5,"offset":5364}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":148,"column":5,"offset":5364},"end":{"line":149,"column":1,"offset":5367}}},{"type":"text","value":"\n"},{"type":"text","value":"Therefore ","position":{"start":{"line":149,"column":1,"offset":5367},"end":{"line":149,"column":11,"offset":5377}}},{"type":"raw","value":"<code class=\"language-text\">2x + 6</code>","position":{"start":{"line":149,"column":11,"offset":5377},"end":{"line":149,"column":19,"offset":5385}}},{"type":"text","value":" and ","position":{"start":{"line":149,"column":19,"offset":5385},"end":{"line":149,"column":24,"offset":5390}}},{"type":"raw","value":"<code class=\"language-text\">2(x + 3)</code>","position":{"start":{"line":149,"column":24,"offset":5390},"end":{"line":149,"column":34,"offset":5400}}},{"type":"text","value":" are the same function but different procedures.\n","position":{"start":{"line":149,"column":34,"offset":5400},"end":{"line":150,"column":1,"offset":5449}}},{"type":"raw","value":"<br>","position":{"start":{"line":150,"column":1,"offset":5449},"end":{"line":150,"column":5,"offset":5453}}}],"position":{"start":{"line":144,"column":1,"offset":5214},"end":{"line":150,"column":5,"offset":5453}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Cond","position":{"start":{"line":152,"column":8,"offset":5462},"end":{"line":152,"column":12,"offset":5466}}}],"position":{"start":{"line":152,"column":1,"offset":5455},"end":{"line":152,"column":12,"offset":5466}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (buzz n) \n    (cond ((equal? (remainder n 7) 0) &#39;buzz)\n    ((member? 7 n) &#39;buzz)\n    (else n)))</code></pre></div>","position":{"start":{"line":153,"column":1,"offset":5467},"end":{"line":158,"column":4,"offset":5578}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":159,"column":1,"offset":5579},"end":{"line":160,"column":5,"offset":5588}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":162,"column":1,"offset":5590},"end":{"line":162,"column":7,"offset":5596}}},{"type":"text","value":" allows for multiple test cases, and will return\nthe first clause that is true.\n","position":{"start":{"line":162,"column":7,"offset":5596},"end":{"line":164,"column":1,"offset":5678}}},{"type":"raw","value":"<br>","position":{"start":{"line":164,"column":1,"offset":5678},"end":{"line":164,"column":5,"offset":5682}}},{"type":"text","value":"\n","position":{"start":{"line":164,"column":5,"offset":5682},"end":{"line":165,"column":1,"offset":5683}}},{"type":"raw","value":"<br>","position":{"start":{"line":165,"column":1,"offset":5683},"end":{"line":165,"column":5,"offset":5687}}},{"type":"text","value":"\nLets try ","position":{"start":{"line":165,"column":5,"offset":5687},"end":{"line":166,"column":10,"offset":5697}}},{"type":"raw","value":"<code class=\"language-text\">14</code>","position":{"start":{"line":166,"column":10,"offset":5697},"end":{"line":166,"column":14,"offset":5701}}},{"type":"text","value":". Since ","position":{"start":{"line":166,"column":14,"offset":5701},"end":{"line":166,"column":22,"offset":5709}}},{"type":"raw","value":"<code class=\"language-text\">14 / 7</code>","position":{"start":{"line":166,"column":22,"offset":5709},"end":{"line":166,"column":30,"offset":5717}}},{"type":"text","value":" has a remainder of ","position":{"start":{"line":166,"column":30,"offset":5717},"end":{"line":166,"column":50,"offset":5737}}},{"type":"raw","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":166,"column":50,"offset":5737},"end":{"line":166,"column":53,"offset":5740}}},{"type":"text","value":" the first clause is met and returns ","position":{"start":{"line":166,"column":53,"offset":5740},"end":{"line":166,"column":90,"offset":5777}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":166,"column":90,"offset":5777},"end":{"line":166,"column":96,"offset":5783}}},{"type":"text","value":".\n","position":{"start":{"line":166,"column":96,"offset":5783},"end":{"line":167,"column":1,"offset":5786}}},{"type":"raw","value":"<br>","position":{"start":{"line":167,"column":1,"offset":5786},"end":{"line":167,"column":5,"offset":5790}}},{"type":"text","value":"\n","position":{"start":{"line":167,"column":5,"offset":5790},"end":{"line":168,"column":1,"offset":5791}}},{"type":"raw","value":"<br>","position":{"start":{"line":168,"column":1,"offset":5791},"end":{"line":168,"column":5,"offset":5795}}},{"type":"text","value":"\nNow Lets try ","position":{"start":{"line":168,"column":5,"offset":5795},"end":{"line":169,"column":14,"offset":5809}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":169,"column":14,"offset":5809},"end":{"line":169,"column":18,"offset":5813}}},{"type":"text","value":". The first clause is not met, and therefore goes onto the next clause. ","position":{"start":{"line":169,"column":18,"offset":5813},"end":{"line":169,"column":90,"offset":5885}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":169,"column":90,"offset":5885},"end":{"line":169,"column":94,"offset":5889}}},{"type":"text","value":" does have a 7 inside of it so ","position":{"start":{"line":169,"column":94,"offset":5889},"end":{"line":169,"column":125,"offset":5920}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":169,"column":125,"offset":5920},"end":{"line":169,"column":131,"offset":5926}}},{"type":"text","value":" is returned.\n","position":{"start":{"line":169,"column":131,"offset":5926},"end":{"line":170,"column":1,"offset":5941}}},{"type":"raw","value":"<br>","position":{"start":{"line":170,"column":1,"offset":5941},"end":{"line":170,"column":5,"offset":5945}}},{"type":"text","value":"\n","position":{"start":{"line":170,"column":5,"offset":5945},"end":{"line":171,"column":1,"offset":5946}}},{"type":"raw","value":"<br>","position":{"start":{"line":171,"column":1,"offset":5946},"end":{"line":171,"column":5,"offset":5950}}},{"type":"text","value":"\nNow lets try ","position":{"start":{"line":171,"column":5,"offset":5950},"end":{"line":172,"column":14,"offset":5964}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":172,"column":14,"offset":5964},"end":{"line":172,"column":18,"offset":5968}}},{"type":"text","value":". The remainder is ","position":{"start":{"line":172,"column":18,"offset":5968},"end":{"line":172,"column":37,"offset":5987}}},{"type":"raw","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":172,"column":37,"offset":5987},"end":{"line":172,"column":40,"offset":5990}}},{"type":"text","value":" so the first clause is not met, and ","position":{"start":{"line":172,"column":40,"offset":5990},"end":{"line":172,"column":77,"offset":6027}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":172,"column":77,"offset":6027},"end":{"line":172,"column":81,"offset":6031}}},{"type":"text","value":"  does not have a ","position":{"start":{"line":172,"column":81,"offset":6031},"end":{"line":172,"column":99,"offset":6049}}},{"type":"raw","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":172,"column":99,"offset":6049},"end":{"line":172,"column":102,"offset":6052}}},{"type":"text","value":" inside of it so the catch all ","position":{"start":{"line":172,"column":102,"offset":6052},"end":{"line":172,"column":133,"offset":6083}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":172,"column":133,"offset":6083},"end":{"line":172,"column":139,"offset":6089}}},{"type":"text","value":" keyword returns the number ","position":{"start":{"line":172,"column":139,"offset":6089},"end":{"line":172,"column":167,"offset":6117}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":172,"column":167,"offset":6117},"end":{"line":172,"column":171,"offset":6121}}},{"type":"text","value":".\n","position":{"start":{"line":172,"column":171,"offset":6121},"end":{"line":173,"column":1,"offset":6123}}},{"type":"raw","value":"<br>","position":{"start":{"line":173,"column":1,"offset":6123},"end":{"line":173,"column":5,"offset":6127}}},{"type":"text","value":"\n","position":{"start":{"line":173,"column":5,"offset":6127},"end":{"line":174,"column":1,"offset":6128}}},{"type":"raw","value":"<br>","position":{"start":{"line":174,"column":1,"offset":6128},"end":{"line":174,"column":5,"offset":6132}}},{"type":"text","value":"\nImportant to note:\n","position":{"start":{"line":174,"column":5,"offset":6132},"end":{"line":176,"column":1,"offset":6152}}},{"type":"raw","value":"<br>","position":{"start":{"line":176,"column":1,"offset":6152},"end":{"line":176,"column":5,"offset":6156}}},{"type":"text","value":"\nIf a ","position":{"start":{"line":176,"column":5,"offset":6156},"end":{"line":177,"column":6,"offset":6162}}},{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":177,"column":6,"offset":6162},"end":{"line":177,"column":12,"offset":6168}}},{"type":"text","value":" does not have an ","position":{"start":{"line":177,"column":12,"offset":6168},"end":{"line":177,"column":30,"offset":6186}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":177,"column":30,"offset":6186},"end":{"line":177,"column":36,"offset":6192}}},{"type":"text","value":" statement it will return ","position":{"start":{"line":177,"column":36,"offset":6192},"end":{"line":177,"column":62,"offset":6218}}},{"type":"raw","value":"<code class=\"language-text\">unspecified</code>","position":{"start":{"line":177,"column":62,"offset":6218},"end":{"line":177,"column":75,"offset":6231}}},{"type":"text","value":", which can be different depending on interpreted, so always have an else statement.","position":{"start":{"line":177,"column":75,"offset":6231},"end":{"line":177,"column":159,"offset":6315}}}],"position":{"start":{"line":162,"column":1,"offset":5590},"end":{"line":177,"column":159,"offset":6315}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Applicative Order vs Normal Order","position":{"start":{"line":179,"column":8,"offset":6324},"end":{"line":179,"column":41,"offset":6357}}}],"position":{"start":{"line":179,"column":1,"offset":6317},"end":{"line":179,"column":41,"offset":6357}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (f a b) (+ (g a) b))\n(def (g x) (* 3 x))\n\n(f (+ 2 3) (- 15 6))</code></pre></div>","position":{"start":{"line":180,"column":1,"offset":6358},"end":{"line":185,"column":4,"offset":6433}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Applicative Order:\n","position":{"start":{"line":186,"column":1,"offset":6434},"end":{"line":187,"column":1,"offset":6453}}},{"type":"raw","value":"<br>","position":{"start":{"line":187,"column":1,"offset":6453},"end":{"line":187,"column":5,"offset":6457}}},{"type":"text","value":"\nevaluates the sub expressions until they are primitive values, then passes the primitive results back up to the parent function.\n","position":{"start":{"line":187,"column":5,"offset":6457},"end":{"line":189,"column":5,"offset":6595}}},{"type":"raw","value":"<br>","position":{"start":{"line":189,"column":5,"offset":6595},"end":{"line":189,"column":9,"offset":6599}}},{"type":"text","value":"\n","position":{"start":{"line":189,"column":9,"offset":6599},"end":{"line":190,"column":5,"offset":6604}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":190,"column":5,"offset":6604},"end":{"line":190,"column":27,"offset":6626}}},{"type":"text","value":"\n","position":{"start":{"line":190,"column":27,"offset":6626},"end":{"line":191,"column":5,"offset":6631}}},{"type":"raw","value":"<br>","position":{"start":{"line":191,"column":5,"offset":6631},"end":{"line":191,"column":9,"offset":6635}}},{"type":"text","value":"\n","position":{"start":{"line":191,"column":9,"offset":6635},"end":{"line":192,"column":5,"offset":6640}}},{"type":"raw","value":"<code class=\"language-text\">2 + 3</code>","position":{"start":{"line":192,"column":5,"offset":6640},"end":{"line":192,"column":12,"offset":6647}}},{"type":"text","value":" and ","position":{"start":{"line":192,"column":12,"offset":6647},"end":{"line":192,"column":17,"offset":6652}}},{"type":"raw","value":"<code class=\"language-text\">15 - 6</code>","position":{"start":{"line":192,"column":17,"offset":6652},"end":{"line":192,"column":25,"offset":6660}}},{"type":"text","value":" will be evaluated before the outside ","position":{"start":{"line":192,"column":25,"offset":6660},"end":{"line":192,"column":63,"offset":6698}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":192,"column":63,"offset":6698},"end":{"line":192,"column":66,"offset":6701}}},{"type":"text","value":" is evaluated. Then ","position":{"start":{"line":192,"column":66,"offset":6701},"end":{"line":192,"column":86,"offset":6721}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":192,"column":86,"offset":6721},"end":{"line":192,"column":89,"offset":6724}}},{"type":"text","value":" will be called with ","position":{"start":{"line":192,"column":89,"offset":6724},"end":{"line":192,"column":110,"offset":6745}}},{"type":"raw","value":"<code class=\"language-text\">(f 5 9)</code>","position":{"start":{"line":192,"column":110,"offset":6745},"end":{"line":192,"column":119,"offset":6754}}},{"type":"text","value":".\n","position":{"start":{"line":192,"column":119,"offset":6754},"end":{"line":193,"column":1,"offset":6756}}},{"type":"raw","value":"<br>","position":{"start":{"line":193,"column":1,"offset":6756},"end":{"line":193,"column":5,"offset":6760}}},{"type":"text","value":"\nNormal Order:\n","position":{"start":{"line":193,"column":5,"offset":6760},"end":{"line":195,"column":1,"offset":6776}}},{"type":"raw","value":"<br>","position":{"start":{"line":195,"column":1,"offset":6776},"end":{"line":195,"column":5,"offset":6780}}},{"type":"text","value":"\nevaluates the outsides first, but instead of passing primitive values it passes the expressions.\n","position":{"start":{"line":195,"column":5,"offset":6780},"end":{"line":197,"column":5,"offset":6887}}},{"type":"raw","value":"<br>","position":{"start":{"line":197,"column":5,"offset":6887},"end":{"line":197,"column":9,"offset":6891}}},{"type":"text","value":"\n","position":{"start":{"line":197,"column":9,"offset":6891},"end":{"line":198,"column":1,"offset":6892}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":198,"column":1,"offset":6892},"end":{"line":198,"column":23,"offset":6914}}},{"type":"text","value":" turns into ","position":{"start":{"line":198,"column":23,"offset":6914},"end":{"line":198,"column":35,"offset":6926}}},{"type":"raw","value":"<code class=\"language-text\">(+ (g (+ 2 3)) (- 15 6))</code>","position":{"start":{"line":198,"column":35,"offset":6926},"end":{"line":198,"column":61,"offset":6952}}},{"type":"text","value":"\n","position":{"start":{"line":198,"column":61,"offset":6952},"end":{"line":199,"column":1,"offset":6953}}},{"type":"raw","value":"<br>","position":{"start":{"line":199,"column":1,"offset":6953},"end":{"line":199,"column":5,"offset":6957}}},{"type":"text","value":"\nNow ","position":{"start":{"line":199,"column":5,"offset":6957},"end":{"line":200,"column":5,"offset":6962}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":200,"column":5,"offset":6962},"end":{"line":200,"column":8,"offset":6965}}},{"type":"text","value":" is done and the next expression can be evaluated.","position":{"start":{"line":200,"column":8,"offset":6965},"end":{"line":200,"column":58,"offset":7015}}}],"position":{"start":{"line":186,"column":1,"offset":6434},"end":{"line":200,"column":58,"offset":7015}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Possible Problem:\n","position":{"start":{"line":202,"column":1,"offset":7017},"end":{"line":203,"column":1,"offset":7035}}},{"type":"raw","value":"<br>","position":{"start":{"line":203,"column":1,"offset":7035},"end":{"line":203,"column":5,"offset":7039}}}],"position":{"start":{"line":202,"column":1,"offset":7017},"end":{"line":203,"column":5,"offset":7039}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (zero z) (- x x))</code></pre></div>","position":{"start":{"line":204,"column":1,"offset":7040},"end":{"line":206,"column":4,"offset":7070}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"applicative ","position":{"start":{"line":207,"column":1,"offset":7071},"end":{"line":207,"column":13,"offset":7083}}}],"position":{"start":{"line":207,"column":1,"offset":7071},"end":{"line":207,"column":13,"offset":7083}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(random 10) ==&gt; 8\n(zero 8) ---&gt;\n(- 8 8) ==&gt; 0\n0</code></pre></div>","position":{"start":{"line":208,"column":1,"offset":7084},"end":{"line":214,"column":4,"offset":7163}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"normal ","position":{"start":{"line":215,"column":1,"offset":7164},"end":{"line":215,"column":8,"offset":7171}}}],"position":{"start":{"line":215,"column":1,"offset":7164},"end":{"line":215,"column":8,"offset":7171}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(+ (random 10) (random 10)) ==&gt; \n    (random 10) ==&gt; 8\n    (random 10) ==&gt; 1\n(- 8 1) ==&gt; 7\n7</code></pre></div>","position":{"start":{"line":216,"column":1,"offset":7172},"end":{"line":223,"column":4,"offset":7296}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":224,"column":1,"offset":7297},"end":{"line":225,"column":5,"offset":7306}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the ","position":{"start":{"line":227,"column":1,"offset":7308},"end":{"line":227,"column":11,"offset":7318}}},{"type":"raw","value":"<code class=\"language-text\">(random 10)</code>","position":{"start":{"line":227,"column":11,"offset":7318},"end":{"line":227,"column":24,"offset":7331}}},{"type":"text","value":" is split into 2 different function alls in normal order you get different results.","position":{"start":{"line":227,"column":24,"offset":7331},"end":{"line":227,"column":107,"offset":7414}}}],"position":{"start":{"line":227,"column":1,"offset":7308},"end":{"line":227,"column":107,"offset":7414}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L03","position":{"start":{"line":229,"column":7,"offset":7422},"end":{"line":229,"column":10,"offset":7425}}}],"position":{"start":{"line":229,"column":1,"offset":7416},"end":{"line":229,"column":10,"offset":7425}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L04","position":{"start":{"line":230,"column":7,"offset":7432},"end":{"line":230,"column":10,"offset":7435}}}],"position":{"start":{"line":230,"column":1,"offset":7426},"end":{"line":230,"column":10,"offset":7435}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LABS","position":{"start":{"line":232,"column":6,"offset":7442},"end":{"line":232,"column":10,"offset":7446}}}],"position":{"start":{"line":232,"column":1,"offset":7437},"end":{"line":232,"column":10,"offset":7446}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1A","position":{"start":{"line":233,"column":7,"offset":7453},"end":{"line":233,"column":13,"offset":7459}}}],"position":{"start":{"line":233,"column":1,"offset":7447},"end":{"line":233,"column":13,"offset":7459}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first problem for the lab was to modify the ","position":{"start":{"line":234,"column":1,"offset":7460},"end":{"line":234,"column":49,"offset":7508}}},{"type":"raw","value":"<code class=\"language-text\">plural</code>","position":{"start":{"line":234,"column":49,"offset":7508},"end":{"line":234,"column":57,"offset":7516}}},{"type":"text","value":" program to handle a word ending in y, but has a vowel in front of it (boy).","position":{"start":{"line":234,"column":57,"offset":7516},"end":{"line":234,"column":133,"offset":7592}}}],"position":{"start":{"line":234,"column":1,"offset":7460},"end":{"line":234,"column":133,"offset":7592}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t\t(if (vowel? (last (bl wd)))\n\t\t(word wd &#39;s)\n\t\t(word (bl wd) &#39;ies))\n\t(word wd &#39;s)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":235,"column":1,"offset":7593},"end":{"line":245,"column":4,"offset":7788}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":246,"column":1,"offset":7789},"end":{"line":246,"column":5,"offset":7793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I handled this by adding a conditional that checks for the second to last letter.\n","position":{"start":{"line":249,"column":1,"offset":7796},"end":{"line":250,"column":1,"offset":7878}}},{"type":"raw","value":"<br>","position":{"start":{"line":250,"column":1,"offset":7878},"end":{"line":250,"column":5,"offset":7882}}},{"type":"text","value":"\n","position":{"start":{"line":250,"column":5,"offset":7882},"end":{"line":251,"column":1,"offset":7883}}},{"type":"raw","value":"<br>","position":{"start":{"line":251,"column":1,"offset":7883},"end":{"line":251,"column":5,"offset":7887}}},{"type":"text","value":"\nThe second assgnment was:","position":{"start":{"line":251,"column":5,"offset":7887},"end":{"line":252,"column":26,"offset":7913}}}],"position":{"start":{"line":249,"column":1,"offset":7796},"end":{"line":252,"column":26,"offset":7913}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Define a procedure that takes three numbers as arguments and returns the sum of\nthe squares of the two larger numbers.</code></pre></div>","position":{"start":{"line":253,"column":1,"offset":7914},"end":{"line":258,"column":4,"offset":8042}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My Solution: ","position":{"start":{"line":259,"column":1,"offset":8043},"end":{"line":259,"column":14,"offset":8056}}}],"position":{"start":{"line":259,"column":1,"offset":8043},"end":{"line":259,"column":14,"offset":8056}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (twoLargerSums a b c)\n    (if (&gt;= a b)\n        (if (&gt;= b c)\n            (+ (square a) (square b))\n            (+ (square a) (square c)))\n        (if (&gt;= a c)\n            (+ (square a) (square b))\n            (+ (square b) (square c))))\n)\n\n(define (square x)\n(* x x))</code></pre></div>","position":{"start":{"line":261,"column":1,"offset":8058},"end":{"line":274,"column":4,"offset":8340}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":276,"column":1,"offset":8342},"end":{"line":277,"column":5,"offset":8351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1B","position":{"start":{"line":280,"column":7,"offset":8360},"end":{"line":280,"column":13,"offset":8366}}}],"position":{"start":{"line":280,"column":1,"offset":8354},"end":{"line":280,"column":13,"offset":8366}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":280,"column":13,"offset":8366}}}}