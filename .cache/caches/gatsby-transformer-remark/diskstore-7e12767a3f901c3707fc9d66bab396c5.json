{"expireTime":9007200842248881000,"key":"transformer-remark-markdown-html-ast-16e033f67732dd9e69123000f7f8db7f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This article is a part of a series where I go through ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54}}},{"type":"element","tagName":"a","properties":{"href":"https://teachyourselfcs.com/"},"children":[{"type":"text","value":"teachyourselfcs","position":{"start":{"line":1,"column":56,"offset":55},"end":{"line":1,"column":71,"offset":70}}}],"position":{"start":{"line":1,"column":55,"offset":54},"end":{"line":1,"column":102,"offset":101}}},{"type":"text","value":".\nIf you would like to start at the beginning start ","position":{"start":{"line":1,"column":102,"offset":101},"end":{"line":2,"column":51,"offset":153}}},{"type":"element","tagName":"a","properties":{"href":"http://localhost:8000/teachyourselfcs/programming/00:getting-started/"},"children":[{"type":"text","value":"here","position":{"start":{"line":2,"column":52,"offset":154},"end":{"line":2,"column":56,"offset":158}}}],"position":{"start":{"line":2,"column":51,"offset":153},"end":{"line":2,"column":128,"offset":230}}},{"type":"text","value":".","position":{"start":{"line":2,"column":128,"offset":230},"end":{"line":2,"column":129,"offset":231}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":129,"offset":231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"INTRO","position":{"start":{"line":4,"column":6,"offset":238},"end":{"line":4,"column":11,"offset":243}}}],"position":{"start":{"line":4,"column":1,"offset":233},"end":{"line":4,"column":11,"offset":243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I will be following the Summer 2010 ","position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":5,"column":37,"offset":280}}},{"type":"element","tagName":"a","properties":{"href":"http://inst.eecs.berkeley.edu/~cs61a/su10/index.html"},"children":[{"type":"text","value":"Calendar","position":{"start":{"line":5,"column":38,"offset":281},"end":{"line":5,"column":46,"offset":289}}}],"position":{"start":{"line":5,"column":37,"offset":280},"end":{"line":5,"column":101,"offset":344}}},{"type":"text","value":"\nso each week will consist of 4 lectures and 2 labs.","position":{"start":{"line":5,"column":101,"offset":344},"end":{"line":6,"column":52,"offset":396}}}],"position":{"start":{"line":5,"column":1,"offset":244},"end":{"line":6,"column":52,"offset":396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"READINGS","position":{"start":{"line":8,"column":6,"offset":403},"end":{"line":8,"column":14,"offset":411}}}],"position":{"start":{"line":8,"column":1,"offset":398},"end":{"line":8,"column":14,"offset":411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.1 The Elements of Programming","position":{"start":{"line":9,"column":7,"offset":418},"end":{"line":9,"column":38,"offset":449}}}],"position":{"start":{"line":9,"column":1,"offset":412},"end":{"line":9,"column":38,"offset":449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The section starts off saying that there are 3 mechanisms that languages utilize to simplify complex ideas:\n","position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":11,"column":1,"offset":558}}},{"type":"raw","value":"<br>","position":{"start":{"line":11,"column":1,"offset":558},"end":{"line":11,"column":5,"offset":562}}},{"type":"text","value":"\nprimitive expressions: simplest entities within a language.\n","position":{"start":{"line":11,"column":5,"offset":562},"end":{"line":13,"column":1,"offset":623}}},{"type":"raw","value":"<br>","position":{"start":{"line":13,"column":1,"offset":623},"end":{"line":13,"column":5,"offset":627}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":5,"offset":627},"end":{"line":14,"column":1,"offset":628}}},{"type":"raw","value":"<br>","position":{"start":{"line":14,"column":1,"offset":628},"end":{"line":14,"column":5,"offset":632}}},{"type":"text","value":"\nmeans of combination: The ability to combine simple entities.\n","position":{"start":{"line":14,"column":5,"offset":632},"end":{"line":16,"column":1,"offset":696}}},{"type":"raw","value":"<br>","position":{"start":{"line":16,"column":1,"offset":696},"end":{"line":16,"column":5,"offset":700}}},{"type":"text","value":"\n","position":{"start":{"line":16,"column":5,"offset":700},"end":{"line":17,"column":1,"offset":701}}},{"type":"raw","value":"<br>","position":{"start":{"line":17,"column":1,"offset":701},"end":{"line":17,"column":5,"offset":705}}},{"type":"text","value":"\nmeans of abstraction: The ability to name and manipulate combined elements.\n","position":{"start":{"line":17,"column":5,"offset":705},"end":{"line":19,"column":1,"offset":782}}},{"type":"raw","value":"<br>","position":{"start":{"line":19,"column":1,"offset":782},"end":{"line":19,"column":5,"offset":786}}},{"type":"text","value":"\n","position":{"start":{"line":19,"column":5,"offset":786},"end":{"line":20,"column":1,"offset":787}}},{"type":"raw","value":"<br>","position":{"start":{"line":20,"column":1,"offset":787},"end":{"line":20,"column":5,"offset":791}}},{"type":"text","value":"\nBreaking down a expression:\n","position":{"start":{"line":20,"column":5,"offset":791},"end":{"line":22,"column":1,"offset":820}}},{"type":"raw","value":"<br>","position":{"start":{"line":22,"column":1,"offset":820},"end":{"line":22,"column":5,"offset":824}}},{"type":"text","value":"\nexpression: ","position":{"start":{"line":22,"column":5,"offset":824},"end":{"line":23,"column":13,"offset":837}}},{"type":"raw","value":"<code class=\"language-text\">(137 349)</code>","position":{"start":{"line":23,"column":13,"offset":837},"end":{"line":23,"column":24,"offset":848}}},{"type":"text","value":"\n","position":{"start":{"line":23,"column":24,"offset":848},"end":{"line":24,"column":1,"offset":849}}},{"type":"raw","value":"<br>","position":{"start":{"line":24,"column":1,"offset":849},"end":{"line":24,"column":5,"offset":853}}},{"type":"text","value":"\n`","position":{"start":{"line":24,"column":5,"offset":853},"end":{"line":25,"column":2,"offset":855}}}],"position":{"start":{"line":10,"column":1,"offset":450},"end":{"line":25,"column":2,"offset":855}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.2","position":{"start":{"line":26,"column":7,"offset":862},"end":{"line":26,"column":10,"offset":865}}}],"position":{"start":{"line":26,"column":1,"offset":856},"end":{"line":26,"column":10,"offset":865}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"1.3","position":{"start":{"line":27,"column":7,"offset":872},"end":{"line":27,"column":10,"offset":875}}}],"position":{"start":{"line":27,"column":1,"offset":866},"end":{"line":27,"column":10,"offset":875}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LECTURES","position":{"start":{"line":29,"column":6,"offset":882},"end":{"line":29,"column":14,"offset":890}}}],"position":{"start":{"line":29,"column":1,"offset":877},"end":{"line":29,"column":14,"offset":890}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L01","position":{"start":{"line":30,"column":7,"offset":897},"end":{"line":30,"column":10,"offset":900}}}],"position":{"start":{"line":30,"column":1,"offset":891},"end":{"line":30,"column":10,"offset":900}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Mathmatical Operations","position":{"start":{"line":32,"column":8,"offset":909},"end":{"line":32,"column":30,"offset":931}}}],"position":{"start":{"line":32,"column":1,"offset":902},"end":{"line":32,"column":30,"offset":931}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Class starts by going over some sytax for Scheme. Most languages do simple operations the same way we learned in grade school (infix notation):\n","position":{"start":{"line":34,"column":1,"offset":933},"end":{"line":35,"column":1,"offset":1077}}},{"type":"raw","value":"<br>","position":{"start":{"line":35,"column":1,"offset":1077},"end":{"line":35,"column":5,"offset":1081}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 + 3</code>","position":{"start":{"line":35,"column":5,"offset":1081},"end":{"line":35,"column":16,"offset":1092}}},{"type":"raw","value":"<br>","position":{"start":{"line":35,"column":16,"offset":1092},"end":{"line":35,"column":20,"offset":1096}}},{"type":"text","value":"\nScheme uses a different syntax where the operator is always on the left (prefix notation) and you can add as many numbers as you would like:\n","position":{"start":{"line":35,"column":20,"offset":1096},"end":{"line":37,"column":1,"offset":1240}}},{"type":"raw","value":"<br>","position":{"start":{"line":37,"column":1,"offset":1240},"end":{"line":37,"column":5,"offset":1244}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":37,"column":5,"offset":1244},"end":{"line":37,"column":16,"offset":1255}}},{"type":"raw","value":"<br>","position":{"start":{"line":37,"column":16,"offset":1255},"end":{"line":37,"column":20,"offset":1259}}},{"type":"text","value":"\nNow lets say we want to do something like:  ","position":{"start":{"line":37,"column":20,"offset":1259},"end":{"line":38,"column":45,"offset":1304}}},{"type":"raw","value":"<br>","position":{"start":{"line":38,"column":45,"offset":1304},"end":{"line":38,"column":49,"offset":1308}}},{"type":"raw","value":"<code class=\"language-text\">2 + 2 +  3 - 4</code>","position":{"start":{"line":38,"column":49,"offset":1308},"end":{"line":38,"column":65,"offset":1324}}},{"type":"raw","value":"<br>","position":{"start":{"line":38,"column":65,"offset":1324},"end":{"line":38,"column":69,"offset":1328}}},{"type":"text","value":"\nIn Scheme you can simply nest operators:\n","position":{"start":{"line":38,"column":69,"offset":1328},"end":{"line":40,"column":1,"offset":1371}}},{"type":"raw","value":"<br>","position":{"start":{"line":40,"column":1,"offset":1371},"end":{"line":40,"column":5,"offset":1375}}},{"type":"raw","value":"<code class=\"language-text\">(- (+ 2 2 3) 4)</code>","position":{"start":{"line":40,"column":5,"offset":1375},"end":{"line":40,"column":22,"offset":1392}}},{"type":"raw","value":"<br>","position":{"start":{"line":40,"column":22,"offset":1392},"end":{"line":40,"column":26,"offset":1396}}},{"type":"text","value":"\n","position":{"start":{"line":40,"column":26,"offset":1396},"end":{"line":41,"column":1,"offset":1397}}},{"type":"raw","value":"<br>","position":{"start":{"line":41,"column":1,"offset":1397},"end":{"line":41,"column":5,"offset":1401}}},{"type":"text","value":"\nWhen you first see this it looks way more complicated, but what is happening under the hood makes it a lot clearer.\n","position":{"start":{"line":41,"column":5,"offset":1401},"end":{"line":43,"column":1,"offset":1519}}},{"type":"raw","value":"<br>","position":{"start":{"line":43,"column":1,"offset":1519},"end":{"line":43,"column":5,"offset":1523}}},{"type":"text","value":"\nScheme takes the arguments and then computes the expressions of the arguments until it gets down to a primitive value.\n","position":{"start":{"line":43,"column":5,"offset":1523},"end":{"line":45,"column":1,"offset":1644}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":45,"column":1,"offset":1644},"end":{"line":45,"column":12,"offset":1655}}},{"type":"text","value":" is a expression and not a primitive value, so it calls ","position":{"start":{"line":45,"column":12,"offset":1655},"end":{"line":45,"column":68,"offset":1711}}},{"type":"raw","value":"<code class=\"language-text\">(+ 2 2 3)</code>","position":{"start":{"line":45,"column":68,"offset":1711},"end":{"line":45,"column":79,"offset":1722}}},{"type":"text","value":". The left argument of the ","position":{"start":{"line":45,"column":79,"offset":1722},"end":{"line":45,"column":106,"offset":1749}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":45,"column":106,"offset":1749},"end":{"line":45,"column":109,"offset":1752}}},{"type":"text","value":" is now 7 and both arguments are primitive values, meaning it can calculate the ","position":{"start":{"line":45,"column":109,"offset":1752},"end":{"line":45,"column":189,"offset":1832}}},{"type":"raw","value":"<code class=\"language-text\">-</code>","position":{"start":{"line":45,"column":189,"offset":1832},"end":{"line":45,"column":192,"offset":1835}}},{"type":"text","value":" to get 3.","position":{"start":{"line":45,"column":192,"offset":1835},"end":{"line":45,"column":202,"offset":1845}}}],"position":{"start":{"line":34,"column":1,"offset":933},"end":{"line":45,"column":202,"offset":1845}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Define","position":{"start":{"line":47,"column":8,"offset":1854},"end":{"line":47,"column":14,"offset":1860}}}],"position":{"start":{"line":47,"column":1,"offset":1847},"end":{"line":47,"column":14,"offset":1860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":48,"column":1,"offset":1861},"end":{"line":48,"column":9,"offset":1869}}},{"type":"text","value":" is an interesting keyword. It can be used to create functions: ","position":{"start":{"line":48,"column":9,"offset":1869},"end":{"line":48,"column":73,"offset":1933}}}],"position":{"start":{"line":48,"column":1,"offset":1861},"end":{"line":48,"column":73,"offset":1933}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (square x)\n    (* x x))</code></pre></div>","position":{"start":{"line":49,"column":1,"offset":1934},"end":{"line":52,"column":4,"offset":1973}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":53,"column":1,"offset":1974},"end":{"line":53,"column":5,"offset":1978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The syntax is very different from other languages, but try to think of ","position":{"start":{"line":55,"column":1,"offset":1980},"end":{"line":55,"column":72,"offset":2051}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":55,"column":72,"offset":2051},"end":{"line":55,"column":80,"offset":2059}}},{"type":"text","value":" as a function itself.\n","position":{"start":{"line":55,"column":80,"offset":2059},"end":{"line":56,"column":1,"offset":2083}}},{"type":"raw","value":"<br>","position":{"start":{"line":56,"column":1,"offset":2083},"end":{"line":56,"column":5,"offset":2087}}},{"type":"text","value":"\n","position":{"start":{"line":56,"column":5,"offset":2087},"end":{"line":57,"column":1,"offset":2088}}},{"type":"raw","value":"<br>","position":{"start":{"line":57,"column":1,"offset":2088},"end":{"line":57,"column":5,"offset":2092}}},{"type":"text","value":"\nDefine’s first parameter takes in a symbol (square) as it’s first argument that will be the name of the procedure. The rest of the parameters are parameters for the body in this case ","position":{"start":{"line":57,"column":5,"offset":2092},"end":{"line":58,"column":184,"offset":2276}}},{"type":"raw","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":58,"column":184,"offset":2276},"end":{"line":58,"column":187,"offset":2279}}},{"type":"text","value":".\n","position":{"start":{"line":58,"column":187,"offset":2279},"end":{"line":59,"column":1,"offset":2282}}},{"type":"raw","value":"<br>","position":{"start":{"line":59,"column":1,"offset":2282},"end":{"line":59,"column":5,"offset":2286}}},{"type":"text","value":"\n","position":{"start":{"line":59,"column":5,"offset":2286},"end":{"line":60,"column":1,"offset":2287}}},{"type":"raw","value":"<br>","position":{"start":{"line":60,"column":1,"offset":2287},"end":{"line":60,"column":5,"offset":2291}}},{"type":"text","value":"\nThe second parameter that ","position":{"start":{"line":60,"column":5,"offset":2291},"end":{"line":61,"column":27,"offset":2318}}},{"type":"raw","value":"<code class=\"language-text\">define</code>","position":{"start":{"line":61,"column":27,"offset":2318},"end":{"line":61,"column":35,"offset":2326}}},{"type":"text","value":" takes in is the body that the procedure will call ","position":{"start":{"line":61,"column":35,"offset":2326},"end":{"line":61,"column":86,"offset":2377}}},{"type":"raw","value":"<code class=\"language-text\">(* x x)</code>","position":{"start":{"line":61,"column":86,"offset":2377},"end":{"line":61,"column":95,"offset":2386}}},{"type":"text","value":". ","position":{"start":{"line":61,"column":95,"offset":2386},"end":{"line":61,"column":97,"offset":2388}}}],"position":{"start":{"line":55,"column":1,"offset":1980},"end":{"line":61,"column":97,"offset":2388}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br> ","position":{"start":{"line":63,"column":1,"offset":2390},"end":{"line":63,"column":6,"offset":2395}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define can also be used to store constants:\n","position":{"start":{"line":65,"column":1,"offset":2397},"end":{"line":66,"column":1,"offset":2441}}},{"type":"raw","value":"<br>","position":{"start":{"line":66,"column":1,"offset":2441},"end":{"line":66,"column":5,"offset":2445}}},{"type":"text","value":"\n","position":{"start":{"line":66,"column":5,"offset":2445},"end":{"line":67,"column":1,"offset":2446}}},{"type":"raw","value":"<code class=\"language-text\">(define pi 3.14159)</code>","position":{"start":{"line":67,"column":1,"offset":2446},"end":{"line":67,"column":22,"offset":2467}}},{"type":"text","value":"\n","position":{"start":{"line":67,"column":22,"offset":2467},"end":{"line":68,"column":1,"offset":2468}}},{"type":"raw","value":"<br>","position":{"start":{"line":68,"column":1,"offset":2468},"end":{"line":68,"column":5,"offset":2472}}}],"position":{"start":{"line":65,"column":1,"offset":2397},"end":{"line":68,"column":5,"offset":2472}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the same thing as above but used in a different way. Since 3.14159 is a primitive no expression needs to be evaluated for the second parameter.","position":{"start":{"line":70,"column":1,"offset":2474},"end":{"line":70,"column":152,"offset":2625}}}],"position":{"start":{"line":70,"column":1,"offset":2474},"end":{"line":70,"column":152,"offset":2625}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":72,"column":8,"offset":2634},"end":{"line":72,"column":20,"offset":2646}}}],"position":{"start":{"line":72,"column":1,"offset":2627},"end":{"line":72,"column":20,"offset":2646}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the first example of a program we see in class:","position":{"start":{"line":74,"column":1,"offset":2648},"end":{"line":74,"column":56,"offset":2703}}}],"position":{"start":{"line":74,"column":1,"offset":2648},"end":{"line":74,"column":56,"offset":2703}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t(word (bl wd) &#39;ies)\n\t(word wd &#39;s)))</code></pre></div>","position":{"start":{"line":75,"column":1,"offset":2704},"end":{"line":80,"column":4,"offset":2795}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":81,"column":1,"offset":2796},"end":{"line":81,"column":5,"offset":2800}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you’ve probably already guessed, ","position":{"start":{"line":83,"column":1,"offset":2802},"end":{"line":83,"column":37,"offset":2838}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":83,"column":37,"offset":2838},"end":{"line":83,"column":41,"offset":2842}}},{"type":"text","value":" is a function.\n","position":{"start":{"line":83,"column":41,"offset":2842},"end":{"line":84,"column":1,"offset":2859}}},{"type":"raw","value":"<br>","position":{"start":{"line":84,"column":1,"offset":2859},"end":{"line":84,"column":5,"offset":2863}}},{"type":"text","value":"\n","position":{"start":{"line":84,"column":5,"offset":2863},"end":{"line":85,"column":1,"offset":2864}}},{"type":"raw","value":"<br>","position":{"start":{"line":85,"column":1,"offset":2864},"end":{"line":85,"column":5,"offset":2868}}},{"type":"text","value":"\nThe first parameter is the test case for example if we input fly ","position":{"start":{"line":85,"column":5,"offset":2868},"end":{"line":86,"column":66,"offset":2934}}},{"type":"raw","value":"<code class=\"language-text\">(equal? (last wd) &#39;y)</code>","position":{"start":{"line":86,"column":66,"offset":2934},"end":{"line":86,"column":89,"offset":2957}}},{"type":"text","value":" would be true, because fly ends in y.\n","position":{"start":{"line":86,"column":89,"offset":2957},"end":{"line":87,"column":1,"offset":2997}}},{"type":"raw","value":"<br>","position":{"start":{"line":87,"column":1,"offset":2997},"end":{"line":87,"column":5,"offset":3001}}},{"type":"text","value":"\n","position":{"start":{"line":87,"column":5,"offset":3001},"end":{"line":88,"column":1,"offset":3002}}},{"type":"raw","value":"<br>","position":{"start":{"line":88,"column":1,"offset":3002},"end":{"line":88,"column":5,"offset":3006}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":88,"column":5,"offset":3006},"end":{"line":89,"column":21,"offset":3027}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":89,"column":21,"offset":3027},"end":{"line":89,"column":25,"offset":3031}}},{"type":"text","value":" takes in is the expression if the test case is true.\n","position":{"start":{"line":89,"column":25,"offset":3031},"end":{"line":90,"column":1,"offset":3085}}},{"type":"raw","value":"<br>","position":{"start":{"line":90,"column":1,"offset":3085},"end":{"line":90,"column":5,"offset":3089}}},{"type":"text","value":"\n","position":{"start":{"line":90,"column":5,"offset":3089},"end":{"line":91,"column":1,"offset":3090}}},{"type":"raw","value":"<br>","position":{"start":{"line":91,"column":1,"offset":3090},"end":{"line":91,"column":5,"offset":3094}}},{"type":"text","value":"\nThe third parameter ","position":{"start":{"line":91,"column":5,"offset":3094},"end":{"line":92,"column":21,"offset":3115}}},{"type":"raw","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":92,"column":21,"offset":3115},"end":{"line":92,"column":25,"offset":3119}}},{"type":"text","value":" takes in is the expression if the test case is false.\n","position":{"start":{"line":92,"column":25,"offset":3119},"end":{"line":93,"column":1,"offset":3174}}},{"type":"raw","value":"<br>","position":{"start":{"line":93,"column":1,"offset":3174},"end":{"line":93,"column":5,"offset":3178}}},{"type":"text","value":"\n","position":{"start":{"line":93,"column":5,"offset":3178},"end":{"line":94,"column":1,"offset":3179}}},{"type":"raw","value":"<br>","position":{"start":{"line":94,"column":1,"offset":3179},"end":{"line":94,"column":5,"offset":3183}}},{"type":"text","value":"\nAlso worth noting that names that return a boolean add a ","position":{"start":{"line":94,"column":5,"offset":3183},"end":{"line":95,"column":58,"offset":3241}}},{"type":"raw","value":"<code class=\"language-text\">?</code>","position":{"start":{"line":95,"column":58,"offset":3241},"end":{"line":95,"column":61,"offset":3244}}},{"type":"text","value":" to the end to show that the primitive returned is true or false. Like how equal is ","position":{"start":{"line":95,"column":61,"offset":3244},"end":{"line":95,"column":145,"offset":3328}}},{"type":"raw","value":"<code class=\"language-text\">equal?</code>","position":{"start":{"line":95,"column":145,"offset":3328},"end":{"line":95,"column":153,"offset":3336}}},{"type":"text","value":" in the code block above.","position":{"start":{"line":95,"column":153,"offset":3336},"end":{"line":95,"column":178,"offset":3361}}}],"position":{"start":{"line":83,"column":1,"offset":2802},"end":{"line":95,"column":178,"offset":3361}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L02","position":{"start":{"line":97,"column":7,"offset":3369},"end":{"line":97,"column":10,"offset":3372}}}],"position":{"start":{"line":97,"column":1,"offset":3363},"end":{"line":97,"column":10,"offset":3372}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Recursion","position":{"start":{"line":99,"column":8,"offset":3381},"end":{"line":99,"column":17,"offset":3390}}}],"position":{"start":{"line":99,"column":1,"offset":3374},"end":{"line":99,"column":17,"offset":3390}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (pigl wd)\n\t(if (pl-done? wd)\n\t\t(word wd &#39;ay)\n\t\t(pigl (word (bf wd) (first wd)))))\n\n(define (pl-done? wd)\n\t(vowel? (first wd)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":100,"column":1,"offset":3391},"end":{"line":111,"column":4,"offset":3590}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":112,"column":1,"offset":3591},"end":{"line":112,"column":5,"offset":3595}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursion is when a procedures calls the same procedure that it is writing. Without a test case this will go on infinitely, but a recursive function continues to do the body of the procedure until it is told to end.\n","position":{"start":{"line":114,"column":1,"offset":3597},"end":{"line":115,"column":1,"offset":3813}}},{"type":"raw","value":"<br>","position":{"start":{"line":115,"column":1,"offset":3813},"end":{"line":115,"column":5,"offset":3817}}},{"type":"text","value":"\n","position":{"start":{"line":115,"column":5,"offset":3817},"end":{"line":116,"column":1,"offset":3818}}},{"type":"raw","value":"<br>","position":{"start":{"line":116,"column":1,"offset":3818},"end":{"line":116,"column":5,"offset":3822}}},{"type":"text","value":"\nNotice in the above example from lecture the function calls pigl until ","position":{"start":{"line":116,"column":5,"offset":3822},"end":{"line":117,"column":72,"offset":3894}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":117,"column":72,"offset":3894},"end":{"line":117,"column":81,"offset":3903}}},{"type":"text","value":" is equal to true.\n","position":{"start":{"line":117,"column":81,"offset":3903},"end":{"line":118,"column":1,"offset":3922}}},{"type":"raw","value":"<br>","position":{"start":{"line":118,"column":1,"offset":3922},"end":{"line":118,"column":5,"offset":3926}}},{"type":"text","value":"\n","position":{"start":{"line":118,"column":5,"offset":3926},"end":{"line":119,"column":1,"offset":3927}}},{"type":"raw","value":"<br>","position":{"start":{"line":119,"column":1,"offset":3927},"end":{"line":119,"column":5,"offset":3931}}},{"type":"text","value":"\nLets say ","position":{"start":{"line":119,"column":5,"offset":3931},"end":{"line":120,"column":10,"offset":3941}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":120,"column":10,"offset":3941},"end":{"line":120,"column":16,"offset":3947}}},{"type":"text","value":" gets called with ","position":{"start":{"line":120,"column":16,"offset":3947},"end":{"line":120,"column":34,"offset":3965}}},{"type":"raw","value":"<code class=\"language-text\">scheme</code>","position":{"start":{"line":120,"column":34,"offset":3965},"end":{"line":120,"column":42,"offset":3973}}},{"type":"text","value":".\nThe conditional checks ","position":{"start":{"line":120,"column":42,"offset":3973},"end":{"line":121,"column":24,"offset":3998}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":121,"column":24,"offset":3998},"end":{"line":121,"column":33,"offset":4007}}},{"type":"text","value":" which checks the first letter in the word to see if it is a vowel. Since ","position":{"start":{"line":121,"column":33,"offset":4007},"end":{"line":121,"column":107,"offset":4081}}},{"type":"raw","value":"<code class=\"language-text\">pl-done</code>","position":{"start":{"line":121,"column":107,"offset":4081},"end":{"line":121,"column":116,"offset":4090}}},{"type":"text","value":" is false because ","position":{"start":{"line":121,"column":116,"offset":4090},"end":{"line":121,"column":134,"offset":4108}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":121,"column":134,"offset":4108},"end":{"line":121,"column":137,"offset":4111}}},{"type":"text","value":" isn’t a vowel it calls ","position":{"start":{"line":121,"column":137,"offset":4111},"end":{"line":121,"column":161,"offset":4135}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":121,"column":161,"offset":4135},"end":{"line":121,"column":167,"offset":4141}}},{"type":"text","value":" again with the argument ","position":{"start":{"line":121,"column":167,"offset":4141},"end":{"line":121,"column":192,"offset":4166}}},{"type":"raw","value":"<code class=\"language-text\">chemes</code>","position":{"start":{"line":121,"column":192,"offset":4166},"end":{"line":121,"column":200,"offset":4174}}},{"type":"text","value":". This is because ","position":{"start":{"line":121,"column":200,"offset":4174},"end":{"line":121,"column":218,"offset":4192}}},{"type":"raw","value":"<code class=\"language-text\">word</code>","position":{"start":{"line":121,"column":218,"offset":4192},"end":{"line":121,"column":224,"offset":4198}}},{"type":"text","value":" takes the arguments ","position":{"start":{"line":121,"column":224,"offset":4198},"end":{"line":121,"column":245,"offset":4219}}},{"type":"raw","value":"<code class=\"language-text\">cheme</code>","position":{"start":{"line":121,"column":245,"offset":4219},"end":{"line":121,"column":252,"offset":4226}}},{"type":"text","value":" and ","position":{"start":{"line":121,"column":252,"offset":4226},"end":{"line":121,"column":257,"offset":4231}}},{"type":"raw","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":121,"column":257,"offset":4231},"end":{"line":121,"column":260,"offset":4234}}},{"type":"text","value":" and adds them together. ","position":{"start":{"line":121,"column":260,"offset":4234},"end":{"line":121,"column":285,"offset":4259}}},{"type":"raw","value":"<code class=\"language-text\">pigl</code>","position":{"start":{"line":121,"column":285,"offset":4259},"end":{"line":121,"column":291,"offset":4265}}},{"type":"text","value":" gets called repeatedly until\nit is called with a vowel as the first letter. When the first letter is a vowel the expression ","position":{"start":{"line":121,"column":291,"offset":4265},"end":{"line":122,"column":96,"offset":4391}}},{"type":"raw","value":"<code class=\"language-text\">(word wd &#39;ay)</code>","position":{"start":{"line":122,"column":96,"offset":4391},"end":{"line":122,"column":111,"offset":4406}}},{"type":"text","value":" is ran and the result is a primitive which means the procedure stops. ","position":{"start":{"line":122,"column":111,"offset":4406},"end":{"line":122,"column":182,"offset":4477}}}],"position":{"start":{"line":114,"column":1,"offset":3597},"end":{"line":122,"column":182,"offset":4477}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Abstraction","position":{"start":{"line":124,"column":8,"offset":4486},"end":{"line":124,"column":19,"offset":4497}}}],"position":{"start":{"line":124,"column":1,"offset":4479},"end":{"line":124,"column":19,"offset":4497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Big Picture: ","position":{"start":{"line":125,"column":1,"offset":4498},"end":{"line":125,"column":14,"offset":4511}}}],"position":{"start":{"line":125,"column":1,"offset":4498},"end":{"line":125,"column":14,"offset":4511}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Application                   (highest)\n------------------------------\nHigh level language (Scheme)\n------------------------------\nlow level language  ( C )\n------------------------------\nmachine language/ architecture\n------------------------------\nlogic gates\n------------------------------\ntransistors\n------------------------------\nquantum physics                 (lowest)\n------------------------------</code></pre></div>","position":{"start":{"line":126,"column":1,"offset":4512},"end":{"line":141,"column":4,"offset":4927}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":142,"column":1,"offset":4928},"end":{"line":142,"column":5,"offset":4932}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Abstraction is the layering of pieces on top of eachother. Little pieces are put together to form a layer that can be referenced as a whole.","position":{"start":{"line":144,"column":1,"offset":4934},"end":{"line":144,"column":141,"offset":5074}}}],"position":{"start":{"line":144,"column":1,"offset":4934},"end":{"line":144,"column":141,"offset":5074}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Functional Programming","position":{"start":{"line":146,"column":8,"offset":5083},"end":{"line":146,"column":30,"offset":5105}}}],"position":{"start":{"line":146,"column":1,"offset":5076},"end":{"line":146,"column":30,"offset":5105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the introduction of multi-core processers, parallelism has helped functional programming make a comeback. If everything is a function you won’t run into race conditions created by dependencies.","position":{"start":{"line":147,"column":1,"offset":5106},"end":{"line":147,"column":199,"offset":5304}}}],"position":{"start":{"line":147,"column":1,"offset":5106},"end":{"line":147,"column":199,"offset":5304}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Function vs. Procedure","position":{"start":{"line":149,"column":8,"offset":5313},"end":{"line":149,"column":30,"offset":5335}}}],"position":{"start":{"line":149,"column":1,"offset":5306},"end":{"line":149,"column":30,"offset":5335}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Two functions are the same if they give the same output with given inputs.\n","position":{"start":{"line":151,"column":1,"offset":5337},"end":{"line":152,"column":1,"offset":5412}}},{"type":"raw","value":"<br>","position":{"start":{"line":152,"column":1,"offset":5412},"end":{"line":152,"column":5,"offset":5416}}},{"type":"text","value":"\n","position":{"start":{"line":152,"column":5,"offset":5416},"end":{"line":153,"column":1,"offset":5417}}},{"type":"raw","value":"<br>","position":{"start":{"line":153,"column":1,"offset":5417},"end":{"line":153,"column":5,"offset":5421}}},{"type":"text","value":"\nA procedure is a sequence of steps for computing a function.\n","position":{"start":{"line":153,"column":5,"offset":5421},"end":{"line":155,"column":1,"offset":5483}}},{"type":"raw","value":"<br>","position":{"start":{"line":155,"column":1,"offset":5483},"end":{"line":155,"column":5,"offset":5487}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":155,"column":5,"offset":5487},"end":{"line":156,"column":1,"offset":5490}}},{"type":"text","value":"\n"},{"type":"text","value":"Therefore ","position":{"start":{"line":156,"column":1,"offset":5490},"end":{"line":156,"column":11,"offset":5500}}},{"type":"raw","value":"<code class=\"language-text\">2x + 6</code>","position":{"start":{"line":156,"column":11,"offset":5500},"end":{"line":156,"column":19,"offset":5508}}},{"type":"text","value":" and ","position":{"start":{"line":156,"column":19,"offset":5508},"end":{"line":156,"column":24,"offset":5513}}},{"type":"raw","value":"<code class=\"language-text\">2(x + 3)</code>","position":{"start":{"line":156,"column":24,"offset":5513},"end":{"line":156,"column":34,"offset":5523}}},{"type":"text","value":" are the same function but different procedures.\n","position":{"start":{"line":156,"column":34,"offset":5523},"end":{"line":157,"column":1,"offset":5572}}},{"type":"raw","value":"<br>","position":{"start":{"line":157,"column":1,"offset":5572},"end":{"line":157,"column":5,"offset":5576}}}],"position":{"start":{"line":151,"column":1,"offset":5337},"end":{"line":157,"column":5,"offset":5576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Cond","position":{"start":{"line":159,"column":8,"offset":5585},"end":{"line":159,"column":12,"offset":5589}}}],"position":{"start":{"line":159,"column":1,"offset":5578},"end":{"line":159,"column":12,"offset":5589}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (buzz n) \n    (cond ((equal? (remainder n 7) 0) &#39;buzz)\n    ((member? 7 n) &#39;buzz)\n    (else n)))</code></pre></div>","position":{"start":{"line":160,"column":1,"offset":5590},"end":{"line":165,"column":4,"offset":5701}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":166,"column":1,"offset":5702},"end":{"line":167,"column":5,"offset":5711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":169,"column":1,"offset":5713},"end":{"line":169,"column":7,"offset":5719}}},{"type":"text","value":" allows for multiple test cases, and will return\nthe first clause that is true.\n","position":{"start":{"line":169,"column":7,"offset":5719},"end":{"line":171,"column":1,"offset":5801}}},{"type":"raw","value":"<br>","position":{"start":{"line":171,"column":1,"offset":5801},"end":{"line":171,"column":5,"offset":5805}}},{"type":"text","value":"\n","position":{"start":{"line":171,"column":5,"offset":5805},"end":{"line":172,"column":1,"offset":5806}}},{"type":"raw","value":"<br>","position":{"start":{"line":172,"column":1,"offset":5806},"end":{"line":172,"column":5,"offset":5810}}},{"type":"text","value":"\nLets try ","position":{"start":{"line":172,"column":5,"offset":5810},"end":{"line":173,"column":10,"offset":5820}}},{"type":"raw","value":"<code class=\"language-text\">14</code>","position":{"start":{"line":173,"column":10,"offset":5820},"end":{"line":173,"column":14,"offset":5824}}},{"type":"text","value":". Since ","position":{"start":{"line":173,"column":14,"offset":5824},"end":{"line":173,"column":22,"offset":5832}}},{"type":"raw","value":"<code class=\"language-text\">14 / 7</code>","position":{"start":{"line":173,"column":22,"offset":5832},"end":{"line":173,"column":30,"offset":5840}}},{"type":"text","value":" has a remainder of ","position":{"start":{"line":173,"column":30,"offset":5840},"end":{"line":173,"column":50,"offset":5860}}},{"type":"raw","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":173,"column":50,"offset":5860},"end":{"line":173,"column":53,"offset":5863}}},{"type":"text","value":" the first clause is met and returns ","position":{"start":{"line":173,"column":53,"offset":5863},"end":{"line":173,"column":90,"offset":5900}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":173,"column":90,"offset":5900},"end":{"line":173,"column":96,"offset":5906}}},{"type":"text","value":".\n","position":{"start":{"line":173,"column":96,"offset":5906},"end":{"line":174,"column":1,"offset":5909}}},{"type":"raw","value":"<br>","position":{"start":{"line":174,"column":1,"offset":5909},"end":{"line":174,"column":5,"offset":5913}}},{"type":"text","value":"\n","position":{"start":{"line":174,"column":5,"offset":5913},"end":{"line":175,"column":1,"offset":5914}}},{"type":"raw","value":"<br>","position":{"start":{"line":175,"column":1,"offset":5914},"end":{"line":175,"column":5,"offset":5918}}},{"type":"text","value":"\nNow Lets try ","position":{"start":{"line":175,"column":5,"offset":5918},"end":{"line":176,"column":14,"offset":5932}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":176,"column":14,"offset":5932},"end":{"line":176,"column":18,"offset":5936}}},{"type":"text","value":". The first clause is not met, and therefore goes onto the next clause. ","position":{"start":{"line":176,"column":18,"offset":5936},"end":{"line":176,"column":90,"offset":6008}}},{"type":"raw","value":"<code class=\"language-text\">17</code>","position":{"start":{"line":176,"column":90,"offset":6008},"end":{"line":176,"column":94,"offset":6012}}},{"type":"text","value":" does have a 7 inside of it so ","position":{"start":{"line":176,"column":94,"offset":6012},"end":{"line":176,"column":125,"offset":6043}}},{"type":"raw","value":"<code class=\"language-text\">buzz</code>","position":{"start":{"line":176,"column":125,"offset":6043},"end":{"line":176,"column":131,"offset":6049}}},{"type":"text","value":" is returned.\n","position":{"start":{"line":176,"column":131,"offset":6049},"end":{"line":177,"column":1,"offset":6064}}},{"type":"raw","value":"<br>","position":{"start":{"line":177,"column":1,"offset":6064},"end":{"line":177,"column":5,"offset":6068}}},{"type":"text","value":"\n","position":{"start":{"line":177,"column":5,"offset":6068},"end":{"line":178,"column":1,"offset":6069}}},{"type":"raw","value":"<br>","position":{"start":{"line":178,"column":1,"offset":6069},"end":{"line":178,"column":5,"offset":6073}}},{"type":"text","value":"\nNow lets try ","position":{"start":{"line":178,"column":5,"offset":6073},"end":{"line":179,"column":14,"offset":6087}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":179,"column":14,"offset":6087},"end":{"line":179,"column":18,"offset":6091}}},{"type":"text","value":". The remainder is ","position":{"start":{"line":179,"column":18,"offset":6091},"end":{"line":179,"column":37,"offset":6110}}},{"type":"raw","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":179,"column":37,"offset":6110},"end":{"line":179,"column":40,"offset":6113}}},{"type":"text","value":" so the first clause is not met, and ","position":{"start":{"line":179,"column":40,"offset":6113},"end":{"line":179,"column":77,"offset":6150}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":179,"column":77,"offset":6150},"end":{"line":179,"column":81,"offset":6154}}},{"type":"text","value":"  does not have a ","position":{"start":{"line":179,"column":81,"offset":6154},"end":{"line":179,"column":99,"offset":6172}}},{"type":"raw","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":179,"column":99,"offset":6172},"end":{"line":179,"column":102,"offset":6175}}},{"type":"text","value":" inside of it so the catch all ","position":{"start":{"line":179,"column":102,"offset":6175},"end":{"line":179,"column":133,"offset":6206}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":179,"column":133,"offset":6206},"end":{"line":179,"column":139,"offset":6212}}},{"type":"text","value":" keyword returns the number ","position":{"start":{"line":179,"column":139,"offset":6212},"end":{"line":179,"column":167,"offset":6240}}},{"type":"raw","value":"<code class=\"language-text\">15</code>","position":{"start":{"line":179,"column":167,"offset":6240},"end":{"line":179,"column":171,"offset":6244}}},{"type":"text","value":".\n","position":{"start":{"line":179,"column":171,"offset":6244},"end":{"line":180,"column":1,"offset":6246}}},{"type":"raw","value":"<br>","position":{"start":{"line":180,"column":1,"offset":6246},"end":{"line":180,"column":5,"offset":6250}}},{"type":"text","value":"\n","position":{"start":{"line":180,"column":5,"offset":6250},"end":{"line":181,"column":1,"offset":6251}}},{"type":"raw","value":"<br>","position":{"start":{"line":181,"column":1,"offset":6251},"end":{"line":181,"column":5,"offset":6255}}},{"type":"text","value":"\nImportant to note:\n","position":{"start":{"line":181,"column":5,"offset":6255},"end":{"line":183,"column":1,"offset":6275}}},{"type":"raw","value":"<br>","position":{"start":{"line":183,"column":1,"offset":6275},"end":{"line":183,"column":5,"offset":6279}}},{"type":"text","value":"\nIf a ","position":{"start":{"line":183,"column":5,"offset":6279},"end":{"line":184,"column":6,"offset":6285}}},{"type":"raw","value":"<code class=\"language-text\">cond</code>","position":{"start":{"line":184,"column":6,"offset":6285},"end":{"line":184,"column":12,"offset":6291}}},{"type":"text","value":" does not have an ","position":{"start":{"line":184,"column":12,"offset":6291},"end":{"line":184,"column":30,"offset":6309}}},{"type":"raw","value":"<code class=\"language-text\">else</code>","position":{"start":{"line":184,"column":30,"offset":6309},"end":{"line":184,"column":36,"offset":6315}}},{"type":"text","value":" statement it will return ","position":{"start":{"line":184,"column":36,"offset":6315},"end":{"line":184,"column":62,"offset":6341}}},{"type":"raw","value":"<code class=\"language-text\">unspecified</code>","position":{"start":{"line":184,"column":62,"offset":6341},"end":{"line":184,"column":75,"offset":6354}}},{"type":"text","value":", which can be different depending on interpreted, so always have an else statement.","position":{"start":{"line":184,"column":75,"offset":6354},"end":{"line":184,"column":159,"offset":6438}}}],"position":{"start":{"line":169,"column":1,"offset":5713},"end":{"line":184,"column":159,"offset":6438}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Applicative Order vs Normal Order","position":{"start":{"line":186,"column":8,"offset":6447},"end":{"line":186,"column":41,"offset":6480}}}],"position":{"start":{"line":186,"column":1,"offset":6440},"end":{"line":186,"column":41,"offset":6480}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (f a b) (+ (g a) b))\n(def (g x) (* 3 x))\n\n(f (+ 2 3) (- 15 6))</code></pre></div>","position":{"start":{"line":187,"column":1,"offset":6481},"end":{"line":192,"column":4,"offset":6556}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Applicative Order:\n","position":{"start":{"line":193,"column":1,"offset":6557},"end":{"line":194,"column":1,"offset":6576}}},{"type":"raw","value":"<br>","position":{"start":{"line":194,"column":1,"offset":6576},"end":{"line":194,"column":5,"offset":6580}}},{"type":"text","value":"\nevaluates the sub expressions until they are primitive values, then passes the primitive results back up to the parent function.\n","position":{"start":{"line":194,"column":5,"offset":6580},"end":{"line":196,"column":5,"offset":6718}}},{"type":"raw","value":"<br>","position":{"start":{"line":196,"column":5,"offset":6718},"end":{"line":196,"column":9,"offset":6722}}},{"type":"text","value":"\n","position":{"start":{"line":196,"column":9,"offset":6722},"end":{"line":197,"column":5,"offset":6727}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":197,"column":5,"offset":6727},"end":{"line":197,"column":27,"offset":6749}}},{"type":"text","value":"\n","position":{"start":{"line":197,"column":27,"offset":6749},"end":{"line":198,"column":5,"offset":6754}}},{"type":"raw","value":"<br>","position":{"start":{"line":198,"column":5,"offset":6754},"end":{"line":198,"column":9,"offset":6758}}},{"type":"text","value":"\n","position":{"start":{"line":198,"column":9,"offset":6758},"end":{"line":199,"column":5,"offset":6763}}},{"type":"raw","value":"<code class=\"language-text\">2 + 3</code>","position":{"start":{"line":199,"column":5,"offset":6763},"end":{"line":199,"column":12,"offset":6770}}},{"type":"text","value":" and ","position":{"start":{"line":199,"column":12,"offset":6770},"end":{"line":199,"column":17,"offset":6775}}},{"type":"raw","value":"<code class=\"language-text\">15 - 6</code>","position":{"start":{"line":199,"column":17,"offset":6775},"end":{"line":199,"column":25,"offset":6783}}},{"type":"text","value":" will be evaluated before the outside ","position":{"start":{"line":199,"column":25,"offset":6783},"end":{"line":199,"column":63,"offset":6821}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":199,"column":63,"offset":6821},"end":{"line":199,"column":66,"offset":6824}}},{"type":"text","value":" is evaluated. Then ","position":{"start":{"line":199,"column":66,"offset":6824},"end":{"line":199,"column":86,"offset":6844}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":199,"column":86,"offset":6844},"end":{"line":199,"column":89,"offset":6847}}},{"type":"text","value":" will be called with ","position":{"start":{"line":199,"column":89,"offset":6847},"end":{"line":199,"column":110,"offset":6868}}},{"type":"raw","value":"<code class=\"language-text\">(f 5 9)</code>","position":{"start":{"line":199,"column":110,"offset":6868},"end":{"line":199,"column":119,"offset":6877}}},{"type":"text","value":".\n","position":{"start":{"line":199,"column":119,"offset":6877},"end":{"line":200,"column":1,"offset":6879}}},{"type":"raw","value":"<br>","position":{"start":{"line":200,"column":1,"offset":6879},"end":{"line":200,"column":5,"offset":6883}}},{"type":"text","value":"\nNormal Order:\n","position":{"start":{"line":200,"column":5,"offset":6883},"end":{"line":202,"column":1,"offset":6899}}},{"type":"raw","value":"<br>","position":{"start":{"line":202,"column":1,"offset":6899},"end":{"line":202,"column":5,"offset":6903}}},{"type":"text","value":"\nevaluates the outsides first, but instead of passing primitive values it passes the expressions.\n","position":{"start":{"line":202,"column":5,"offset":6903},"end":{"line":204,"column":5,"offset":7010}}},{"type":"raw","value":"<br>","position":{"start":{"line":204,"column":5,"offset":7010},"end":{"line":204,"column":9,"offset":7014}}},{"type":"text","value":"\n","position":{"start":{"line":204,"column":9,"offset":7014},"end":{"line":205,"column":1,"offset":7015}}},{"type":"raw","value":"<code class=\"language-text\">(f (+ 2 3) (- 15 6))</code>","position":{"start":{"line":205,"column":1,"offset":7015},"end":{"line":205,"column":23,"offset":7037}}},{"type":"text","value":" turns into ","position":{"start":{"line":205,"column":23,"offset":7037},"end":{"line":205,"column":35,"offset":7049}}},{"type":"raw","value":"<code class=\"language-text\">(+ (g (+ 2 3)) (- 15 6))</code>","position":{"start":{"line":205,"column":35,"offset":7049},"end":{"line":205,"column":61,"offset":7075}}},{"type":"text","value":"\n","position":{"start":{"line":205,"column":61,"offset":7075},"end":{"line":206,"column":1,"offset":7076}}},{"type":"raw","value":"<br>","position":{"start":{"line":206,"column":1,"offset":7076},"end":{"line":206,"column":5,"offset":7080}}},{"type":"text","value":"\nNow ","position":{"start":{"line":206,"column":5,"offset":7080},"end":{"line":207,"column":5,"offset":7085}}},{"type":"raw","value":"<code class=\"language-text\">f</code>","position":{"start":{"line":207,"column":5,"offset":7085},"end":{"line":207,"column":8,"offset":7088}}},{"type":"text","value":" is done and the next expression can be evaluated.","position":{"start":{"line":207,"column":8,"offset":7088},"end":{"line":207,"column":58,"offset":7138}}}],"position":{"start":{"line":193,"column":1,"offset":6557},"end":{"line":207,"column":58,"offset":7138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Possible Problem:\n","position":{"start":{"line":209,"column":1,"offset":7140},"end":{"line":210,"column":1,"offset":7158}}},{"type":"raw","value":"<br>","position":{"start":{"line":210,"column":1,"offset":7158},"end":{"line":210,"column":5,"offset":7162}}}],"position":{"start":{"line":209,"column":1,"offset":7140},"end":{"line":210,"column":5,"offset":7162}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(def (zero z) (- x x))</code></pre></div>","position":{"start":{"line":211,"column":1,"offset":7163},"end":{"line":213,"column":4,"offset":7193}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"applicative ","position":{"start":{"line":214,"column":1,"offset":7194},"end":{"line":214,"column":13,"offset":7206}}}],"position":{"start":{"line":214,"column":1,"offset":7194},"end":{"line":214,"column":13,"offset":7206}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(random 10) ==&gt; 8\n(zero 8) ---&gt;\n(- 8 8) ==&gt; 0\n0</code></pre></div>","position":{"start":{"line":215,"column":1,"offset":7207},"end":{"line":221,"column":4,"offset":7286}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"normal ","position":{"start":{"line":222,"column":1,"offset":7287},"end":{"line":222,"column":8,"offset":7294}}}],"position":{"start":{"line":222,"column":1,"offset":7287},"end":{"line":222,"column":8,"offset":7294}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(zero (random 10)) ---&gt;\n(+ (random 10) (random 10)) ==&gt; \n    (random 10) ==&gt; 8\n    (random 10) ==&gt; 1\n(- 8 1) ==&gt; 7\n7</code></pre></div>","position":{"start":{"line":223,"column":1,"offset":7295},"end":{"line":230,"column":4,"offset":7419}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":231,"column":1,"offset":7420},"end":{"line":232,"column":5,"offset":7429}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the ","position":{"start":{"line":234,"column":1,"offset":7431},"end":{"line":234,"column":11,"offset":7441}}},{"type":"raw","value":"<code class=\"language-text\">(random 10)</code>","position":{"start":{"line":234,"column":11,"offset":7441},"end":{"line":234,"column":24,"offset":7454}}},{"type":"text","value":" is split into 2 different function alls in normal order you get different results.","position":{"start":{"line":234,"column":24,"offset":7454},"end":{"line":234,"column":107,"offset":7537}}}],"position":{"start":{"line":234,"column":1,"offset":7431},"end":{"line":234,"column":107,"offset":7537}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L03","position":{"start":{"line":236,"column":7,"offset":7545},"end":{"line":236,"column":10,"offset":7548}}}],"position":{"start":{"line":236,"column":1,"offset":7539},"end":{"line":236,"column":10,"offset":7548}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"L04","position":{"start":{"line":237,"column":7,"offset":7555},"end":{"line":237,"column":10,"offset":7558}}}],"position":{"start":{"line":237,"column":1,"offset":7549},"end":{"line":237,"column":10,"offset":7558}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"LABS","position":{"start":{"line":239,"column":6,"offset":7565},"end":{"line":239,"column":10,"offset":7569}}}],"position":{"start":{"line":239,"column":1,"offset":7560},"end":{"line":239,"column":10,"offset":7569}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1A","position":{"start":{"line":240,"column":7,"offset":7576},"end":{"line":240,"column":13,"offset":7582}}}],"position":{"start":{"line":240,"column":1,"offset":7570},"end":{"line":240,"column":13,"offset":7582}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first problem for the lab was to modify the ","position":{"start":{"line":241,"column":1,"offset":7583},"end":{"line":241,"column":49,"offset":7631}}},{"type":"raw","value":"<code class=\"language-text\">plural</code>","position":{"start":{"line":241,"column":49,"offset":7631},"end":{"line":241,"column":57,"offset":7639}}},{"type":"text","value":" program to handle a word ending in y, but has a vowel in front of it (boy).","position":{"start":{"line":241,"column":57,"offset":7639},"end":{"line":241,"column":133,"offset":7715}}}],"position":{"start":{"line":241,"column":1,"offset":7583},"end":{"line":241,"column":133,"offset":7715}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (plural wd)\n\t(if (equal? (last wd) &#39;y)\n\t\t(if (vowel? (last (bl wd)))\n\t\t(word wd &#39;s)\n\t\t(word (bl wd) &#39;ies))\n\t(word wd &#39;s)))\n\n(define (vowel? letter)\n\t(member? letter &#39;(a e i o u)))</code></pre></div>","position":{"start":{"line":242,"column":1,"offset":7716},"end":{"line":252,"column":4,"offset":7911}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":253,"column":1,"offset":7912},"end":{"line":253,"column":5,"offset":7916}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I handled this by adding a conditional that checks for the second to last letter.\n","position":{"start":{"line":256,"column":1,"offset":7919},"end":{"line":257,"column":1,"offset":8001}}},{"type":"raw","value":"<br>","position":{"start":{"line":257,"column":1,"offset":8001},"end":{"line":257,"column":5,"offset":8005}}},{"type":"text","value":"\n","position":{"start":{"line":257,"column":5,"offset":8005},"end":{"line":258,"column":1,"offset":8006}}},{"type":"raw","value":"<br>","position":{"start":{"line":258,"column":1,"offset":8006},"end":{"line":258,"column":5,"offset":8010}}},{"type":"text","value":"\nThe second assgnment was:","position":{"start":{"line":258,"column":5,"offset":8010},"end":{"line":259,"column":26,"offset":8036}}}],"position":{"start":{"line":256,"column":1,"offset":7919},"end":{"line":259,"column":26,"offset":8036}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Define a procedure that takes three numbers as arguments and returns the sum of\nthe squares of the two larger numbers.</code></pre></div>","position":{"start":{"line":260,"column":1,"offset":8037},"end":{"line":265,"column":4,"offset":8165}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My Solution: ","position":{"start":{"line":266,"column":1,"offset":8166},"end":{"line":266,"column":14,"offset":8179}}}],"position":{"start":{"line":266,"column":1,"offset":8166},"end":{"line":266,"column":14,"offset":8179}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(define (twoLargerSums a b c)\n    (if (&gt;= a b)\n        (if (&gt;= b c)\n            (+ (square a) (square b))\n            (+ (square a) (square c)))\n        (if (&gt;= a c)\n            (+ (square a) (square b))\n            (+ (square b) (square c))))\n)\n\n(define (square x)\n(* x x))</code></pre></div>","position":{"start":{"line":268,"column":1,"offset":8181},"end":{"line":281,"column":4,"offset":8463}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>","position":{"start":{"line":283,"column":1,"offset":8465},"end":{"line":284,"column":5,"offset":8474}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"Lab 1B","position":{"start":{"line":287,"column":7,"offset":8483},"end":{"line":287,"column":13,"offset":8489}}}],"position":{"start":{"line":287,"column":1,"offset":8477},"end":{"line":287,"column":13,"offset":8489}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":287,"column":13,"offset":8489}}}}